diff --git a/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.cpp b/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.cpp
index 2cb3134..73e6a02 100644
--- a/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.cpp
+++ b/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.cpp
@@ -4,19 +4,19 @@
 #include "stdafx.h"
 #include "Aurora-LeagueLogiLEDWrapper.h"
 
-
 // This is an example of an exported variable
-AURORALEAGUELOGILEDWRAPPER_API int nAuroraLeagueLogiLEDWrapper=0;
+AURORALEAGUELOGILEDWRAPPER_API int nAuroraLeagueLogiLEDWrapper = 0;
 
 // This is an example of an exported function.
-AURORALEAGUELOGILEDWRAPPER_API int fnAuroraLeagueLogiLEDWrapper(void)
+AURORALEAGUELOGILEDWRAPPER_API int
+fnAuroraLeagueLogiLEDWrapper (void)
 {
-    return 42;
+	return 42;
 }
 
 // This is the constructor of a class that has been exported.
 // see Aurora-LeagueLogiLEDWrapper.h for the class definition
-CAuroraLeagueLogiLEDWrapper::CAuroraLeagueLogiLEDWrapper()
+CAuroraLeagueLogiLEDWrapper::CAuroraLeagueLogiLEDWrapper ()
 {
-    return;
+	return;
 }
diff --git a/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.h b/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.h
index c04f7f6..70fa507 100644
--- a/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.h
+++ b/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.h
@@ -12,11 +12,11 @@
 
 // This class is exported from the Aurora-LeagueLogiLEDWrapper.dll
 class AURORALEAGUELOGILEDWRAPPER_API CAuroraLeagueLogiLEDWrapper {
-public:
-	CAuroraLeagueLogiLEDWrapper(void);
+  public:
+	CAuroraLeagueLogiLEDWrapper (void);
 	// TODO: add your methods here.
 };
 
 extern AURORALEAGUELOGILEDWRAPPER_API int nAuroraLeagueLogiLEDWrapper;
 
-AURORALEAGUELOGILEDWRAPPER_API int fnAuroraLeagueLogiLEDWrapper(void);
+AURORALEAGUELOGILEDWRAPPER_API int fnAuroraLeagueLogiLEDWrapper (void);
diff --git a/Aurora-LeagueLogiLEDWrapper/LogitechLEDLib.h b/Aurora-LeagueLogiLEDWrapper/LogitechLEDLib.h
index e070240..7a293e6 100644
--- a/Aurora-LeagueLogiLEDWrapper/LogitechLEDLib.h
+++ b/Aurora-LeagueLogiLEDWrapper/LogitechLEDLib.h
@@ -27,14 +27,10 @@ const int LOGITECH_LED_MOUSE = 0x0001;
 const int LOGITECH_LED_KEYBOARD = 0x0002;
 const int LOGITECH_LED_ALL = LOGITECH_LED_MOUSE | LOGITECH_LED_KEYBOARD;
 
-
 #define LOGI_DEVICETYPE_ALL (LOGI_DEVICETYPE_MONOCHROME | LOGI_DEVICETYPE_RGB | LOGI_DEVICETYPE_PERKEY_RGB)
 
-
-namespace LogiLed
-{
-	typedef enum
-	{
+namespace LogiLed {
+	typedef enum {
 		ESC = 0x01,
 		F1 = 0x3b,
 		F2 = 0x3c,
@@ -140,10 +136,9 @@ namespace LogiLed
 		NUM_ZERO = 0x52,
 		NUM_PERIOD = 0x53,
 
-	}KeyName;
+	} KeyName;
 
-	typedef enum
-	{
+	typedef enum {
 		UNKNOWN = -1,
 		BITLOC_ESC = 0,
 		BITLOC_F1 = 4,
@@ -223,7 +218,7 @@ namespace LogiLed
 		BITLOC_L = 288,
 		BITLOC_SEMICOLON = 292,
 		BITLOC_APOSTROPHE = 296,
-		BITLOC_HASHTAG = 300,//300
+		BITLOC_HASHTAG = 300,	//300
 		BITLOC_ENTER = 304,
 		//308
 		//312
@@ -276,5 +271,5 @@ namespace LogiLed
 		BITLOC_NUM_ZERO = 492,
 		BITLOC_NUM_PERIOD = 496,
 		//500
-	}Logitech_keyboardBitmapKeys;
+	} Logitech_keyboardBitmapKeys;
 }
diff --git a/Aurora-LeagueLogiLEDWrapper/dllmain.cpp b/Aurora-LeagueLogiLEDWrapper/dllmain.cpp
index 8893188..8965ee4 100644
--- a/Aurora-LeagueLogiLEDWrapper/dllmain.cpp
+++ b/Aurora-LeagueLogiLEDWrapper/dllmain.cpp
@@ -8,19 +8,19 @@
 #include <sstream>
 #include <windows.h>
 
-#define PIPE_NAME L"\\\\.\\pipe\\Aurora\\server" 
+#define PIPE_NAME L"\\\\.\\pipe\\Aurora\\server"
 
 HANDLE hPipe;
 static bool isInitialized = false;
 
 static unsigned char current_bitmap[LOGI_LED_BITMAP_SIZE];
 
-static std::string program_name;
+static
+	std::string
+	program_name;
 
-BOOL WINAPI DllMain(HMODULE hModule,
-	DWORD  ul_reason_for_call,
-	LPVOID lpReserved
-	)
+BOOL WINAPI
+DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
 {
 	switch (ul_reason_for_call)
 	{
@@ -33,8 +33,8 @@ BOOL WINAPI DllMain(HMODULE hModule,
 	return TRUE;
 }
 
-
-bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
+bool
+WriteToPipe (unsigned char bitmap[], std::string command_cargo)
 {
 	if (!isInitialized)
 		return false;
@@ -43,12 +43,13 @@ bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
 	std::stringstream ss;
 
 	ss << '{';
-	ss << "\"provider\": {\"name\": \"" << program_name << "\", \"appid\": 0},";
+	ss << "\"provider\": {\"name\": \"" << program_name <<
+		"\", \"appid\": 0},";
 	ss << command_cargo << ',';
 	ss << "\"bitmap\": [";
 	for (int bitm_pos = 0; bitm_pos < LOGI_LED_BITMAP_SIZE; bitm_pos++)
 	{
-		ss << (short)bitmap[bitm_pos];
+		ss << (short) bitmap[bitm_pos];
 
 		if (bitm_pos + 1 < LOGI_LED_BITMAP_SIZE)
 			ss << ',';
@@ -62,15 +63,13 @@ bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
 	{
 		//Try to gestore handle
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
-			GENERIC_READ |  // read and write access 
-			GENERIC_WRITE,
-			0,              // no sharing 
-			NULL,           // default security attributes
-			OPEN_EXISTING,  // opens existing pipe 
-			0,              // default attributes 
-			NULL);          // no template file 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
+							GENERIC_READ |	// read and write access 
+							GENERIC_WRITE, 0,	// no sharing 
+							NULL,	// default security attributes
+							OPEN_EXISTING,	// opens existing pipe 
+							0,	// default attributes 
+							NULL);	// no template file 
 
 		if (INVALID_HANDLE_VALUE == hPipe)
 		{
@@ -78,18 +77,19 @@ bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
 		}
 	}
 
-	DWORD cbBytes;
+	DWORD
+		cbBytes;
 
-	BOOL bResult = WriteFile(
-		hPipe,                // handle to pipe 
-		ss.str().c_str(),             // buffer to write from 
-		strlen(ss.str().c_str()),   // number of bytes to write, include the NULL
-		&cbBytes,             // number of bytes written 
-		NULL);                // not overlapped I/O 
+	BOOL
+		bResult = WriteFile (hPipe,	// handle to pipe 
+							 ss.str ().c_str (),	// buffer to write from 
+							 strlen (ss.str ().c_str ()),	// number of bytes to write, include the NULL
+							 &cbBytes,	// number of bytes written 
+							 NULL);	// not overlapped I/O 
 
-	if ((!bResult) || (strlen(ss.str().c_str()) != cbBytes))
+	if ((!bResult) || (strlen (ss.str ().c_str ()) != cbBytes))
 	{
-		CloseHandle(hPipe);
+		CloseHandle (hPipe);
 		return false;
 	}
 	else
@@ -100,17 +100,21 @@ bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
 	return false;
 }
 
-bool LogiLedInit()
+bool
+LogiLedInit ()
 {
 	if (!isInitialized)
 	{
 		//Get Application name
-		CHAR pBuf[MAX_PATH];
-		int bytes = GetModuleFileNameA(NULL, pBuf, MAX_PATH);
+		CHAR
+			pBuf[MAX_PATH];
+		int
+			bytes = GetModuleFileNameA (NULL, pBuf, MAX_PATH);
 		std::string filepath = pBuf;
 
-		int fn_beginning = 0;
-		for (int chr_pos = strlen(pBuf) - 1; chr_pos > -1; chr_pos--)
+		int
+			fn_beginning = 0;
+		for (int chr_pos = strlen (pBuf) - 1; chr_pos > -1; chr_pos--)
 		{
 			if (pBuf[chr_pos] == '\\')
 			{
@@ -119,18 +123,16 @@ bool LogiLedInit()
 			}
 		}
 
-		program_name = filepath.substr(fn_beginning);
+		program_name = filepath.substr (fn_beginning);
 
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
-			GENERIC_READ |  // read and write access 
-			GENERIC_WRITE,
-			0,              // no sharing 
-			NULL,           // default security attributes
-			OPEN_EXISTING,  // opens existing pipe 
-			0,              // default attributes 
-			NULL);          // no template file 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
+							GENERIC_READ |	// read and write access 
+							GENERIC_WRITE, 0,	// no sharing 
+							NULL,	// default security attributes
+							OPEN_EXISTING,	// opens existing pipe 
+							0,	// default attributes 
+							NULL);	// no template file 
 
 		if (INVALID_HANDLE_VALUE == hPipe)
 		{
@@ -143,34 +145,45 @@ bool LogiLedInit()
 	return true;
 }
 
-bool LogiLedSaveCurrentLighting(int deviceType)
+bool
+LogiLedSaveCurrentLighting (int deviceType)
 {
 	return isInitialized;
 }
 
-int LogiLedGetCurrentBrightnessPercentage(int deviceType)
+int
+LogiLedGetCurrentBrightnessPercentage (int deviceType)
 {
 	if (deviceType == LOGITECH_LED_KEYBOARD || deviceType == LOGITECH_LED_ALL)
-		return ((int)current_bitmap[3] / (float)255) * 100;
+		return ((int) current_bitmap[3] / (float) 255) * 100;
 	else
 		return 100;
 }
 
-bool LogiLedSetLighting(int deviceType, int redPercentage, int greenPercentage, int bluePercentage, int brightnessPercentage)
+bool
+LogiLedSetLighting (int deviceType, int redPercentage, int greenPercentage,
+					int bluePercentage, int brightnessPercentage)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
-	unsigned char brightnessValue = (unsigned char)((brightnessPercentage / 100.0f) * 255);
-
-	if (isInitialized && (deviceType == LOGITECH_LED_KEYBOARD || deviceType == LOGITECH_LED_ALL))
+	unsigned char
+		redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char
+		greenValue = (unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char
+		blueValue = (unsigned char) ((bluePercentage / 100.0f) * 255);
+	unsigned char
+		brightnessValue =
+		(unsigned char) ((brightnessPercentage / 100.0f) * 255);
+
+	if (isInitialized
+		&& (deviceType == LOGITECH_LED_KEYBOARD
+			|| deviceType == LOGITECH_LED_ALL))
 	{
 		for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
 		{
 			current_bitmap[colorset] = blueValue;
 			current_bitmap[colorset + 1] = greenValue;
 			current_bitmap[colorset + 2] = redValue;
-			current_bitmap[colorset + 3] = (char)255;
+			current_bitmap[colorset + 3] = (char) 255;
 		}
 
 		std::stringstream ss;
@@ -179,75 +192,89 @@ bool LogiLedSetLighting(int deviceType, int redPercentage, int greenPercentage,
 
 		ss << '}';
 
-		return WriteToPipe(current_bitmap, ss.str());
+		return WriteToPipe (current_bitmap, ss.str ());
 	}
 
 	return isInitialized;
 }
 
-bool LogiLedRestoreLighting()
+bool
+LogiLedRestoreLighting ()
 {
 	return isInitialized;
 }
 
-bool LogiLedFlashLighting(int deviceType, int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+bool
+LogiLedFlashLighting (int deviceType, int redPercentage, int greenPercentage,
+					  int bluePercentage, int milliSecondsDuration,
+					  int milliSecondsInterval)
 {
 	if (deviceType == LOGITECH_LED_KEYBOARD || deviceType == LOGITECH_LED_ALL)
 	{
-		unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-		unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-		unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+		unsigned char
+			redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+		unsigned char
+			greenValue = (unsigned char) ((greenPercentage / 100.0f) * 255);
+		unsigned char
+			blueValue = (unsigned char) ((bluePercentage / 100.0f) * 255);
 
 		std::stringstream ss;
 		ss << "\"command\": " << "\"FlashLighting\"" << ',';
 		ss << "\"command_data\": {";
 
-		ss << "\"red_start\": " << (int)redValue << ',';
-		ss << "\"green_start\": " << (int)greenValue << ',';
-		ss << "\"blue_start\": " << (int)blueValue << ',';
+		ss << "\"red_start\": " << (int) redValue << ',';
+		ss << "\"green_start\": " << (int) greenValue << ',';
+		ss << "\"blue_start\": " << (int) blueValue << ',';
 		ss << "\"duration\": " << milliSecondsDuration << ',';
 		ss << "\"interval\": " << milliSecondsInterval;
 
 		ss << '}';
 
-		return WriteToPipe(current_bitmap, ss.str());
+		return WriteToPipe (current_bitmap, ss.str ());
 	}
 
 	return isInitialized;
 }
 
-bool LogiLedPulseLighting(int deviceType, int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+bool
+LogiLedPulseLighting (int deviceType, int redPercentage, int greenPercentage,
+					  int bluePercentage, int milliSecondsDuration,
+					  int milliSecondsInterval)
 {
 	if (deviceType == LOGITECH_LED_KEYBOARD || deviceType == LOGITECH_LED_ALL)
 	{
-		unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-		unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-		unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+		unsigned char
+			redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+		unsigned char
+			greenValue = (unsigned char) ((greenPercentage / 100.0f) * 255);
+		unsigned char
+			blueValue = (unsigned char) ((bluePercentage / 100.0f) * 255);
 
 		std::stringstream ss;
 		ss << "\"command\": " << "\"PulseLighting\"" << ',';
 		ss << "\"command_data\": {";
 
-		ss << "\"red_start\": " << (int)redValue << ',';
-		ss << "\"green_start\": " << (int)greenValue << ',';
-		ss << "\"blue_start\": " << (int)blueValue << ',';
+		ss << "\"red_start\": " << (int) redValue << ',';
+		ss << "\"green_start\": " << (int) greenValue << ',';
+		ss << "\"blue_start\": " << (int) blueValue << ',';
 		ss << "\"duration\": " << milliSecondsDuration << ',';
 		ss << "\"interval\": " << milliSecondsInterval;
 
 		ss << '}';
 
-		return WriteToPipe(current_bitmap, ss.str());
+		return WriteToPipe (current_bitmap, ss.str ());
 	}
 
 	return isInitialized;
 }
 
-void LogiLedShutdown()
+void
+LogiLedShutdown ()
 {
 	if (isInitialized)
 	{
 		if (hPipe != INVALID_HANDLE_VALUE)
-			CloseHandle(hPipe);
+			CloseHandle (hPipe);
 		isInitialized = false;
 	}
-}
\ No newline at end of file
+}
diff --git a/Aurora-LeagueLogiLEDWrapper/stdafx.h b/Aurora-LeagueLogiLEDWrapper/stdafx.h
index f3a0737..8e634bc 100644
--- a/Aurora-LeagueLogiLEDWrapper/stdafx.h
+++ b/Aurora-LeagueLogiLEDWrapper/stdafx.h
@@ -7,10 +7,8 @@
 
 #include "targetver.h"
 
-#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers
+#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
 // Windows Header Files:
 #include <windows.h>
 
-
-
 // TODO: reference additional headers your program requires here
diff --git a/Aurora-LightFXWrapper/Aurora-LightFXWrapper.cpp b/Aurora-LightFXWrapper/Aurora-LightFXWrapper.cpp
index ea1dc19..d0de3a8 100644
--- a/Aurora-LightFXWrapper/Aurora-LightFXWrapper.cpp
+++ b/Aurora-LightFXWrapper/Aurora-LightFXWrapper.cpp
@@ -4,19 +4,19 @@
 #include "stdafx.h"
 #include "Aurora-LightFXWrapper.h"
 
-
 // This is an example of an exported variable
-AURORALIGHTFXWRAPPER_API int nAuroraLightFXWrapper=0;
+AURORALIGHTFXWRAPPER_API int nAuroraLightFXWrapper = 0;
 
 // This is an example of an exported function.
-AURORALIGHTFXWRAPPER_API int fnAuroraLightFXWrapper(void)
+AURORALIGHTFXWRAPPER_API int
+fnAuroraLightFXWrapper (void)
 {
-    return 42;
+	return 42;
 }
 
 // This is the constructor of a class that has been exported.
 // see Aurora-LightFXWrapper.h for the class definition
-CAuroraLightFXWrapper::CAuroraLightFXWrapper()
+CAuroraLightFXWrapper::CAuroraLightFXWrapper ()
 {
-    return;
+	return;
 }
diff --git a/Aurora-LightFXWrapper/Aurora-LightFXWrapper.h b/Aurora-LightFXWrapper/Aurora-LightFXWrapper.h
index bc84fe8..5ebf85d 100644
--- a/Aurora-LightFXWrapper/Aurora-LightFXWrapper.h
+++ b/Aurora-LightFXWrapper/Aurora-LightFXWrapper.h
@@ -12,11 +12,11 @@
 
 // This class is exported from the Aurora-LightFXWrapper.dll
 class AURORALIGHTFXWRAPPER_API CAuroraLightFXWrapper {
-public:
-	CAuroraLightFXWrapper(void);
+  public:
+	CAuroraLightFXWrapper (void);
 	// TODO: add your methods here.
 };
 
 extern AURORALIGHTFXWRAPPER_API int nAuroraLightFXWrapper;
 
-AURORALIGHTFXWRAPPER_API int fnAuroraLightFXWrapper(void);
+AURORALIGHTFXWRAPPER_API int fnAuroraLightFXWrapper (void);
diff --git a/Aurora-LightFXWrapper/LFX2.h b/Aurora-LightFXWrapper/LFX2.h
index 89d29fb..6f6763e 100644
--- a/Aurora-LightFXWrapper/LFX2.h
+++ b/Aurora-LightFXWrapper/LFX2.h
@@ -28,18 +28,18 @@ is strictly forbidden.
 #include "LFXDecl.h"
 #define _EXPORTING
 
-#ifdef _EXPORTING // To be used by SDK developer
+#ifdef _EXPORTING				// To be used by SDK developer
 #define FN_DECLSPEC __declspec(dllexport)
 
-#elif _IMPORTING // To be used for dynamic linking to dll
+#elif _IMPORTING				// To be used for dynamic linking to dll
 #define FN_DECLSPEC __declspec(dllimport)
 
 #else // To be used for linking using static library
-#define FN_DECLSPEC    
+#define FN_DECLSPEC
 #endif
 
 #ifdef _STDCALL_SUPPORTED
-#define STDCALL __stdcall // Declare our calling convention
+#define STDCALL __stdcall		// Declare our calling convention
 #else
 #define STDCALL
 #endif // STDCALL_SUPPORTED
@@ -64,7 +64,7 @@ extern "C" {
 	LFX_ERROR_NODEVS if the system is initialized, but no devices are available.
 	LFX_FAILURE if initialization fails.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Initialize();
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_Initialize ();
 
 	/*********************************************************
 	Function: LFX_Release
@@ -81,7 +81,7 @@ extern "C" {
 	Returns:
 	LFX_SUCCESS
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Release();
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_Release ();
 
 	/*********************************************************
 	Function: LFX_Reset
@@ -97,7 +97,7 @@ extern "C" {
 	LFX_ERROR_NODEVS if there are no devices available to reset.
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Reset();
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_Reset ();
 
 	/*********************************************************
 	Function: LFX_Update
@@ -111,7 +111,7 @@ extern "C" {
 	LFX_ERROR_NODEVS if the system is initialized but no devices are available.
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Update();
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_Update ();
 
 	/*********************************************************
 	Function: LFX_UpdateDefault
@@ -127,7 +127,7 @@ extern "C" {
 	LFX_ERROR_NODEVS if the system is initialized but no devices are available.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_UpdateDefault();
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_UpdateDefault ();
 
 	/*********************************************************
 	Function: LFX_GetNumDevices
@@ -140,7 +140,7 @@ extern "C" {
 	LFX_ERROR_NODEVS if the system is initialized but no devices are available, leaving the param untouched.
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumDevices(unsigned int* const);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumDevices (unsigned int *const);
 
 	/*********************************************************
 	Function: LFX_GetDeviceDescription
@@ -156,7 +156,12 @@ extern "C" {
 	LFX_ERROR_BUFFSIZE if the buffer provided is too small.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetDeviceDescription(const unsigned int, char* const, const unsigned int, unsigned char* const);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetDeviceDescription (const unsigned
+															 int, char *const,
+															 const unsigned
+															 int,
+															 unsigned char
+															 *const);
 
 	/*********************************************************
 	Function: LFX_GetNumLights
@@ -170,7 +175,8 @@ extern "C" {
 	LFX_ERROR_NOLIGHTS if no lights are available at the device index provided.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumLights(const unsigned int, unsigned int* const);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumLights (const unsigned int,
+													 unsigned int *const);
 
 	/*********************************************************
 	Function: LFX_GetLightDescription
@@ -185,7 +191,11 @@ extern "C" {
 	LFX_ERROR_BUFFSIZE if the buffer provided is too small in size.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightDescription(const unsigned int, const unsigned int, char* const, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightDescription (const unsigned int,
+															const unsigned int,
+															char *const,
+															const unsigned
+															int);
 
 	/*********************************************************
 	Function: LFX_GetLightLocation
@@ -200,7 +210,9 @@ extern "C" {
 	LFX_ERROR_NOLIGHTS if no lights are available at the device and light index provided.
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightLocation(const unsigned int, const unsigned int, PLFX_POSITION const);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightLocation (const unsigned int,
+														 const unsigned int,
+														 PLFX_POSITION const);
 
 	/*********************************************************
 	Function: LFX_GetLightColor
@@ -220,7 +232,9 @@ extern "C" {
 	LFX_ERROR_NOLIGHTS if no lights are available at the device and light index provided.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightColor(const unsigned int, const unsigned int, PLFX_COLOR const);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightColor (const unsigned int,
+													  const unsigned int,
+													  PLFX_COLOR const);
 
 	/*********************************************************
 	Function: LFX_SetLightColor
@@ -236,7 +250,9 @@ extern "C" {
 	LFX_ERROR_NOINIT if the system is not yet initialized.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightColor(const unsigned int, const unsigned int, const PLFX_COLOR);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightColor (const unsigned int,
+													  const unsigned int,
+													  const PLFX_COLOR);
 
 	/*********************************************************
 	Function: LFX_Light
@@ -264,7 +280,8 @@ extern "C" {
 	LFX_FAILURE if some other error occurred
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Light(const unsigned int, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_Light (const unsigned int,
+											  const unsigned int);
 
 	/*********************************************************
 	Function: LFX_SetLightActionColor
@@ -281,7 +298,10 @@ extern "C" {
 	LFX_ERROR_NOINIT if the system is not yet initialized.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColor(const unsigned int, const unsigned int, const unsigned int, const PLFX_COLOR);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColor (const unsigned int,
+															const unsigned int,
+															const unsigned int,
+															const PLFX_COLOR);
 
 	/*********************************************************
 	Function: LFX_SetLightActionColorEx
@@ -298,7 +318,15 @@ extern "C" {
 	LFX_ERROR_NOINIT if the system is not yet initialized.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColorEx(const unsigned int, const unsigned int, const unsigned int, const PLFX_COLOR, const PLFX_COLOR);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColorEx (const unsigned
+															  int,
+															  const unsigned
+															  int,
+															  const unsigned
+															  int,
+															  const PLFX_COLOR,
+															  const
+															  PLFX_COLOR);
 
 	/*********************************************************
 	Function: LFX_ActionColor
@@ -326,7 +354,9 @@ extern "C" {
 	LFX_FAILURE if some other error occurred
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColor(const unsigned int, const unsigned int, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColor (const unsigned int,
+													const unsigned int,
+													const unsigned int);
 
 	/*********************************************************
 	Function: LFX_ActionColorEx
@@ -354,7 +384,10 @@ extern "C" {
 	LFX_FAILURE if some other error occurred
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColorEx(const unsigned int, const unsigned int, const unsigned int, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColorEx (const unsigned int,
+													  const unsigned int,
+													  const unsigned int,
+													  const unsigned int);
 
 	/*********************************************************
 	Function: LFX_SetTiming
@@ -373,7 +406,7 @@ extern "C" {
 	Returns:
 	LFX_FAILURE if changing tempo is not supported or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetTiming(const int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetTiming (const int);
 
 	/*********************************************************
 	Function: LFX_GetVersion
@@ -386,10 +419,11 @@ extern "C" {
 	LFX_ERROR_BUFFSIZE if the buffer provided is too small.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetVersion(char* const, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetVersion (char *const,
+												   const unsigned int);
 
 #ifdef __cplusplus
-} /* end extern "C" */
+}								/* end extern "C" */
 #endif
 
   // The remaining defines and typedefs are useful for explicitly linking to
@@ -418,22 +452,40 @@ extern "C" {
 #define LFX_DLL_GETVERSION "LFX_GetVersion"
 
   // LightFX 2.0 function pointer declarations
-typedef LFX_RESULT(*LFX2INITIALIZE)();
-typedef LFX_RESULT(*LFX2RELEASE)();
-typedef LFX_RESULT(*LFX2RESET)();
-typedef LFX_RESULT(*LFX2UPDATE)();
-typedef LFX_RESULT(*LFX2UPDATEDEFAULT)();
-typedef LFX_RESULT(*LFX2GETNUMDEVICES)(unsigned int* const);
-typedef LFX_RESULT(*LFX2GETDEVDESC)(const unsigned int, char* const, const unsigned int, unsigned char* const);
-typedef LFX_RESULT(*LFX2GETNUMLIGHTS)(const unsigned int, unsigned int* const);
-typedef LFX_RESULT(*LFX2GETLIGHTDESC)(const unsigned int, const unsigned int, char* const, const unsigned int);
-typedef LFX_RESULT(*LFX2GETLIGHTLOC)(const unsigned int, const unsigned int, PLFX_POSITION const);
-typedef LFX_RESULT(*LFX2GETLIGHTCOL)(const unsigned int, const unsigned int, PLFX_COLOR const);
-typedef LFX_RESULT(*LFX2SETLIGHTCOL)(const unsigned int, const unsigned int, const PLFX_COLOR);
-typedef LFX_RESULT(*LFX2LIGHT)(const unsigned int, const unsigned int);
-typedef LFX_RESULT(*LFX2SETLIGHTACTIONCOLOR)(const unsigned int, const unsigned int, const unsigned int, const PLFX_COLOR);
-typedef LFX_RESULT(*LFX2SETLIGHTACTIONCOLOREX)(const unsigned int, const unsigned int, const unsigned int, const PLFX_COLOR, const PLFX_COLOR);
-typedef LFX_RESULT(*LFX2ACTIONCOLOR)(const unsigned int, const unsigned int, const unsigned int);
-typedef LFX_RESULT(*LFX2ACTIONCOLOREX)(const unsigned int, const unsigned int, const unsigned int, const unsigned int);
-typedef LFX_RESULT(*LFX2SETTIMING)(const int);
-typedef LFX_RESULT(*LFX2GETVERSION)(char* const, const unsigned int);
\ No newline at end of file
+typedef LFX_RESULT (*LFX2INITIALIZE) ();
+typedef LFX_RESULT (*LFX2RELEASE) ();
+typedef LFX_RESULT (*LFX2RESET) ();
+typedef LFX_RESULT (*LFX2UPDATE) ();
+typedef LFX_RESULT (*LFX2UPDATEDEFAULT) ();
+typedef LFX_RESULT (*LFX2GETNUMDEVICES) (unsigned int *const);
+typedef LFX_RESULT (*LFX2GETDEVDESC) (const unsigned int, char *const,
+									  const unsigned int,
+									  unsigned char *const);
+typedef LFX_RESULT (*LFX2GETNUMLIGHTS) (const unsigned int,
+										unsigned int *const);
+typedef LFX_RESULT (*LFX2GETLIGHTDESC) (const unsigned int, const unsigned int,
+										char *const, const unsigned int);
+typedef LFX_RESULT (*LFX2GETLIGHTLOC) (const unsigned int, const unsigned int,
+									   PLFX_POSITION const);
+typedef LFX_RESULT (*LFX2GETLIGHTCOL) (const unsigned int, const unsigned int,
+									   PLFX_COLOR const);
+typedef LFX_RESULT (*LFX2SETLIGHTCOL) (const unsigned int, const unsigned int,
+									   const PLFX_COLOR);
+typedef LFX_RESULT (*LFX2LIGHT) (const unsigned int, const unsigned int);
+typedef LFX_RESULT (*LFX2SETLIGHTACTIONCOLOR) (const unsigned int,
+											   const unsigned int,
+											   const unsigned int,
+											   const PLFX_COLOR);
+typedef LFX_RESULT (*LFX2SETLIGHTACTIONCOLOREX) (const unsigned int,
+												 const unsigned int,
+												 const unsigned int,
+												 const PLFX_COLOR,
+												 const PLFX_COLOR);
+typedef LFX_RESULT (*LFX2ACTIONCOLOR) (const unsigned int, const unsigned int,
+									   const unsigned int);
+typedef LFX_RESULT (*LFX2ACTIONCOLOREX) (const unsigned int,
+										 const unsigned int,
+										 const unsigned int,
+										 const unsigned int);
+typedef LFX_RESULT (*LFX2SETTIMING) (const int);
+typedef LFX_RESULT (*LFX2GETVERSION) (char *const, const unsigned int);
diff --git a/Aurora-LightFXWrapper/LFXConfigurator.h b/Aurora-LightFXWrapper/LFXConfigurator.h
index 61b1b02..c9e74af 100644
--- a/Aurora-LightFXWrapper/LFXConfigurator.h
+++ b/Aurora-LightFXWrapper/LFXConfigurator.h
@@ -27,40 +27,40 @@ is strictly forbidden.
 
 #define _EXPORTING
 
-#ifdef _EXPORTING // To be used by SDK developer
+#ifdef _EXPORTING				// To be used by SDK developer
 #define FN_DECLSPEC __declspec(dllexport)
 
-#elif _IMPORTING // To be used for dynamic linking to dll
+#elif _IMPORTING				// To be used for dynamic linking to dll
 #define FN_DECLSPEC __declspec(dllimport)
 
 #else // To be used for linking using static library
-#define FN_DECLSPEC    
+#define FN_DECLSPEC
 #endif
 
 #ifdef _STDCALL_SUPPORTED
-#define STDCALL __stdcall // Declare our calling convention
+#define STDCALL __stdcall		// Declare our calling convention
 #else
 #define STDCALL
 #endif // STDCALL_SUPPORTED
 
 // Return values
 #define LFX_RESULT unsigned int
-#define LFX_SUCCESS				0		// Success
-#define LFX_FAILURE				1		// Generic failure
-#define LFX_ERROR_NOINIT		2		// System not initialized yet
-#define LFX_ERROR_NODEVS		3		// No devices available
-#define LFX_ERROR_NOLIGHTS		4		// No lights available
-#define LFX_ERROR_BUFFSIZE		5		// Buffer size too small
+#define LFX_SUCCESS			0	// Success
+#define LFX_FAILURE			1	// Generic failure
+#define LFX_ERROR_NOINIT		2	// System not initialized yet
+#define LFX_ERROR_NODEVS		3	// No devices available
+#define LFX_ERROR_NOLIGHTS		4	// No lights available
+#define LFX_ERROR_BUFFSIZE		5	// Buffer size too small
 
 //event position
 #define LFX_EVENTPOSITION unsigned int
-#define LFX_FIRSTEVENT			0		// First event
-#define LFX_NEXTEVENT			1		// Next event
+#define LFX_FIRSTEVENT			0	// First event
+#define LFX_NEXTEVENT			1	// Next event
 
 //event position
 #define LFX_APPTYPE unsigned int
-#define LFX_GAME				0		// The application is a game
-#define LFX_GENERALUSEAPP		1		// It is a general use application
+#define LFX_GAME				0	// The application is a game
+#define LFX_GENERALUSEAPP		1	// It is a general use application
 
 #ifdef __cplusplus
 extern "C" {
@@ -81,7 +81,7 @@ extern "C" {
 	LFX_SUCCESS if the system is successfully initialized, or was already initialized.
 	LFX_FAILURE if initialization fails.
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_Initialize();
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_Initialize ();
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_Release
@@ -94,7 +94,7 @@ extern "C" {
 	Returns:
 	LFX_SUCCESS
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_Release();
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_Release ();
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_RegisterConfigurationFile
@@ -108,7 +108,11 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_RegisterConfigurationFile(char* const appFXName, char* const configurationFileFullPath, const LFX_APPTYPE appType);
+	FN_DECLSPEC LFX_RESULT STDCALL
+		LFX_CONFIGURATOR_RegisterConfigurationFile (char *const appFXName,
+													char *const
+													configurationFileFullPath,
+													const LFX_APPTYPE appType);
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_UnregisterConfigurationFile
@@ -123,7 +127,8 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_UnregisterConfigurationFile(char* const appFXName);
+	FN_DECLSPEC LFX_RESULT STDCALL
+		LFX_CONFIGURATOR_UnregisterConfigurationFile (char *const appFXName);
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_GetUserConfigurationFilePath
@@ -140,7 +145,12 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_GetUserConfigurationFilePath(char* const appFXName, char* const userConfigurationFilename, const unsigned int userConfigurationFilenameSize);
+	FN_DECLSPEC LFX_RESULT STDCALL
+		LFX_CONFIGURATOR_GetUserConfigurationFilePath (char *const appFXName,
+													   char *const
+													   userConfigurationFilename,
+													   const unsigned int
+													   userConfigurationFilenameSize);
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_GetConfigurationEvent
@@ -155,7 +165,19 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_GetConfigurationEvent(char* const appFXName, const unsigned int eventID, unsigned int* &colors, unsigned int &colorCount);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_GetConfigurationEvent (char
+																		   *const
+																		   appFXName,
+																		   const
+																		   unsigned
+																		   int
+																		   eventID,
+																		   unsigned
+																		   int
+																		   *&colors,
+																		   unsigned
+																		   int
+																		   &colorCount);
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_GetConfigurationEventAt
@@ -173,11 +195,18 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_GetConfigurationEventAt(char* const appFXName, unsigned int position,
-		int &eventID, char* const eventName, const unsigned int eventNameSize, unsigned int* &colors, unsigned int &colorCount);
+	FN_DECLSPEC LFX_RESULT STDCALL
+		LFX_CONFIGURATOR_GetConfigurationEventAt (char *const appFXName,
+												  unsigned int position,
+												  int &eventID,
+												  char *const eventName,
+												  const unsigned int
+												  eventNameSize,
+												  unsigned int *&colors,
+												  unsigned int &colorCount);
 
 #ifdef __cplusplus
-} /* end extern "C" */
+}								/* end extern "C" */
 #endif
 
   // The remaining defines and typedefs are useful for explicitly linking to
@@ -193,12 +222,34 @@ extern "C" {
 #define LFX_CONFIGURATOR_DLL_GETCONFIGURATIONEVENT				"LFX_CONFIGURATOR_GetConfigurationEvent"
 #define LFX_CONFIGURATOR_DLL_GETCONFIGURATIONEVENTFROMPOSITION	"LFX_CONFIGURATOR_GetConfigurationEventAt"
 
-
   // LightFX Config 1.0 function pointer declarations
-typedef LFX_RESULT(*LFXCONFIGURATORINITIALIZE)();
-typedef LFX_RESULT(*LFXCONFIGURATORRELEASE)();
-typedef LFX_RESULT(*LFXCONFIGURATORREGISTERCONFIGURATIONFILE)(char* const, char* const, const LFX_APPTYPE);
-typedef LFX_RESULT(*LFXCONFIGURATORUNREGISTERCONFIGURATIONFILE)(char* const);
-typedef LFX_RESULT(*LFXCONFIGURATORGETUSERCONFIGURATIONFILEPATH)(char* const, char* const, const unsigned int);
-typedef LFX_RESULT(*LFXCONFIGURATORGETCONFIGURATIONEVENT)(char* const, const unsigned int, unsigned int*&, unsigned int&);
-typedef LFX_RESULT(*LFXCONFIGURATORGETCONFIGURATIONEVENTFROMPOSITION)(char* const, unsigned int, int&, char* const, const unsigned int, unsigned int*&, unsigned int&);
+typedef LFX_RESULT (*LFXCONFIGURATORINITIALIZE) ();
+typedef LFX_RESULT (*LFXCONFIGURATORRELEASE) ();
+typedef LFX_RESULT (*LFXCONFIGURATORREGISTERCONFIGURATIONFILE) (char *const,
+																char *const,
+																const
+																LFX_APPTYPE);
+typedef LFX_RESULT (*LFXCONFIGURATORUNREGISTERCONFIGURATIONFILE) (char *const);
+typedef LFX_RESULT (*LFXCONFIGURATORGETUSERCONFIGURATIONFILEPATH) (char *const,
+																   char *const,
+																   const
+																   unsigned
+																   int);
+typedef LFX_RESULT (*LFXCONFIGURATORGETCONFIGURATIONEVENT) (char *const,
+															const unsigned int,
+															unsigned int *&,
+															unsigned int &);
+typedef LFX_RESULT (*LFXCONFIGURATORGETCONFIGURATIONEVENTFROMPOSITION) (char
+																		*const,
+																		unsigned
+																		int,
+																		int &,
+																		char
+																		*const,
+																		const
+																		unsigned
+																		int,
+																		unsigned
+																		int *&,
+																		unsigned
+																		int &);
diff --git a/Aurora-LightFXWrapper/LFXDecl.h b/Aurora-LightFXWrapper/LFXDecl.h
index 30f7e2e..d621acb 100644
--- a/Aurora-LightFXWrapper/LFXDecl.h
+++ b/Aurora-LightFXWrapper/LFXDecl.h
@@ -34,12 +34,12 @@ is strictly forbidden.
 #define LFX_MAX_STRING_SIZE 255	// Maximum string size
 #define LFX_MAX_COLOR_VALUE 255	// Maximum color value
 
-#define LFX_MINIMUM_DEVICE_SIZE 3 // Min device physical size/bounds in cm
-#define LFX_SEGMENTS_PER_AXIS 3 // Each location axis (x,y,z) has 3 segments (e.g. left,center,right), resulting in 27 possible locations
+#define LFX_MINIMUM_DEVICE_SIZE 3	// Min device physical size/bounds in cm
+#define LFX_SEGMENTS_PER_AXIS 3	// Each location axis (x,y,z) has 3 segments (e.g. left,center,right), resulting in 27 possible locations
 
 // LightFX 1.x legacy support
 #define LFX_INTENSITY_CONV	36	// Brightness/intensity conversion factor
-#define LFX_INDEX_COLOR_COUNT 17 // 16 colors, plus 0 for "off"
+#define LFX_INDEX_COLOR_COUNT 17	// 16 colors, plus 0 for "off"
 
 // Type definitions
 #define LFX_PROTOCOL_UNKNOWN	0x00
@@ -65,63 +65,63 @@ is strictly forbidden.
 
 // Return values
 #define LFX_RESULT unsigned int
-#define LFX_SUCCESS				0		// Success
-#define LFX_FAILURE				1		// Generic failure
-#define LFX_ERROR_NOINIT		2		// System not initialized yet
-#define LFX_ERROR_NODEVS		3		// No devices available
-#define LFX_ERROR_NOLIGHTS		4		// No lights available
-#define LFX_ERROR_BUFFSIZE		5		// Buffer size too small
+#define LFX_SUCCESS			0	// Success
+#define LFX_FAILURE			1	// Generic failure
+#define LFX_ERROR_NOINIT		2	// System not initialized yet
+#define LFX_ERROR_NODEVS		3	// No devices available
+#define LFX_ERROR_NOLIGHTS		4	// No lights available
+#define LFX_ERROR_BUFFSIZE		5	// Buffer size too small
 
 // Translation layer position/location encoding
 // Note: This is a bit mask, with 27 zones encoded into 32 bits
-//		Bits 0 through 8 are all part of the front-most plane (closest to the user)
-//		Bits 9 through 17 are all part of the middle plane (mid-way from the user)
-//		Bits 18 through 27 are all part of the back-most plane (furthest from the user)
-//		Bits 28 through 32 are reserved
-//		
-//		Bits 0 through 8 are split into lower, middle and upper sections (relative to the floor & ceiling)
+//      Bits 0 through 8 are all part of the front-most plane (closest to the user)
+//      Bits 9 through 17 are all part of the middle plane (mid-way from the user)
+//      Bits 18 through 27 are all part of the back-most plane (furthest from the user)
+//      Bits 28 through 32 are reserved
+//      
+//      Bits 0 through 8 are split into lower, middle and upper sections (relative to the floor & ceiling)
 //
-//		Bit 0: [ FRONT, LOWER, LEFT ]
-//		Bit 1: [ FRONT, LOWER, CENTER ]
-//		Bit 2: [ FRONT, LOWER, RIGHT ]
+//      Bit 0: [ FRONT, LOWER, LEFT ]
+//      Bit 1: [ FRONT, LOWER, CENTER ]
+//      Bit 2: [ FRONT, LOWER, RIGHT ]
 //
-//		Bit 3: [ FRONT, MIDDLE, LEFT ]
-//		Bit 4: [ FRONT, MIDDLE, CENTER ]
-//		Bit 5: [ FRONT, MIDDLE, RIGHT ]
+//      Bit 3: [ FRONT, MIDDLE, LEFT ]
+//      Bit 4: [ FRONT, MIDDLE, CENTER ]
+//      Bit 5: [ FRONT, MIDDLE, RIGHT ]
 //
-//		Bit 6: [ FRONT, UPPER, LEFT ]
-//		Bit 7: [ FRONT, UPPER, CENTER ]
-//		Bit 8: [ FRONT, UPPER, RIGHT ]
+//      Bit 6: [ FRONT, UPPER, LEFT ]
+//      Bit 7: [ FRONT, UPPER, CENTER ]
+//      Bit 8: [ FRONT, UPPER, RIGHT ]
 //
-//		Bits 9 through 17 are split into lower, middle and upper sections as well
+//      Bits 9 through 17 are split into lower, middle and upper sections as well
 //
-//		Bit  9: [ MIDDLE, LOWER, LEFT ]
-//		Bit 10: [ MIDDLE, LOWER, CENTER ]
-//		Bit 11: [ MIDDLE, LOWER, RIGHT ]
+//      Bit  9: [ MIDDLE, LOWER, LEFT ]
+//      Bit 10: [ MIDDLE, LOWER, CENTER ]
+//      Bit 11: [ MIDDLE, LOWER, RIGHT ]
 //
-//		Bit 12: [ MIDDLE, MIDDLE, LEFT ]
-//		Bit 13: [ MIDDLE, MIDDLE, CENTER ]
-//		Bit 14: [ MIDDLE, MIDDLE, RIGHT ]
+//      Bit 12: [ MIDDLE, MIDDLE, LEFT ]
+//      Bit 13: [ MIDDLE, MIDDLE, CENTER ]
+//      Bit 14: [ MIDDLE, MIDDLE, RIGHT ]
 //
-//		Bit 15: [ MIDDLE, UPPER, LEFT ]
-//		Bit 16: [ MIDDLE, UPPER, CENTER ]
-//		Bit 17: [ MIDDLE, UPPER, RIGHT ]
+//      Bit 15: [ MIDDLE, UPPER, LEFT ]
+//      Bit 16: [ MIDDLE, UPPER, CENTER ]
+//      Bit 17: [ MIDDLE, UPPER, RIGHT ]
 //
-//		Similar with bits 18 through 26
+//      Similar with bits 18 through 26
 //
-//		Bit 18: [ BACK, LOWER, LEFT ]
-//		Bit 19: [ BACK, LOWER, CENTER ]
-//		Bit 20: [ BACK, LOWER, RIGHT ]
+//      Bit 18: [ BACK, LOWER, LEFT ]
+//      Bit 19: [ BACK, LOWER, CENTER ]
+//      Bit 20: [ BACK, LOWER, RIGHT ]
 //
-//		Bit 21: [ BACK, MIDDLE, LEFT ]
-//		Bit 22: [ BACK, MIDDLE, CENTER ]
-//		Bit 23: [ BACK, MIDDLE, RIGHT ]
+//      Bit 21: [ BACK, MIDDLE, LEFT ]
+//      Bit 22: [ BACK, MIDDLE, CENTER ]
+//      Bit 23: [ BACK, MIDDLE, RIGHT ]
 //
-//		Bit 24: [ BACK, UPPER, LEFT ]
-//		Bit 25: [ BACK, UPPER, CENTER ]
-//		Bit 26: [ BACK, UPPER, RIGHT ]
+//      Bit 24: [ BACK, UPPER, LEFT ]
+//      Bit 25: [ BACK, UPPER, CENTER ]
+//      Bit 26: [ BACK, UPPER, RIGHT ]
 //
-//		Bits 27 through 32 are reserved
+//      Bits 27 through 32 are reserved
 
 // Near Z-plane light definitions
 #define LFX_FRONT_LOWER_LEFT	0x00000001
@@ -194,14 +194,13 @@ is strictly forbidden.
 #define LFX_ACTION_COLOR	0x00000003
 
 // Color, encoded into 4 unsigned chars
-typedef struct _LFX_COLOR
-{
+typedef struct _LFX_COLOR {
 	unsigned char red;
 	unsigned char green;
 	unsigned char blue;
 	unsigned char brightness;
 
-}LFX_COLOR, *PLFX_COLOR;
+} LFX_COLOR, *PLFX_COLOR;
 
 /**************************************************************************************
 IMPORTANT NOTE:
@@ -229,10 +228,9 @@ corner of the device's bounding box.
 X increases from left to right.
 Y increases from bottom to top.
 Z increases from back to front. */
-typedef struct _LFX_POSITION
-{
+typedef struct _LFX_POSITION {
 	unsigned char x;
 	unsigned char y;
 	unsigned char z;
 
-} LFX_POSITION, *PLFX_POSITION;
\ No newline at end of file
+} LFX_POSITION, *PLFX_POSITION;
diff --git a/Aurora-LightFXWrapper/dllmain.cpp b/Aurora-LightFXWrapper/dllmain.cpp
index 6353172..0a853ab 100644
--- a/Aurora-LightFXWrapper/dllmain.cpp
+++ b/Aurora-LightFXWrapper/dllmain.cpp
@@ -5,26 +5,31 @@
 
 //#define DEVICE_LIGHTS_NUM 5
 
-#define PIPE_NAME L"\\\\.\\pipe\\Aurora\\server" 
+#define PIPE_NAME L"\\\\.\\pipe\\Aurora\\server"
 
 HANDLE hPipe;
 static bool isInitialized = false;
 
-static LFX_COLOR current_bg = { (char)0, (char)0, (char)0, (char)0 };
+static LFX_COLOR current_bg = { (char) 0, (char) 0, (char) 0, (char) 0 };
 static int action_timing = 200;
 
-static std::string program_name;
-static std::string device_name = "Aurora";
-static int device_lights_num = 1; //DEVICE_LIGHTS_NUM;
-static std::string device_lights_name = "Northern Light";
+static
+	std::string
+	program_name;
+static
+	std::string
+	device_name = "Aurora";
+static int
+	device_lights_num = 1;		//DEVICE_LIGHTS_NUM;
+static
+	std::string
+	device_lights_name = "Northern Light";
 //static PLFX_COLOR device_lights[DEVICE_LIGHTS_NUM];
-static bool isUpdated;
+static bool
+	isUpdated;
 
-
-BOOL APIENTRY DllMain(HMODULE hModule,
-	DWORD  ul_reason_for_call,
-	LPVOID lpReserved
-)
+BOOL APIENTRY
+DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
 {
 	switch (ul_reason_for_call)
 	{
@@ -37,7 +42,8 @@ BOOL APIENTRY DllMain(HMODULE hModule,
 	return TRUE;
 }
 
-bool WriteToPipe(const std::string command_cargo)
+bool
+WriteToPipe (const std::string command_cargo)
 {
 	if (!isInitialized)
 		return false;
@@ -46,7 +52,8 @@ bool WriteToPipe(const std::string command_cargo)
 	std::string contents = "";
 
 	contents += '{';
-	contents += "\"provider\": {\"name\": \"" + program_name + "\", \"appid\": 0},";
+	contents +=
+		"\"provider\": {\"name\": \"" + program_name + "\", \"appid\": 0},";
 	contents += command_cargo;
 	contents += '}';
 	contents += "\r\n";
@@ -55,14 +62,13 @@ bool WriteToPipe(const std::string command_cargo)
 	{
 		//Try to restore handle
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
-			GENERIC_WRITE,  // write access 
-			0,              // no sharing 
-			NULL,           // default security attributes
-			OPEN_EXISTING,  // opens existing pipe 
-			0,              // default attributes 
-			NULL);          // no template file 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
+							GENERIC_WRITE,	// write access 
+							0,	// no sharing 
+							NULL,	// default security attributes
+							OPEN_EXISTING,	// opens existing pipe 
+							0,	// default attributes 
+							NULL);	// no template file 
 
 		if (INVALID_HANDLE_VALUE == hPipe)
 		{
@@ -70,21 +76,24 @@ bool WriteToPipe(const std::string command_cargo)
 		}
 	}
 
-	DWORD cbBytes;
+	DWORD
+		cbBytes;
 
-	const char* c_contents = contents.c_str();
-	int c_cotents_len = strlen(c_contents);
+	const char *
+		c_contents = contents.c_str ();
+	int
+		c_cotents_len = strlen (c_contents);
 
-	BOOL bResult = WriteFile(
-		hPipe,                // handle to pipe 
-		c_contents,             // buffer to write from 
-		c_cotents_len,   // number of bytes to write, include the NULL
-		&cbBytes,             // number of bytes written 
-		NULL);                // not overlapped I/O 
+	BOOL
+		bResult = WriteFile (hPipe,	// handle to pipe 
+							 c_contents,	// buffer to write from 
+							 c_cotents_len,	// number of bytes to write, include the NULL
+							 &cbBytes,	// number of bytes written 
+							 NULL);	// not overlapped I/O 
 
 	if ((!bResult) || c_cotents_len != cbBytes)
 	{
-		CloseHandle(hPipe);
+		CloseHandle (hPipe);
 		return false;
 	}
 	else
@@ -95,24 +104,30 @@ bool WriteToPipe(const std::string command_cargo)
 	return false;
 }
 
-
 #ifdef __cplusplus
-extern "C" {
+extern
+	"C"
+{
 #endif
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Initialize()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Initialize ()
 	{
 		isUpdated = false;
 
 		if (!isInitialized)
 		{
 			//Get Application name
-			CHAR pBuf[MAX_PATH];
-			int bytes = GetModuleFileNameA(NULL, pBuf, MAX_PATH);
-			std::string filepath = pBuf;
-
-			int fn_beginning = 0;
-			for (int chr_pos = strlen(pBuf) - 1; chr_pos > -1; chr_pos--)
+			CHAR
+				pBuf[MAX_PATH];
+			int
+				bytes = GetModuleFileNameA (NULL, pBuf, MAX_PATH);
+			std::string
+				filepath = pBuf;
+
+			int
+				fn_beginning = 0;
+			for (int chr_pos = strlen (pBuf) - 1; chr_pos > -1; chr_pos--)
 			{
 				if (pBuf[chr_pos] == '\\')
 				{
@@ -121,17 +136,16 @@ extern "C" {
 				}
 			}
 
-			program_name = filepath.substr(fn_beginning);
+			program_name = filepath.substr (fn_beginning);
 
 			//Connect to the server pipe using CreateFile()
-			hPipe = CreateFile(
-				PIPE_NAME,   // pipe name 
-				GENERIC_WRITE,  // write access 
-				0,              // no sharing 
-				NULL,           // default security attributes
-				OPEN_EXISTING,  // opens existing pipe 
-				0,              // default attributes 
-				NULL);          // no template file 
+			hPipe = CreateFile (PIPE_NAME,	// pipe name 
+								GENERIC_WRITE,	// write access 
+								0,	// no sharing 
+								NULL,	// default security attributes
+								OPEN_EXISTING,	// opens existing pipe 
+								0,	// default attributes 
+								NULL);	// no template file 
 
 			if (INVALID_HANDLE_VALUE == hPipe)
 			{
@@ -144,21 +158,25 @@ extern "C" {
 		return LFX_SUCCESS;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Release()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Release ()
 	{
 		if (isInitialized && hPipe != INVALID_HANDLE_VALUE)
 		{
-			CloseHandle(hPipe);
+			CloseHandle (hPipe);
 		}
-		
+
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Reset()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Reset ()
 	{
 		if (isInitialized)
 		{
-			current_bg = { (char)0, (char)0, (char)0, (char)0 };
+			current_bg =
+			{
+			(char) 0, (char) 0, (char) 0, (char) 0};
 			isUpdated = true;
 
 			std::string contents = "";
@@ -167,30 +185,42 @@ extern "C" {
 			contents += "\"command_data\": {";
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 		}
 
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Update()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Update ()
 	{
 		if (isInitialized && isUpdated)
 		{
-			unsigned char redValue = (unsigned char)((int)(current_bg.red) * ((int)(current_bg.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(current_bg.green) * ((int)(current_bg.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(current_bg.blue) * ((int)(current_bg.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (current_bg.red) *
+								 ((int) (current_bg.brightness) / 255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (current_bg.green) *
+								 ((int) (current_bg.brightness) / 255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (current_bg.blue) *
+								 ((int) (current_bg.brightness) / 255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_Update\",";
 			contents += "\"command_data\": {";
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue);
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents += "\"blue_start\": " + std::to_string ((int) blueValue);
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 
 			isUpdated = false;
 		}
@@ -198,13 +228,15 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_UpdateDefault()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_UpdateDefault ()
 	{
 		// Not supported
 		return LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumDevices(unsigned int* const numDevices)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetNumDevices (unsigned int *const numDevices)
 	{
 		if (isInitialized)
 		{
@@ -214,7 +246,7 @@ extern "C" {
 			contents += "\"command_data\": {";
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 
 			*numDevices = 1;
 		}
@@ -224,7 +256,10 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetDeviceDescription(const unsigned int devIndex, char* const devDesc, const unsigned int devDescSize, unsigned char* const devType)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetDeviceDescription (const unsigned int devIndex, char *const devDesc,
+							  const unsigned int devDescSize,
+							  unsigned char *const devType)
 	{
 		if (isInitialized)
 		{
@@ -234,23 +269,25 @@ extern "C" {
 			contents += "\"command_data\": {";
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 
 			if (devIndex >= 1)
 				return LFX_ERROR_NODEVS;
 
-			if (device_name.length() > devDescSize)
+			if (device_name.length () > devDescSize)
 				return LFX_ERROR_BUFFSIZE;
 
-			sprintf_s(devDesc, devDescSize, device_name.c_str());
+			sprintf_s (devDesc, devDescSize, device_name.c_str ());
 
-			*devType = 6; //Keyboard
+			*devType = 6;		//Keyboard
 		}
 
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumLights(const unsigned int devIndex, unsigned int* const numLights)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetNumLights (const unsigned int devIndex,
+					  unsigned int *const numLights)
 	{
 		if (isInitialized)
 		{
@@ -260,7 +297,7 @@ extern "C" {
 			contents += "\"command_data\": {";
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 
 			if (devIndex >= 1)
 				return LFX_ERROR_NODEVS;
@@ -268,11 +305,14 @@ extern "C" {
 			*numLights = device_lights_num;
 		}
 
-
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightDescription(const unsigned int devIndex, const unsigned int lightIndex, char* const lightDesc, const unsigned int lightDescSize)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetLightDescription (const unsigned int devIndex,
+							 const unsigned int lightIndex,
+							 char *const lightDesc,
+							 const unsigned int lightDescSize)
 	{
 		if (isInitialized)
 		{
@@ -282,7 +322,7 @@ extern "C" {
 			contents += "\"command_data\": {";
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 
 			if (devIndex >= 1)
 				return LFX_ERROR_NODEVS;
@@ -290,16 +330,19 @@ extern "C" {
 			if (lightIndex >= 1)
 				return LFX_ERROR_NOLIGHTS;
 
-			if (device_lights_name.length() > lightDescSize)
+			if (device_lights_name.length () > lightDescSize)
 				return LFX_ERROR_BUFFSIZE;
 
-			sprintf_s(lightDesc, lightDescSize, device_lights_name.c_str());
+			sprintf_s (lightDesc, lightDescSize, device_lights_name.c_str ());
 		}
 
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightLocation(const unsigned int devIndex, const unsigned int lightIndex, PLFX_POSITION const lightLoc)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetLightLocation (const unsigned int devIndex,
+						  const unsigned int lightIndex,
+						  PLFX_POSITION const lightLoc)
 	{
 		if (isInitialized)
 		{
@@ -309,7 +352,7 @@ extern "C" {
 			contents += "\"command_data\": {";
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 
 			if (devIndex >= 1)
 				return LFX_ERROR_NODEVS;
@@ -317,7 +360,8 @@ extern "C" {
 			if (lightIndex >= 1)
 				return LFX_ERROR_NOLIGHTS;
 
-			_LFX_POSITION newpos = { 0, (char)lightIndex , 0 };
+			_LFX_POSITION
+			newpos = { 0, (char) lightIndex, 0 };
 
 			*lightLoc = newpos;
 		}
@@ -325,7 +369,10 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightColor(const unsigned int devIndex, const unsigned int lightIndex, PLFX_COLOR const lightCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetLightColor (const unsigned int devIndex,
+					   const unsigned int lightIndex,
+					   PLFX_COLOR const lightCol)
 	{
 		if (isInitialized)
 		{
@@ -335,7 +382,7 @@ extern "C" {
 			contents += "\"command_data\": {";
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 
 			if (devIndex >= 1)
 				return LFX_ERROR_NODEVS;
@@ -349,7 +396,10 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightColor(const unsigned int devIndex, const unsigned int lightIndex, const PLFX_COLOR lightCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_SetLightColor (const unsigned int devIndex,
+					   const unsigned int lightIndex,
+					   const PLFX_COLOR lightCol)
 	{
 		if (isInitialized)
 		{
@@ -359,7 +409,7 @@ extern "C" {
 			contents += "\"command_data\": {";
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 
 			if (devIndex >= 1)
 				return LFX_ERROR_NODEVS;
@@ -375,34 +425,48 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Light(const unsigned int locationMask, const unsigned int lightCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Light (const unsigned int locationMask, const unsigned int lightCol)
 	{
 		//Not supported
 		if (isInitialized)
 		{
-			LFX_COLOR lfx_color;
+			LFX_COLOR
+				lfx_color;
 			lfx_color.brightness = (lightCol >> 24) & 0xFF;
 			lfx_color.red = (lightCol >> 16) & 0xFF;
 			lfx_color.green = (lightCol >> 8) & 0xFF;
 			lfx_color.blue = lightCol & 0xFF;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color.red) * ((int)(lfx_color.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color.green) * ((int)(lfx_color.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color.blue) * ((int)(lfx_color.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color.red) *
+								 ((int) (lfx_color.brightness) / 255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color.green) *
+								 ((int) (lfx_color.brightness) / 255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color.blue) *
+								 ((int) (lfx_color.brightness) / 255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_Light\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"locationMask\": \"" + std::to_string(locationMask) + "\",";
+			contents +=
+				"\"locationMask\": \"" + std::to_string (locationMask) + "\",";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue);
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents += "\"blue_start\": " + std::to_string ((int) blueValue);
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 
 			current_bg = lfx_color;
 			isUpdated = true;
@@ -411,7 +475,11 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColor(const unsigned int devIndex, const unsigned int lightIndex, const unsigned int actionType, const PLFX_COLOR primaryCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_SetLightActionColor (const unsigned int devIndex,
+							 const unsigned int lightIndex,
+							 const unsigned int actionType,
+							 const PLFX_COLOR primaryCol)
 	{
 		if (!isInitialized)
 			return LFX_ERROR_NOINIT;
@@ -425,27 +493,45 @@ extern "C" {
 		if (isInitialized)
 		{
 			//Primary Color
-			LFX_COLOR lfx_color_primary;
+			LFX_COLOR
+				lfx_color_primary;
 			lfx_color_primary.brightness = (*primaryCol).brightness;
 			lfx_color_primary.red = (*primaryCol).red;
 			lfx_color_primary.green = (*primaryCol).green;
 			lfx_color_primary.blue = (*primaryCol).blue;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color_primary.red) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color_primary.green) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color_primary.blue) * ((int)(lfx_color_primary.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color_primary.red) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color_primary.green) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color_primary.blue) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_SetLightActionColor\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-			contents += "\"duration\": " + std::to_string((int)action_timing) + ',';
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents +=
+				"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+			contents +=
+				"\"duration\": " + std::to_string ((int) action_timing) + ',';
 
-			switch (actionType) {
+			switch (actionType)
+			{
 			case LFX_ACTION_MORPH:
 				contents += "\"effect_type\": \"LFX_ACTION_MORPH\"";
 				break;
@@ -462,13 +548,18 @@ extern "C" {
 
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 		}
 
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColorEx(const unsigned int devIndex, const unsigned int lightIndex, const unsigned int actionType, const PLFX_COLOR primaryCol, const PLFX_COLOR secondaryCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_SetLightActionColorEx (const unsigned int devIndex,
+							   const unsigned int lightIndex,
+							   const unsigned int actionType,
+							   const PLFX_COLOR primaryCol,
+							   const PLFX_COLOR secondaryCol)
 	{
 		if (!isInitialized)
 			return LFX_ERROR_NOINIT;
@@ -482,41 +573,76 @@ extern "C" {
 		if (isInitialized)
 		{
 			//Primary Color
-			LFX_COLOR lfx_color_primary;
+			LFX_COLOR
+				lfx_color_primary;
 			lfx_color_primary.brightness = (*primaryCol).brightness;
 			lfx_color_primary.red = (*primaryCol).red;
 			lfx_color_primary.green = (*primaryCol).green;
 			lfx_color_primary.blue = (*primaryCol).blue;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color_primary.red) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color_primary.green) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color_primary.blue) * ((int)(lfx_color_primary.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color_primary.red) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color_primary.green) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color_primary.blue) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
 
 			//Secondary Color
-			LFX_COLOR lfx_color_secondary;
+			LFX_COLOR
+				lfx_color_secondary;
 			lfx_color_secondary.brightness = (*secondaryCol).brightness;
 			lfx_color_secondary.red = (*secondaryCol).red;
 			lfx_color_secondary.green = (*secondaryCol).green;
 			lfx_color_secondary.blue = (*secondaryCol).blue;
 
-			unsigned char redValue_end = (unsigned char)((int)(lfx_color_secondary.red) * ((int)(lfx_color_secondary.brightness) / 255.0f));
-			unsigned char greenValue_end = (unsigned char)((int)(lfx_color_secondary.green) * ((int)(lfx_color_secondary.brightness) / 255.0f));
-			unsigned char blueValue_end = (unsigned char)((int)(lfx_color_secondary.blue) * ((int)(lfx_color_secondary.brightness) / 255.0f));
+			unsigned char
+				redValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.red) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.green) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.blue) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_SetLightActionColorEx\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-			contents += "\"red_end\": " + std::to_string((int)redValue_end) + ',';
-			contents += "\"green_end\": " + std::to_string((int)greenValue_end) + ',';
-			contents += "\"blue_end\": " + std::to_string((int)blueValue_end) + ',';
-			contents += "\"duration\": " + std::to_string((int)action_timing) + ',';
-
-			switch (actionType) {
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents +=
+				"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+			contents +=
+				"\"red_end\": " + std::to_string ((int) redValue_end) + ',';
+			contents +=
+				"\"green_end\": " + std::to_string ((int) greenValue_end) +
+				',';
+			contents +=
+				"\"blue_end\": " + std::to_string ((int) blueValue_end) + ',';
+			contents +=
+				"\"duration\": " + std::to_string ((int) action_timing) + ',';
+
+			switch (actionType)
+			{
 			case LFX_ACTION_MORPH:
 				contents += "\"effect_type\": \"LFX_ACTION_MORPH\"";
 				break;
@@ -533,13 +659,16 @@ extern "C" {
 
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 		}
 
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColor(const unsigned int locationMask, const unsigned int actionType, const unsigned int primaryCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_ActionColor (const unsigned int locationMask,
+					 const unsigned int actionType,
+					 const unsigned int primaryCol)
 	{
 		if (!isInitialized)
 			return LFX_ERROR_NOINIT;
@@ -547,27 +676,45 @@ extern "C" {
 		if (isInitialized)
 		{
 			//Primary Color
-			LFX_COLOR lfx_color_primary;
+			LFX_COLOR
+				lfx_color_primary;
 			lfx_color_primary.brightness = (primaryCol >> 24) & 0xFF;
 			lfx_color_primary.red = (primaryCol >> 16) & 0xFF;
 			lfx_color_primary.green = (primaryCol >> 8) & 0xFF;
 			lfx_color_primary.blue = primaryCol & 0xFF;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color_primary.red) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color_primary.green) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color_primary.blue) * ((int)(lfx_color_primary.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color_primary.red) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color_primary.green) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color_primary.blue) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_ActionColor\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-			contents += "\"duration\": " + std::to_string((int)action_timing) + ',';
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents +=
+				"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+			contents +=
+				"\"duration\": " + std::to_string ((int) action_timing) + ',';
 
-			switch (actionType) {
+			switch (actionType)
+			{
 			case LFX_ACTION_MORPH:
 				contents += "\"effect_type\": \"LFX_ACTION_MORPH\"";
 				break;
@@ -584,13 +731,17 @@ extern "C" {
 
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 		}
 
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColorEx(const unsigned int locationMask, const unsigned int actionType, const unsigned int primaryCol, const unsigned int secondaryCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_ActionColorEx (const unsigned int locationMask,
+					   const unsigned int actionType,
+					   const unsigned int primaryCol,
+					   const unsigned int secondaryCol)
 	{
 		if (!isInitialized)
 			return LFX_ERROR_NOINIT;
@@ -598,41 +749,76 @@ extern "C" {
 		if (isInitialized)
 		{
 			//Primary Color
-			LFX_COLOR lfx_color_primary;
+			LFX_COLOR
+				lfx_color_primary;
 			lfx_color_primary.brightness = (primaryCol >> 24) & 0xFF;
 			lfx_color_primary.red = (primaryCol >> 16) & 0xFF;
 			lfx_color_primary.green = (primaryCol >> 8) & 0xFF;
 			lfx_color_primary.blue = primaryCol & 0xFF;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color_primary.red) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color_primary.green) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color_primary.blue) * ((int)(lfx_color_primary.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color_primary.red) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color_primary.green) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color_primary.blue) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
 
 			//Secondary Color
-			LFX_COLOR lfx_color_secondary;
+			LFX_COLOR
+				lfx_color_secondary;
 			lfx_color_secondary.brightness = (secondaryCol >> 24) & 0xFF;
 			lfx_color_secondary.red = (secondaryCol >> 16) & 0xFF;
 			lfx_color_secondary.green = (secondaryCol >> 8) & 0xFF;
 			lfx_color_secondary.blue = secondaryCol & 0xFF;
 
-			unsigned char redValue_end = (unsigned char)((int)(lfx_color_secondary.red) * ((int)(lfx_color_secondary.brightness) / 255.0f));
-			unsigned char greenValue_end = (unsigned char)((int)(lfx_color_secondary.green) * ((int)(lfx_color_secondary.brightness) / 255.0f));
-			unsigned char blueValue_end = (unsigned char)((int)(lfx_color_secondary.blue) * ((int)(lfx_color_secondary.brightness) / 255.0f));
+			unsigned char
+				redValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.red) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.green) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.blue) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_ActionColorEx\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-			contents += "\"red_end\": " + std::to_string((int)redValue_end) + ',';
-			contents += "\"green_end\": " + std::to_string((int)greenValue_end) + ',';
-			contents += "\"blue_end\": " + std::to_string((int)blueValue_end) + ',';
-			contents += "\"duration\": " + std::to_string((int)action_timing) + ',';
-
-			switch (actionType) {
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents +=
+				"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+			contents +=
+				"\"red_end\": " + std::to_string ((int) redValue_end) + ',';
+			contents +=
+				"\"green_end\": " + std::to_string ((int) greenValue_end) +
+				',';
+			contents +=
+				"\"blue_end\": " + std::to_string ((int) blueValue_end) + ',';
+			contents +=
+				"\"duration\": " + std::to_string ((int) action_timing) + ',';
+
+			switch (actionType)
+			{
 			case LFX_ACTION_MORPH:
 				contents += "\"effect_type\": \"LFX_ACTION_MORPH\"";
 				break;
@@ -649,25 +835,26 @@ extern "C" {
 
 			contents += '}';
 
-			WriteToPipe(contents);
+			WriteToPipe (contents);
 		}
 
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetTiming(const int newTiming)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_SetTiming (const int newTiming)
 	{
 		action_timing = newTiming;
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetVersion(char* const version, const unsigned int versionSize)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetVersion (char *const version, const unsigned int versionSize)
 	{
-		sprintf_s(version, versionSize, "2.2.0.0");
+		sprintf_s (version, versionSize, "2.2.0.0");
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
 #ifdef __cplusplus
 }
 #endif
-
diff --git a/Aurora-LightFXWrapper/stdafx.h b/Aurora-LightFXWrapper/stdafx.h
index f3a0737..8e634bc 100644
--- a/Aurora-LightFXWrapper/stdafx.h
+++ b/Aurora-LightFXWrapper/stdafx.h
@@ -7,10 +7,8 @@
 
 #include "targetver.h"
 
-#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers
+#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
 // Windows Header Files:
 #include <windows.h>
 
-
-
 // TODO: reference additional headers your program requires here
diff --git a/Aurora-LogiLEDWrapper/Aurora-LogiLEDWrapper.cpp b/Aurora-LogiLEDWrapper/Aurora-LogiLEDWrapper.cpp
index 2f27ae6..2913836 100644
--- a/Aurora-LogiLEDWrapper/Aurora-LogiLEDWrapper.cpp
+++ b/Aurora-LogiLEDWrapper/Aurora-LogiLEDWrapper.cpp
@@ -2,5 +2,3 @@
 //
 
 #include "stdafx.h"
-
-
diff --git a/Aurora-LogiLEDWrapper/LogitechLEDLib.h b/Aurora-LogiLEDWrapper/LogitechLEDLib.h
index 5e2a4d7..cd6dc3f 100644
--- a/Aurora-LogiLEDWrapper/LogitechLEDLib.h
+++ b/Aurora-LogiLEDWrapper/LogitechLEDLib.h
@@ -25,11 +25,8 @@
 
 #define LOGI_DEVICETYPE_ALL (LOGI_DEVICETYPE_MONOCHROME | LOGI_DEVICETYPE_RGB | LOGI_DEVICETYPE_PERKEY_RGB)
 
-
-namespace LogiLed
-{
-	typedef enum
-	{
+namespace LogiLed {
+	typedef enum {
 		ESC = 0x01,
 		F1 = 0x3b,
 		F2 = 0x3c,
@@ -135,10 +132,9 @@ namespace LogiLed
 		NUM_ZERO = 0x52,
 		NUM_PERIOD = 0x53,
 
-	}KeyName;
+	} KeyName;
 
-	typedef enum
-	{
+	typedef enum {
 		UNKNOWN = -1,
 		BITLOC_ESC = 0,
 		BITLOC_F1 = 4,
@@ -218,7 +214,7 @@ namespace LogiLed
 		BITLOC_L = 288,
 		BITLOC_SEMICOLON = 292,
 		BITLOC_APOSTROPHE = 296,
-		BITLOC_HASHTAG = 300,//300
+		BITLOC_HASHTAG = 300,	//300
 		BITLOC_ENTER = 304,
 		//308
 		//312
@@ -271,5 +267,5 @@ namespace LogiLed
 		BITLOC_NUM_ZERO = 492,
 		BITLOC_NUM_PERIOD = 496,
 		//500
-	}Logitech_keyboardBitmapKeys;
+	} Logitech_keyboardBitmapKeys;
 }
diff --git a/Aurora-LogiLEDWrapper/dllmain.cpp b/Aurora-LogiLEDWrapper/dllmain.cpp
index 5f719bc..bf20267 100644
--- a/Aurora-LogiLEDWrapper/dllmain.cpp
+++ b/Aurora-LogiLEDWrapper/dllmain.cpp
@@ -7,7 +7,7 @@
 #include <iomanip>
 #include <windows.h>
 
-#define PIPE_NAME L"\\\\.\\pipe\\Aurora\\server" 
+#define PIPE_NAME L"\\\\.\\pipe\\Aurora\\server"
 
 HANDLE hPipe;
 static bool isInitialized = false;
@@ -17,12 +17,12 @@ static unsigned char current_bg[3];
 
 static int current_device = LOGI_DEVICETYPE_ALL;
 
-static std::string program_name;
+static
+	std::string
+	program_name;
 
-BOOL WINAPI DllMain(HMODULE hModule,
-	DWORD  ul_reason_for_call,
-	LPVOID lpReserved
-	)
+BOOL WINAPI
+DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
 {
 	switch (ul_reason_for_call)
 	{
@@ -35,228 +35,230 @@ BOOL WINAPI DllMain(HMODULE hModule,
 	return TRUE;
 }
 
-LogiLed::Logitech_keyboardBitmapKeys ToLogitechBitmap(LogiLed::KeyName keyName)
+LogiLed::Logitech_keyboardBitmapKeys ToLogitechBitmap (LogiLed::
+													   KeyName keyName)
 {
 	switch (keyName)
 	{
-	case(LogiLed::KeyName::ESC) :
+	case (LogiLed::KeyName::ESC):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_ESC;
-	case(LogiLed::KeyName::F1) :
+	case (LogiLed::KeyName::F1):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1;
-	case(LogiLed::KeyName::F2) :
+	case (LogiLed::KeyName::F2):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2;
-	case(LogiLed::KeyName::F3) :
+	case (LogiLed::KeyName::F3):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3;
-	case(LogiLed::KeyName::F4) :
+	case (LogiLed::KeyName::F4):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4;
-	case(LogiLed::KeyName::F5) :
+	case (LogiLed::KeyName::F5):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5;
-	case(LogiLed::KeyName::F6) :
+	case (LogiLed::KeyName::F6):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6;
-	case(LogiLed::KeyName::F7) :
+	case (LogiLed::KeyName::F7):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7;
-	case(LogiLed::KeyName::F8) :
+	case (LogiLed::KeyName::F8):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8;
-	case(LogiLed::KeyName::F9) :
+	case (LogiLed::KeyName::F9):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9;
-	case(LogiLed::KeyName::F10) :
+	case (LogiLed::KeyName::F10):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10;
-	case(LogiLed::KeyName::F11) :
+	case (LogiLed::KeyName::F11):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11;
-	case(LogiLed::KeyName::F12) :
+	case (LogiLed::KeyName::F12):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12;
-	case(LogiLed::KeyName::PRINT_SCREEN) :
+	case (LogiLed::KeyName::PRINT_SCREEN):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_PRINT_SCREEN;
-	case(LogiLed::KeyName::SCROLL_LOCK) :
+	case (LogiLed::KeyName::SCROLL_LOCK):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_SCROLL_LOCK;
-	case(LogiLed::KeyName::PAUSE_BREAK) :
+	case (LogiLed::KeyName::PAUSE_BREAK):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_PAUSE_BREAK;
-	case(LogiLed::KeyName::TILDE) :
+	case (LogiLed::KeyName::TILDE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_TILDE;
-	case(LogiLed::KeyName::ONE) :
+	case (LogiLed::KeyName::ONE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_ONE;
-	case(LogiLed::KeyName::TWO) :
+	case (LogiLed::KeyName::TWO):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_TWO;
-	case(LogiLed::KeyName::THREE) :
+	case (LogiLed::KeyName::THREE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_THREE;
-	case(LogiLed::KeyName::FOUR) :
+	case (LogiLed::KeyName::FOUR):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_FOUR;
-	case(LogiLed::KeyName::FIVE) :
+	case (LogiLed::KeyName::FIVE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_FIVE;
-	case(LogiLed::KeyName::SIX) :
+	case (LogiLed::KeyName::SIX):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_SIX;
-	case(LogiLed::KeyName::SEVEN) :
+	case (LogiLed::KeyName::SEVEN):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_SEVEN;
-	case(LogiLed::KeyName::EIGHT) :
+	case (LogiLed::KeyName::EIGHT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_EIGHT;
-	case(LogiLed::KeyName::NINE) :
+	case (LogiLed::KeyName::NINE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NINE;
-	case(LogiLed::KeyName::ZERO) :
+	case (LogiLed::KeyName::ZERO):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_ZERO;
-	case(LogiLed::KeyName::MINUS) :
+	case (LogiLed::KeyName::MINUS):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_MINUS;
-	case(LogiLed::KeyName::EQUALS) :
+	case (LogiLed::KeyName::EQUALS):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_EQUALS;
-	case(LogiLed::KeyName::BACKSPACE) :
+	case (LogiLed::KeyName::BACKSPACE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_BACKSPACE;
-	case(LogiLed::KeyName::INSERT) :
+	case (LogiLed::KeyName::INSERT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_INSERT;
-	case(LogiLed::KeyName::HOME) :
+	case (LogiLed::KeyName::HOME):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_HOME;
-	case(LogiLed::KeyName::PAGE_UP) :
+	case (LogiLed::KeyName::PAGE_UP):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_PAGE_UP;
-	case(LogiLed::KeyName::NUM_LOCK) :
+	case (LogiLed::KeyName::NUM_LOCK):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_LOCK;
-	case(LogiLed::KeyName::NUM_SLASH) :
+	case (LogiLed::KeyName::NUM_SLASH):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_SLASH;
-	case(LogiLed::KeyName::NUM_ASTERISK) :
+	case (LogiLed::KeyName::NUM_ASTERISK):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_ASTERISK;
-	case(LogiLed::KeyName::NUM_MINUS) :
+	case (LogiLed::KeyName::NUM_MINUS):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_MINUS;
-	case(LogiLed::KeyName::TAB) :
+	case (LogiLed::KeyName::TAB):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_TAB;
-	case(LogiLed::KeyName::Q) :
+	case (LogiLed::KeyName::Q):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_Q;
-	case(LogiLed::KeyName::W) :
+	case (LogiLed::KeyName::W):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_W;
-	case(LogiLed::KeyName::E) :
+	case (LogiLed::KeyName::E):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_E;
-	case(LogiLed::KeyName::R) :
+	case (LogiLed::KeyName::R):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_R;
-	case(LogiLed::KeyName::T) :
+	case (LogiLed::KeyName::T):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_T;
-	case(LogiLed::KeyName::Y) :
+	case (LogiLed::KeyName::Y):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_Y;
-	case(LogiLed::KeyName::U) :
+	case (LogiLed::KeyName::U):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_U;
-	case(LogiLed::KeyName::I) :
+	case (LogiLed::KeyName::I):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_I;
-	case(LogiLed::KeyName::O) :
+	case (LogiLed::KeyName::O):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_O;
-	case(LogiLed::KeyName::P) :
+	case (LogiLed::KeyName::P):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_P;
-	case(LogiLed::KeyName::OPEN_BRACKET) :
+	case (LogiLed::KeyName::OPEN_BRACKET):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_OPEN_BRACKET;
-	case(LogiLed::KeyName::CLOSE_BRACKET) :
+	case (LogiLed::KeyName::CLOSE_BRACKET):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_CLOSE_BRACKET;
-	case(LogiLed::KeyName::BACKSLASH) :
+	case (LogiLed::KeyName::BACKSLASH):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_BACKSLASH;
-	case(LogiLed::KeyName::KEYBOARD_DELETE) :
+	case (LogiLed::KeyName::KEYBOARD_DELETE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_KEYBOARD_DELETE;
-	case(LogiLed::KeyName::END) :
+	case (LogiLed::KeyName::END):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_END;
-	case(LogiLed::KeyName::PAGE_DOWN) :
+	case (LogiLed::KeyName::PAGE_DOWN):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_PAGE_DOWN;
-	case(LogiLed::KeyName::NUM_SEVEN) :
+	case (LogiLed::KeyName::NUM_SEVEN):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_SEVEN;
-	case(LogiLed::KeyName::NUM_EIGHT) :
+	case (LogiLed::KeyName::NUM_EIGHT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_EIGHT;
-	case(LogiLed::KeyName::NUM_NINE) :
+	case (LogiLed::KeyName::NUM_NINE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_NINE;
-	case(LogiLed::KeyName::NUM_PLUS) :
+	case (LogiLed::KeyName::NUM_PLUS):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_PLUS;
-	case(LogiLed::KeyName::CAPS_LOCK) :
+	case (LogiLed::KeyName::CAPS_LOCK):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_CAPS_LOCK;
-	case(LogiLed::KeyName::A) :
+	case (LogiLed::KeyName::A):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_A;
-	case(LogiLed::KeyName::S) :
+	case (LogiLed::KeyName::S):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_S;
-	case(LogiLed::KeyName::D) :
+	case (LogiLed::KeyName::D):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_D;
-	case(LogiLed::KeyName::F) :
+	case (LogiLed::KeyName::F):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F;
-	case(LogiLed::KeyName::G) :
+	case (LogiLed::KeyName::G):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_G;
-	case(LogiLed::KeyName::H) :
+	case (LogiLed::KeyName::H):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_H;
-	case(LogiLed::KeyName::J) :
+	case (LogiLed::KeyName::J):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_J;
-	case(LogiLed::KeyName::K) :
+	case (LogiLed::KeyName::K):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_K;
-	case(LogiLed::KeyName::L) :
+	case (LogiLed::KeyName::L):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_L;
-	case(LogiLed::KeyName::SEMICOLON) :
+	case (LogiLed::KeyName::SEMICOLON):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_SEMICOLON;
-	case(LogiLed::KeyName::APOSTROPHE) :
+	case (LogiLed::KeyName::APOSTROPHE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_APOSTROPHE;
 		//case(LogiLed::KeyName::HASHTAG) :
-		//	return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_HASHTAG;
-	case(LogiLed::KeyName::ENTER) :
+		//  return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_HASHTAG;
+	case (LogiLed::KeyName::ENTER):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_ENTER;
-	case(LogiLed::KeyName::NUM_FOUR) :
+	case (LogiLed::KeyName::NUM_FOUR):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_FOUR;
-	case(LogiLed::KeyName::NUM_FIVE) :
+	case (LogiLed::KeyName::NUM_FIVE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_FIVE;
-	case(LogiLed::KeyName::NUM_SIX) :
+	case (LogiLed::KeyName::NUM_SIX):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_SIX;
-	case(LogiLed::KeyName::LEFT_SHIFT) :
+	case (LogiLed::KeyName::LEFT_SHIFT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_LEFT_SHIFT;
 		//case(LogiLed::KeyName::BACKSLASH_UK) :
-		//	return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_BACKSLASH_UK;
-	case(LogiLed::KeyName::Z) :
+		//  return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_BACKSLASH_UK;
+	case (LogiLed::KeyName::Z):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_Z;
-	case(LogiLed::KeyName::X) :
+	case (LogiLed::KeyName::X):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_X;
-	case(LogiLed::KeyName::C) :
+	case (LogiLed::KeyName::C):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_C;
-	case(LogiLed::KeyName::V) :
+	case (LogiLed::KeyName::V):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_V;
-	case(LogiLed::KeyName::B) :
+	case (LogiLed::KeyName::B):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_B;
-	case(LogiLed::KeyName::N) :
+	case (LogiLed::KeyName::N):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_N;
-	case(LogiLed::KeyName::M) :
+	case (LogiLed::KeyName::M):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_M;
-	case(LogiLed::KeyName::COMMA) :
+	case (LogiLed::KeyName::COMMA):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_COMMA;
-	case(LogiLed::KeyName::PERIOD) :
+	case (LogiLed::KeyName::PERIOD):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_PERIOD;
-	case(LogiLed::KeyName::FORWARD_SLASH) :
+	case (LogiLed::KeyName::FORWARD_SLASH):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_FORWARD_SLASH;
-	case(LogiLed::KeyName::RIGHT_SHIFT) :
+	case (LogiLed::KeyName::RIGHT_SHIFT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_RIGHT_SHIFT;
-	case(LogiLed::KeyName::ARROW_UP) :
+	case (LogiLed::KeyName::ARROW_UP):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_ARROW_UP;
-	case(LogiLed::KeyName::NUM_ONE) :
+	case (LogiLed::KeyName::NUM_ONE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_ONE;
-	case(LogiLed::KeyName::NUM_TWO) :
+	case (LogiLed::KeyName::NUM_TWO):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_TWO;
-	case(LogiLed::KeyName::NUM_THREE) :
+	case (LogiLed::KeyName::NUM_THREE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_THREE;
-	case(LogiLed::KeyName::NUM_ENTER) :
+	case (LogiLed::KeyName::NUM_ENTER):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_ENTER;
-	case(LogiLed::KeyName::LEFT_CONTROL) :
+	case (LogiLed::KeyName::LEFT_CONTROL):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_LEFT_CONTROL;
-	case(LogiLed::KeyName::LEFT_WINDOWS) :
+	case (LogiLed::KeyName::LEFT_WINDOWS):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_LEFT_WINDOWS;
-	case(LogiLed::KeyName::LEFT_ALT) :
+	case (LogiLed::KeyName::LEFT_ALT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_LEFT_ALT;
-	case(LogiLed::KeyName::SPACE) :
+	case (LogiLed::KeyName::SPACE):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_SPACE;
-	case(LogiLed::KeyName::RIGHT_ALT) :
+	case (LogiLed::KeyName::RIGHT_ALT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_RIGHT_ALT;
-	case(LogiLed::KeyName::RIGHT_WINDOWS) :
+	case (LogiLed::KeyName::RIGHT_WINDOWS):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_RIGHT_WINDOWS;
-	case(LogiLed::KeyName::APPLICATION_SELECT) :
+	case (LogiLed::KeyName::APPLICATION_SELECT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_APPLICATION_SELECT;
-	case(LogiLed::KeyName::RIGHT_CONTROL) :
+	case (LogiLed::KeyName::RIGHT_CONTROL):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_RIGHT_CONTROL;
-	case(LogiLed::KeyName::ARROW_LEFT) :
+	case (LogiLed::KeyName::ARROW_LEFT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_ARROW_LEFT;
-	case(LogiLed::KeyName::ARROW_DOWN) :
+	case (LogiLed::KeyName::ARROW_DOWN):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_ARROW_DOWN;
-	case(LogiLed::KeyName::ARROW_RIGHT) :
+	case (LogiLed::KeyName::ARROW_RIGHT):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_ARROW_RIGHT;
-	case(LogiLed::KeyName::NUM_ZERO) :
+	case (LogiLed::KeyName::NUM_ZERO):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_ZERO;
-	case(LogiLed::KeyName::NUM_PERIOD) :
+	case (LogiLed::KeyName::NUM_PERIOD):
 		return LogiLed::Logitech_keyboardBitmapKeys::BITLOC_NUM_PERIOD;
 	default:
 		return LogiLed::Logitech_keyboardBitmapKeys::UNKNOWN;
 	}
 }
 
-bool WriteToPipe(const std::string command_cargo)
+bool
+WriteToPipe (const std::string command_cargo)
 {
 	if (!isInitialized)
 		return false;
@@ -265,7 +267,8 @@ bool WriteToPipe(const std::string command_cargo)
 	std::string contents = "";
 
 	contents += '{';
-	contents += "\"provider\": {\"name\": \"" + program_name + "\", \"appid\": 0},";
+	contents +=
+		"\"provider\": {\"name\": \"" + program_name + "\", \"appid\": 0},";
 	contents += command_cargo;
 	contents += '}';
 	contents += "\r\n";
@@ -274,14 +277,13 @@ bool WriteToPipe(const std::string command_cargo)
 	{
 		//Try to restore handle
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
-			GENERIC_WRITE,  // write access 
-			0,              // no sharing 
-			NULL,           // default security attributes
-			OPEN_EXISTING,  // opens existing pipe 
-			0,              // default attributes 
-			NULL);          // no template file 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
+							GENERIC_WRITE,	// write access 
+							0,	// no sharing 
+							NULL,	// default security attributes
+							OPEN_EXISTING,	// opens existing pipe 
+							0,	// default attributes 
+							NULL);	// no template file 
 
 		if (INVALID_HANDLE_VALUE == hPipe)
 		{
@@ -291,19 +293,18 @@ bool WriteToPipe(const std::string command_cargo)
 
 	DWORD cbBytes;
 
-	const char* c_contents = contents.c_str();
-	int c_cotents_len = strlen(c_contents);
+	const char *c_contents = contents.c_str ();
+	int c_cotents_len = strlen (c_contents);
 
-	BOOL bResult = WriteFile(
-		hPipe,                // handle to pipe 
-		c_contents,             // buffer to write from 
-		c_cotents_len,   // number of bytes to write, include the NULL
-		&cbBytes,             // number of bytes written 
-		NULL);                // not overlapped I/O 
+	BOOL bResult = WriteFile (hPipe,	// handle to pipe 
+							  c_contents,	// buffer to write from 
+							  c_cotents_len,	// number of bytes to write, include the NULL
+							  &cbBytes,	// number of bytes written 
+							  NULL);	// not overlapped I/O 
 
 	if ((!bResult) || c_cotents_len != cbBytes)
 	{
-		CloseHandle(hPipe);
+		CloseHandle (hPipe);
 		return false;
 	}
 	else
@@ -314,26 +315,33 @@ bool WriteToPipe(const std::string command_cargo)
 	return false;
 }
 
-void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercentage, int custom_mode = 0)
+void
+_LogiLedSetLighting (int redPercentage, int greenPercentage,
+					 int bluePercentage, int custom_mode = 0)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
-
-	if (isInitialized && (current_device == LOGI_DEVICETYPE_ALL || current_device == LOGI_DEVICETYPE_PERKEY_RGB))
+	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
+
+	if (isInitialized
+		&& (current_device == LOGI_DEVICETYPE_ALL
+			|| current_device == LOGI_DEVICETYPE_PERKEY_RGB))
 	{
 		std::string contents = "";
 
-		if (program_name.compare("GTA5.exe") == 0)
+		if (program_name.compare ("GTA5.exe") == 0)
 		{
-			for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
+			for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE;
+				 colorset += 4)
 			{
 				current_bitmap[colorset] = blueValue;
 				current_bitmap[colorset + 1] = greenValue;
 				current_bitmap[colorset + 2] = redValue;
-				current_bitmap[colorset + 3] = (char)255;
+				current_bitmap[colorset + 3] = (char) 255;
 			}
-			
+
 			switch (custom_mode)
 			{
 			case 0xFFFB00:
@@ -341,137 +349,232 @@ void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercent
 			case 0xFFFBE4:
 			case 0xFFFBFF:
 				//F1
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 3] = (char) 255;
 				//F2
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 3] = (char) 255;
 				//F3
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 3] = (char) 255;
 				//F4
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 3] = (char) 255;
 				//F5
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 3] = (char) 255;
 				//F6
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 3] = (char) 255;
 				//F7
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 3] = (char) 255;
 				//F8
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 3] = (char) 255;
 				//F9
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 3] = (char) 255;
 				//F10
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 3] = (char) 255;
 				//F11
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 3] = (char) 255;
 				//F12
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 3] = (char) 255;
 				break;
 			case 0xFF0100:
 			case 0xFF0150:
 			case 0xFF01E4:
 			case 0xFF01FF:
 				//F1
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 3] = (char) 255;
 				//F2
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 3] = (char) 255;
 				//F3
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 3] = (char) 255;
 				//F4
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 3] = (char) 255;
 				//F5
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 3] = (char) 255;
 				//F6
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 3] = (char) 255;
 				//F7
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 3] = (char) 255;
 				//F8
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 3] = (char) 255;
 				//F9
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 3] = (char) 255;
 				//F10
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 3] = (char) 255;
 				//F11
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 3] = (char) 255;
 				//F12
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 3] = (char) 255;
 			}
 
-
 			contents += "\"bitmap\": [";
 			for (int bitm_pos = 0; bitm_pos < LOGI_LED_BITMAP_SIZE; bitm_pos++)
 			{
-				contents += std::to_string((short)current_bitmap[bitm_pos]);
+				contents += std::to_string ((short) current_bitmap[bitm_pos]);
 
 				if (bitm_pos + 1 < LOGI_LED_BITMAP_SIZE)
 					contents += ',';
@@ -482,9 +585,7 @@ void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercent
 		{
 
 			if (current_bg[0] == blueValue &&
-				current_bg[1] == greenValue &&
-				current_bg[2] == redValue
-				)
+				current_bg[1] == greenValue && current_bg[2] == redValue)
 			{
 				//No need to write on pipe, color did not change
 				return;
@@ -494,84 +595,101 @@ void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercent
 			current_bg[1] = greenValue;
 			current_bg[2] = redValue;
 
-			for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
+			for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE;
+				 colorset += 4)
 			{
 				current_bitmap[colorset] = blueValue;
 				current_bitmap[colorset + 1] = greenValue;
 				current_bitmap[colorset + 2] = redValue;
-				current_bitmap[colorset + 3] = (char)255;
+				current_bitmap[colorset + 3] = (char) 255;
 			}
 		}
 
 		contents += "\"command\": \"SetLighting\",";
 		contents += "\"command_data\": {";
-		contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-		contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-		contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
+		contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
+		contents +=
+			"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+		contents +=
+			"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
 
-		contents += "\"custom_mode\": " + std::to_string(custom_mode);
+		contents += "\"custom_mode\": " + std::to_string (custom_mode);
 
 		contents += '}';
 
-		WriteToPipe(contents);
+		WriteToPipe (contents);
 	}
 }
 
-void _LogiLedFlashLighting(int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+void
+_LogiLedFlashLighting (int redPercentage, int greenPercentage,
+					   int bluePercentage, int milliSecondsDuration,
+					   int milliSecondsInterval)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"FlashLighting\",";
 	contents += "\"command_data\": {";
 
-	contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-	contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-	contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-	contents += "\"duration\": " + std::to_string(milliSecondsDuration) + ',';
-	contents += "\"interval\": " + std::to_string(milliSecondsInterval);
+	contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
+	contents += "\"green_start\": " + std::to_string ((int) greenValue) + ',';
+	contents += "\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+	contents += "\"duration\": " + std::to_string (milliSecondsDuration) + ',';
+	contents += "\"interval\": " + std::to_string (milliSecondsInterval);
 
 	contents += '}';
 
-	WriteToPipe(contents);
+	WriteToPipe (contents);
 }
 
-void _LogiLedPulseLighting(int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+void
+_LogiLedPulseLighting (int redPercentage, int greenPercentage,
+					   int bluePercentage, int milliSecondsDuration,
+					   int milliSecondsInterval)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"PulseLighting\",";
 	contents += "\"command_data\": {";
 
-	contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-	contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-	contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-	contents += "\"duration\": " + std::to_string(milliSecondsDuration) + ',';
-	contents += "\"interval\": " + std::to_string(milliSecondsInterval);
+	contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
+	contents += "\"green_start\": " + std::to_string ((int) greenValue) + ',';
+	contents += "\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+	contents += "\"duration\": " + std::to_string (milliSecondsDuration) + ',';
+	contents += "\"interval\": " + std::to_string (milliSecondsInterval);
 
 	contents += '}';
 
-	WriteToPipe(contents);
+	WriteToPipe (contents);
 }
 
-void _LogiLedStopEffects()
+void
+_LogiLedStopEffects ()
 {
 	std::string contents = "";
 	contents += "\"command\": \"StopEffects\",";
 	contents += "\"command_data\": {";
 	contents += '}';
 
-	WriteToPipe(contents);
+	WriteToPipe (contents);
 }
 
-void _LogiLedSetLightingFromBitmap(unsigned char bitmap[])
+void
+_LogiLedSetLightingFromBitmap (unsigned char bitmap[])
 {
-	if (isInitialized && (current_device == LOGI_DEVICETYPE_ALL || current_device == LOGI_DEVICETYPE_PERKEY_RGB))
+	if (isInitialized
+		&& (current_device == LOGI_DEVICETYPE_ALL
+			|| current_device == LOGI_DEVICETYPE_PERKEY_RGB))
 	{
 		for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
 		{
@@ -588,235 +706,274 @@ void _LogiLedSetLightingFromBitmap(unsigned char bitmap[])
 		contents += "\"bitmap\": [";
 		for (int bitm_pos = 0; bitm_pos < LOGI_LED_BITMAP_SIZE; bitm_pos++)
 		{
-			contents += std::to_string((short)current_bitmap[bitm_pos]);
+			contents += std::to_string ((short) current_bitmap[bitm_pos]);
 
 			if (bitm_pos + 1 < LOGI_LED_BITMAP_SIZE)
 				contents += ',';
 		}
 		contents += "]";
 
-		WriteToPipe(contents);
+		WriteToPipe (contents);
 	}
 }
 
-void _LogiLedSetLightingForKeyWithScanCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+void
+_LogiLedSetLightingForKeyWithScanCode (int keyCode, int redPercentage,
+									   int greenPercentage, int bluePercentage)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"SetLightingForKeyWithScanCode\",";
 	contents += "\"command_data\": {";
 
-	contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-	contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-	contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-	contents += "\"key\": " + std::to_string(keyCode);
+	contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
+	contents += "\"green_start\": " + std::to_string ((int) greenValue) + ',';
+	contents += "\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+	contents += "\"key\": " + std::to_string (keyCode);
 
 	contents += '}';
 
 	//NOT IMPLEMENTED
 	/*
-	LogiLed::Logitech_keyboardBitmapKeys bit_location = ToLogitechBitmap(keyName);
-
-	if (bit_location != LogiLed::Logitech_keyboardBitmapKeys::UNKNOWN)
-	{
-	current_bitmap[(int)bit_location] = blueValue;
-	current_bitmap[(int)bit_location + 1] = greenValue;
-	current_bitmap[(int)bit_location + 2] = redValue;
-	current_bitmap[(int)bit_location + 3] = (char)255;
-
-	return WriteToPipe(current_bitmap, ss.str());
-	}
-	*/
-	WriteToPipe(contents);
+	   LogiLed::Logitech_keyboardBitmapKeys bit_location = ToLogitechBitmap(keyName);
+
+	   if (bit_location != LogiLed::Logitech_keyboardBitmapKeys::UNKNOWN)
+	   {
+	   current_bitmap[(int)bit_location] = blueValue;
+	   current_bitmap[(int)bit_location + 1] = greenValue;
+	   current_bitmap[(int)bit_location + 2] = redValue;
+	   current_bitmap[(int)bit_location + 3] = (char)255;
+
+	   return WriteToPipe(current_bitmap, ss.str());
+	   }
+	 */
+	WriteToPipe (contents);
 }
 
-void _LogiLedSetLightingForKeyWithHidCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+void
+_LogiLedSetLightingForKeyWithHidCode (int keyCode, int redPercentage,
+									  int greenPercentage, int bluePercentage)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"SetLightingForKeyWithHidCode\",";
 	contents += "\"command_data\": {";
 
-	contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-	contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-	contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-	contents += "\"key\": " + std::to_string(keyCode);
+	contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
+	contents += "\"green_start\": " + std::to_string ((int) greenValue) + ',';
+	contents += "\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+	contents += "\"key\": " + std::to_string (keyCode);
 
 	contents += '}';
 
 	//NOT IMPLEMENTED
 	/*
-	LogiLed::Logitech_keyboardBitmapKeys bit_location = ToLogitechBitmap(keyName);
-
-	if (bit_location != LogiLed::Logitech_keyboardBitmapKeys::UNKNOWN)
-	{
-	current_bitmap[(int)bit_location] = blueValue;
-	current_bitmap[(int)bit_location + 1] = greenValue;
-	current_bitmap[(int)bit_location + 2] = redValue;
-	current_bitmap[(int)bit_location + 3] = (char)255;
-
-	return WriteToPipe(current_bitmap, ss.str());
-	}
-	*/
-	WriteToPipe(contents);
+	   LogiLed::Logitech_keyboardBitmapKeys bit_location = ToLogitechBitmap(keyName);
+
+	   if (bit_location != LogiLed::Logitech_keyboardBitmapKeys::UNKNOWN)
+	   {
+	   current_bitmap[(int)bit_location] = blueValue;
+	   current_bitmap[(int)bit_location + 1] = greenValue;
+	   current_bitmap[(int)bit_location + 2] = redValue;
+	   current_bitmap[(int)bit_location + 3] = (char)255;
+
+	   return WriteToPipe(current_bitmap, ss.str());
+	   }
+	 */
+	WriteToPipe (contents);
 }
 
-void _LogiLedSetLightingForKeyWithQuartzCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+void
+_LogiLedSetLightingForKeyWithQuartzCode (int keyCode, int redPercentage,
+										 int greenPercentage,
+										 int bluePercentage)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"SetLightingForKeyWithQuartzCode\",";
 	contents += "\"command_data\": {";
 
-	contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-	contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-	contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-	contents += "\"key\": " + std::to_string(keyCode);
+	contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
+	contents += "\"green_start\": " + std::to_string ((int) greenValue) + ',';
+	contents += "\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+	contents += "\"key\": " + std::to_string (keyCode);
 
 	contents += '}';
 
 	//NOT IMPLEMENTED
 	/*
-	LogiLed::Logitech_keyboardBitmapKeys bit_location = ToLogitechBitmap(keyName);
-
-	if (bit_location != LogiLed::Logitech_keyboardBitmapKeys::UNKNOWN)
-	{
-	current_bitmap[(int)bit_location] = blueValue;
-	current_bitmap[(int)bit_location + 1] = greenValue;
-	current_bitmap[(int)bit_location + 2] = redValue;
-	current_bitmap[(int)bit_location + 3] = (char)255;
-
-	return WriteToPipe(current_bitmap, ss.str());
-	}
-	*/
-	WriteToPipe(contents);
+	   LogiLed::Logitech_keyboardBitmapKeys bit_location = ToLogitechBitmap(keyName);
+
+	   if (bit_location != LogiLed::Logitech_keyboardBitmapKeys::UNKNOWN)
+	   {
+	   current_bitmap[(int)bit_location] = blueValue;
+	   current_bitmap[(int)bit_location + 1] = greenValue;
+	   current_bitmap[(int)bit_location + 2] = redValue;
+	   current_bitmap[(int)bit_location + 3] = (char)255;
+
+	   return WriteToPipe(current_bitmap, ss.str());
+	   }
+	 */
+	WriteToPipe (contents);
 }
 
-void _LogiLedSetLightingForKeyWithKeyName(LogiLed::KeyName keyName, int redPercentage, int greenPercentage, int bluePercentage)
+void
+_LogiLedSetLightingForKeyWithKeyName (LogiLed::KeyName keyName,
+									  int redPercentage, int greenPercentage,
+									  int bluePercentage)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
-
-	LogiLed::Logitech_keyboardBitmapKeys bit_location = ToLogitechBitmap(keyName);
-
-	if (isInitialized && (current_device == LOGI_DEVICETYPE_ALL || current_device == LOGI_DEVICETYPE_PERKEY_RGB))
+	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
+
+	LogiLed::Logitech_keyboardBitmapKeys bit_location =
+		ToLogitechBitmap (keyName);
+
+	if (isInitialized
+		&& (current_device == LOGI_DEVICETYPE_ALL
+			|| current_device == LOGI_DEVICETYPE_PERKEY_RGB))
 	{
 		if (bit_location == LogiLed::Logitech_keyboardBitmapKeys::UNKNOWN ||
-			(
-				current_bitmap[(int)bit_location] == blueValue &&
-				current_bitmap[(int)bit_location + 1] == greenValue &&
-				current_bitmap[(int)bit_location + 2] == redValue
-				)
-			)
+			(current_bitmap[(int) bit_location] == blueValue &&
+			 current_bitmap[(int) bit_location + 1] == greenValue &&
+			 current_bitmap[(int) bit_location + 2] == redValue))
 		{
 			//No need to write on pipe, color did not change
 			return;
 		}
 
-		current_bitmap[(int)bit_location] = blueValue;
-		current_bitmap[(int)bit_location + 1] = greenValue;
-		current_bitmap[(int)bit_location + 2] = redValue;
+		current_bitmap[(int) bit_location] = blueValue;
+		current_bitmap[(int) bit_location + 1] = greenValue;
+		current_bitmap[(int) bit_location + 2] = redValue;
 
 		std::string contents = "";
 		contents += "\"command\": \"SetLightingForKeyWithKeyName\",";
 		contents += "\"command_data\": {";
 
-		contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-		contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-		contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-		contents += "\"key\": " + std::to_string(keyName);
+		contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
+		contents +=
+			"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+		contents +=
+			"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+		contents += "\"key\": " + std::to_string (keyName);
 
 		contents += "}";
 
-		WriteToPipe(contents);
+		WriteToPipe (contents);
 	}
 }
 
-void _LogiLedFlashSingleKey(LogiLed::KeyName keyName, int redPercentage, int greenPercentage, int bluePercentage, int msDuration, int msInterval)
+void
+_LogiLedFlashSingleKey (LogiLed::KeyName keyName, int redPercentage,
+						int greenPercentage, int bluePercentage,
+						int msDuration, int msInterval)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"FlashSingleKey\",";
 	contents += "\"command_data\": {";
 
-	contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-	contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-	contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-	contents += "\"duration\": " + std::to_string(msDuration) + ',';
-	contents += "\"interval\": " + std::to_string(msInterval) + ',';
-	contents += "\"key\": " + std::to_string(keyName);
+	contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
+	contents += "\"green_start\": " + std::to_string ((int) greenValue) + ',';
+	contents += "\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+	contents += "\"duration\": " + std::to_string (msDuration) + ',';
+	contents += "\"interval\": " + std::to_string (msInterval) + ',';
+	contents += "\"key\": " + std::to_string (keyName);
 
 	contents += '}';
 
-	WriteToPipe(contents);
+	WriteToPipe (contents);
 }
 
-void _LogiLedPulseSingleKey(LogiLed::KeyName keyName, int startRedPercentage, int startGreenPercentage, int startBluePercentage, int finishRedPercentage, int finishGreenPercentage, int finishBluePercentage, int msDuration, bool isInfinite)
+void
+_LogiLedPulseSingleKey (LogiLed::KeyName keyName, int startRedPercentage,
+						int startGreenPercentage, int startBluePercentage,
+						int finishRedPercentage, int finishGreenPercentage,
+						int finishBluePercentage, int msDuration,
+						bool isInfinite)
 {
-	unsigned char redValue = (unsigned char)((startRedPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((startGreenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((startBluePercentage / 100.0f) * 255);
-	unsigned char redValue_end = (unsigned char)((finishRedPercentage / 100.0f) * 255);
-	unsigned char greenValue_end = (unsigned char)((finishGreenPercentage / 100.0f) * 255);
-	unsigned char blueValue_end = (unsigned char)((finishBluePercentage / 100.0f) * 255);
+	unsigned char redValue =
+		(unsigned char) ((startRedPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((startGreenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((startBluePercentage / 100.0f) * 255);
+	unsigned char redValue_end =
+		(unsigned char) ((finishRedPercentage / 100.0f) * 255);
+	unsigned char greenValue_end =
+		(unsigned char) ((finishGreenPercentage / 100.0f) * 255);
+	unsigned char blueValue_end =
+		(unsigned char) ((finishBluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"PulseSingleKey\",";
 	contents += "\"command_data\": {";
 
-	contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-	contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-	contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-	contents += "\"red_end\": " + std::to_string((int)redValue_end) + ',';
-	contents += "\"green_end\": " + std::to_string((int)greenValue_end) + ',';
-	contents += "\"blue_end\": " + std::to_string((int)blueValue_end) + ',';
-	contents += "\"duration\": " + std::to_string(msDuration) + ',';
+	contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
+	contents += "\"green_start\": " + std::to_string ((int) greenValue) + ',';
+	contents += "\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+	contents += "\"red_end\": " + std::to_string ((int) redValue_end) + ',';
+	contents +=
+		"\"green_end\": " + std::to_string ((int) greenValue_end) + ',';
+	contents += "\"blue_end\": " + std::to_string ((int) blueValue_end) + ',';
+	contents += "\"duration\": " + std::to_string (msDuration) + ',';
 	if (isInfinite)
 		contents += "\"interval\": 0,";
 	else
 		contents += "\"interval\": -1,";
-	contents += "\"key\": " + std::to_string(keyName);
+	contents += "\"key\": " + std::to_string (keyName);
 
 	contents += '}';
 
-	WriteToPipe(contents);
+	WriteToPipe (contents);
 }
 
-void _LogiLedStopEffectsOnKey(LogiLed::KeyName keyName)
+void
+_LogiLedStopEffectsOnKey (LogiLed::KeyName keyName)
 {
 	std::string contents = "";
 	contents += "\"command\": \"StopEffectsOnKey\",";
 	contents += "\"command_data\": {";
-	contents += "\"key\": " + std::to_string(keyName);
+	contents += "\"key\": " + std::to_string (keyName);
 	contents += '}';
 
-	WriteToPipe(contents);
+	WriteToPipe (contents);
 }
 
-bool LogiLedInit()
+bool
+LogiLedInit ()
 {
 	if (!isInitialized)
 	{
 		//Get Application name
 		CHAR pBuf[MAX_PATH];
-		int bytes = GetModuleFileNameA(NULL, pBuf, MAX_PATH);
+		int bytes = GetModuleFileNameA (NULL, pBuf, MAX_PATH);
 		std::string filepath = pBuf;
 
 		int fn_beginning = 0;
-		for (int chr_pos = strlen(pBuf) - 1; chr_pos > -1; chr_pos--)
+		for (int chr_pos = strlen (pBuf) - 1; chr_pos > -1; chr_pos--)
 		{
 			if (pBuf[chr_pos] == '\\')
 			{
@@ -825,17 +982,16 @@ bool LogiLedInit()
 			}
 		}
 
-		program_name = filepath.substr(fn_beginning);
+		program_name = filepath.substr (fn_beginning);
 
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
-			GENERIC_WRITE,  // write access 
-			0,              // no sharing 
-			NULL,           // default security attributes
-			OPEN_EXISTING,  // opens existing pipe 
-			0,              // default attributes 
-			NULL);          // no template file 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
+							GENERIC_WRITE,	// write access 
+							0,	// no sharing 
+							NULL,	// default security attributes
+							OPEN_EXISTING,	// opens existing pipe 
+							0,	// default attributes 
+							NULL);	// no template file 
 
 		if (INVALID_HANDLE_VALUE == hPipe)
 		{
@@ -848,123 +1004,169 @@ bool LogiLedInit()
 	return true;
 }
 
-bool LogiLedSetTargetDevice(int targetDevice)
+bool
+LogiLedSetTargetDevice (int targetDevice)
 {
 	current_device = targetDevice;
-	
+
 	return isInitialized;
 }
 
-bool LogiLedSaveCurrentLighting()
+bool
+LogiLedSaveCurrentLighting ()
 {
 	return isInitialized;
 }
 
-bool LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercentage, int custom_mode = 0)
+bool
+LogiLedSetLighting (int redPercentage, int greenPercentage, int bluePercentage,
+					int custom_mode = 0)
 {
-	_LogiLedSetLighting(redPercentage, greenPercentage, bluePercentage, custom_mode);
+	_LogiLedSetLighting (redPercentage, greenPercentage, bluePercentage,
+						 custom_mode);
 
 	return isInitialized;
 }
 
-bool LogiLedRestoreLighting()
+bool
+LogiLedRestoreLighting ()
 {
 	return isInitialized;
 }
 
-bool LogiLedFlashLighting(int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+bool
+LogiLedFlashLighting (int redPercentage, int greenPercentage,
+					  int bluePercentage, int milliSecondsDuration,
+					  int milliSecondsInterval)
 {
-	_LogiLedFlashLighting(redPercentage, greenPercentage, bluePercentage, milliSecondsDuration, milliSecondsInterval);
+	_LogiLedFlashLighting (redPercentage, greenPercentage, bluePercentage,
+						   milliSecondsDuration, milliSecondsInterval);
 
 	return isInitialized;
 }
 
-bool LogiLedPulseLighting(int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+bool
+LogiLedPulseLighting (int redPercentage, int greenPercentage,
+					  int bluePercentage, int milliSecondsDuration,
+					  int milliSecondsInterval)
 {
-	_LogiLedPulseLighting(redPercentage, greenPercentage, bluePercentage, milliSecondsDuration, milliSecondsInterval);
+	_LogiLedPulseLighting (redPercentage, greenPercentage, bluePercentage,
+						   milliSecondsDuration, milliSecondsInterval);
 
 	return isInitialized;
 }
 
-bool LogiLedStopEffects()
+bool
+LogiLedStopEffects ()
 {
-	_LogiLedStopEffects();
+	_LogiLedStopEffects ();
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingFromBitmap(unsigned char bitmap[])
+bool
+LogiLedSetLightingFromBitmap (unsigned char bitmap[])
 {
-	_LogiLedSetLightingFromBitmap(bitmap);
+	_LogiLedSetLightingFromBitmap (bitmap);
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingForKeyWithScanCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+bool
+LogiLedSetLightingForKeyWithScanCode (int keyCode, int redPercentage,
+									  int greenPercentage, int bluePercentage)
 {
-	_LogiLedSetLightingForKeyWithScanCode(keyCode, redPercentage, greenPercentage, bluePercentage);
+	_LogiLedSetLightingForKeyWithScanCode (keyCode, redPercentage,
+										   greenPercentage, bluePercentage);
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingForKeyWithHidCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+bool
+LogiLedSetLightingForKeyWithHidCode (int keyCode, int redPercentage,
+									 int greenPercentage, int bluePercentage)
 {
-	_LogiLedSetLightingForKeyWithHidCode(keyCode, redPercentage, greenPercentage, bluePercentage);
+	_LogiLedSetLightingForKeyWithHidCode (keyCode, redPercentage,
+										  greenPercentage, bluePercentage);
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingForKeyWithQuartzCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+bool
+LogiLedSetLightingForKeyWithQuartzCode (int keyCode, int redPercentage,
+										int greenPercentage,
+										int bluePercentage)
 {
-	_LogiLedSetLightingForKeyWithQuartzCode(keyCode, redPercentage, greenPercentage, bluePercentage);
+	_LogiLedSetLightingForKeyWithQuartzCode (keyCode, redPercentage,
+											 greenPercentage, bluePercentage);
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingForKeyWithKeyName(LogiLed::KeyName keyName, int redPercentage, int greenPercentage, int bluePercentage)
+bool
+LogiLedSetLightingForKeyWithKeyName (LogiLed::KeyName keyName,
+									 int redPercentage, int greenPercentage,
+									 int bluePercentage)
 {
-	_LogiLedSetLightingForKeyWithKeyName(keyName, redPercentage, greenPercentage, bluePercentage);
+	_LogiLedSetLightingForKeyWithKeyName (keyName, redPercentage,
+										  greenPercentage, bluePercentage);
 
 	return isInitialized;
 }
 
-bool LogiLedSaveLightingForKey(LogiLed::KeyName keyName)
+bool
+LogiLedSaveLightingForKey (LogiLed::KeyName keyName)
 {
 	return isInitialized;
 }
 
-bool LogiLedRestoreLightingForKey(LogiLed::KeyName keyName)
+bool
+LogiLedRestoreLightingForKey (LogiLed::KeyName keyName)
 {
 	return isInitialized;
 }
 
-bool LogiLedFlashSingleKey(LogiLed::KeyName keyName, int redPercentage, int greenPercentage, int bluePercentage, int msDuration, int msInterval)
+bool
+LogiLedFlashSingleKey (LogiLed::KeyName keyName, int redPercentage,
+					   int greenPercentage, int bluePercentage, int msDuration,
+					   int msInterval)
 {
-	_LogiLedFlashSingleKey(keyName, redPercentage, greenPercentage, bluePercentage, msDuration, msInterval);
+	_LogiLedFlashSingleKey (keyName, redPercentage, greenPercentage,
+							bluePercentage, msDuration, msInterval);
 
 	return isInitialized;
 }
 
-bool LogiLedPulseSingleKey(LogiLed::KeyName keyName, int startRedPercentage, int startGreenPercentage, int startBluePercentage, int finishRedPercentage, int finishGreenPercentage, int finishBluePercentage, int msDuration, bool isInfinite)
+bool
+LogiLedPulseSingleKey (LogiLed::KeyName keyName, int startRedPercentage,
+					   int startGreenPercentage, int startBluePercentage,
+					   int finishRedPercentage, int finishGreenPercentage,
+					   int finishBluePercentage, int msDuration,
+					   bool isInfinite)
 {
-	_LogiLedPulseSingleKey(keyName, startRedPercentage, startGreenPercentage, startBluePercentage, finishRedPercentage, finishGreenPercentage, finishBluePercentage, msDuration, isInfinite);
+	_LogiLedPulseSingleKey (keyName, startRedPercentage, startGreenPercentage,
+							startBluePercentage, finishRedPercentage,
+							finishGreenPercentage, finishBluePercentage,
+							msDuration, isInfinite);
 
 	return isInitialized;
 }
 
-bool LogiLedStopEffectsOnKey(LogiLed::KeyName keyName)
+bool
+LogiLedStopEffectsOnKey (LogiLed::KeyName keyName)
 {
-	_LogiLedStopEffectsOnKey(keyName);
+	_LogiLedStopEffectsOnKey (keyName);
 
 	return isInitialized;
 }
 
-void LogiLedShutdown()
+void
+LogiLedShutdown ()
 {
 	if (isInitialized)
 	{
 		if (hPipe != INVALID_HANDLE_VALUE)
-			CloseHandle(hPipe);
+			CloseHandle (hPipe);
 		isInitialized = false;
 	}
-}
\ No newline at end of file
+}
diff --git a/Aurora-LogiLEDWrapper/dllmain.h b/Aurora-LogiLEDWrapper/dllmain.h
index 7b9637e..6f70f09 100644
--- a/Aurora-LogiLEDWrapper/dllmain.h
+++ b/Aurora-LogiLEDWrapper/dllmain.h
@@ -1 +1 @@
-#pragma once
\ No newline at end of file
+#pragma once
diff --git a/Aurora-LogiLEDWrapper/stdafx.h b/Aurora-LogiLEDWrapper/stdafx.h
index f3a0737..8e634bc 100644
--- a/Aurora-LogiLEDWrapper/stdafx.h
+++ b/Aurora-LogiLEDWrapper/stdafx.h
@@ -7,10 +7,8 @@
 
 #include "targetver.h"
 
-#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers
+#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
 // Windows Header Files:
 #include <windows.h>
 
-
-
 // TODO: reference additional headers your program requires here
diff --git a/Aurora-RazerLEDWrapper/Aurora-RazerLEDWrapper.cpp b/Aurora-RazerLEDWrapper/Aurora-RazerLEDWrapper.cpp
index d51b406..b66af41 100644
--- a/Aurora-RazerLEDWrapper/Aurora-RazerLEDWrapper.cpp
+++ b/Aurora-RazerLEDWrapper/Aurora-RazerLEDWrapper.cpp
@@ -1,4 +1,4 @@
 // Aurora-RazerLEDWrapper.cpp : Defines the exported functions for the DLL application.
 //
 
-#include "stdafx.h"
\ No newline at end of file
+#include "stdafx.h"
diff --git a/Aurora-RazerLEDWrapper/RzChromaSDKDefines.h b/Aurora-RazerLEDWrapper/RzChromaSDKDefines.h
index 0f09bf0..11a5091 100644
--- a/Aurora-RazerLEDWrapper/RzChromaSDKDefines.h
+++ b/Aurora-RazerLEDWrapper/RzChromaSDKDefines.h
@@ -10,138 +10,154 @@
 #include <Guiddef.h>
 #endif
 
-namespace ChromaSDK
-{
+namespace ChromaSDK {
 	// Keyboards
 	//! Razer Blackwidow Chroma device.
 	// {2EA1BB63-CA28-428D-9F06-196B88330BBB}
 	static const GUID BLACKWIDOW_CHROMA =
-	{ 0x2ea1bb63, 0xca28, 0x428d,{ 0x9f, 0x06, 0x19, 0x6b, 0x88, 0x33, 0x0b, 0xbb } };
+		{ 0x2ea1bb63, 0xca28, 0x428d, {0x9f, 0x06, 0x19, 0x6b, 0x88, 0x33,
+									   0x0b, 0xbb} };
 
 	//! Razer Blackwidow Chroma Tournament Edition device.
 	// {ED1C1B82-BFBE-418F-B49D-D03F05B149DF}
 	static const GUID BLACKWIDOW_CHROMA_TE =
-	{ 0xed1c1b82, 0xbfbe, 0x418f,{ 0xb4, 0x9d, 0xd0, 0x3f, 0x5, 0xb1, 0x49, 0xdf } };
+		{ 0xed1c1b82, 0xbfbe, 0x418f, {0xb4, 0x9d, 0xd0, 0x3f, 0x5, 0xb1, 0x49,
+									   0xdf} };
 
 	//! Razer Deathstalker device.
 	// {18C5AD9B-4326-4828-92C4-2669A66D2283}
 	static const GUID DEATHSTALKER_CHROMA =
-	{ 0x18c5ad9b, 0x4326, 0x4828,{ 0x92, 0xc4, 0x26, 0x69, 0xa6, 0x6d, 0x22, 0x83 } };
+		{ 0x18c5ad9b, 0x4326, 0x4828, {0x92, 0xc4, 0x26, 0x69, 0xa6, 0x6d,
+									   0x22, 0x83} };
 
 	//! Overwatch Keyboard.
 	// {872AB2A9-7959-4478-9FED-15F6186E72E4}
 	static const GUID OVERWATCH_KEYBOARD =
-	{ 0x872ab2a9, 0x7959, 0x4478,{ 0x9f, 0xed, 0x15, 0xf6, 0x18, 0x6e, 0x72, 0xe4 } };
+		{ 0x872ab2a9, 0x7959, 0x4478, {0x9f, 0xed, 0x15, 0xf6, 0x18, 0x6e,
+									   0x72, 0xe4} };
 
 	//! Razer Blackwidow X Chroma device.
 	// {5AF60076-ADE9-43D4-B574-52599293B554}
 	static const GUID BLACKWIDOW_X_CHROMA =
-	{ 0x5af60076, 0xade9, 0x43d4,{ 0xb5, 0x74, 0x52, 0x59, 0x92, 0x93, 0xb5, 0x54 } };
+		{ 0x5af60076, 0xade9, 0x43d4, {0xb5, 0x74, 0x52, 0x59, 0x92, 0x93,
+									   0xb5, 0x54} };
 
 	//! Razer Blackwidow X TE Chroma device.
 	// {2D84DD51-3290-4AAC-9A89-D8AFDE38B57C}
 	static const GUID BLACKWIDOW_X_TE_CHROMA =
-	{ 0x2d84dd51, 0x3290, 0x4aac,{ 0x9a, 0x89, 0xd8, 0xaf, 0xde, 0x38, 0xb5, 0x7c } };
+		{ 0x2d84dd51, 0x3290, 0x4aac, {0x9a, 0x89, 0xd8, 0xaf, 0xde, 0x38,
+									   0xb5, 0x7c} };
 
 	//! Razer Blade Stealth.
 	// {C83BDFE8-E7FC-40E0-99DB-872E23F19891}
 	static const GUID BLADE_STEALTH =
-	{ 0xc83bdfe8, 0xe7fc, 0x40e0,{ 0x99, 0xdb, 0x87, 0x2e, 0x23, 0xf1, 0x98, 0x91 } };
+		{ 0xc83bdfe8, 0xe7fc, 0x40e0, {0x99, 0xdb, 0x87, 0x2e, 0x23, 0xf1,
+									   0x98, 0x91} };
 
 	//! Razer Blade
 	// {F2BEDFAF-A0FE-4651-9D41-B6CE603A3DDD}
 	static const GUID BLADE =
-	{ 0xf2bedfaf, 0xa0fe, 0x4651,{ 0x9d, 0x41, 0xb6, 0xce, 0x60, 0x3a, 0x3d, 0xdd } };
-
+		{ 0xf2bedfaf, 0xa0fe, 0x4651, {0x9d, 0x41, 0xb6, 0xce, 0x60, 0x3a,
+									   0x3d, 0xdd} };
 
 	// Mice
 	//! Razer Deathadder Chroma device.
 	// {AEC50D91-B1F1-452F-8E16-7B73F376FDF3}
 	static const GUID DEATHADDER_CHROMA =
-	{ 0xaec50d91, 0xb1f1, 0x452f,{ 0x8e, 0x16, 0x7b, 0x73, 0xf3, 0x76, 0xfd, 0xf3 } };
+		{ 0xaec50d91, 0xb1f1, 0x452f, {0x8e, 0x16, 0x7b, 0x73, 0xf3, 0x76,
+									   0xfd, 0xf3} };
 
 	//! Razer Mamba Chroma Tournament Edition device.
 	// {7EC00450-E0EE-4289-89D5-0D879C19061A}
 	static const GUID MAMBA_CHROMA_TE =
-	{ 0x7ec00450, 0xe0ee, 0x4289,{ 0x89, 0xd5, 0xd, 0x87, 0x9c, 0x19, 0x6, 0x1a } };
+		{ 0x7ec00450, 0xe0ee, 0x4289, {0x89, 0xd5, 0xd, 0x87, 0x9c, 0x19, 0x6,
+									   0x1a} };
 
 	//! Razer Diamondback device.
 	// {FF8A5929-4512-4257-8D59-C647BF9935D0}
 	static const GUID DIAMONDBACK_CHROMA =
-	{ 0xff8a5929, 0x4512, 0x4257,{ 0x8d, 0x59, 0xc6, 0x47, 0xbf, 0x99, 0x35, 0xd0 } };
+		{ 0xff8a5929, 0x4512, 0x4257, {0x8d, 0x59, 0xc6, 0x47, 0xbf, 0x99,
+									   0x35, 0xd0} };
 
 	//! Razer Mamba device.
 	// {D527CBDC-EB0A-483A-9E89-66D50463EC6C}
 	static const GUID MAMBA_CHROMA =
-	{ 0xd527cbdc, 0xeb0a, 0x483a,{ 0x9e, 0x89, 0x66, 0xd5, 0x4, 0x63, 0xec, 0x6c } };
+		{ 0xd527cbdc, 0xeb0a, 0x483a, {0x9e, 0x89, 0x66, 0xd5, 0x4, 0x63, 0xec,
+									   0x6c} };
 
 	//! Razer Naga Epic device.
 	// {D714C50B-7158-4368-B99C-601ACB985E98}
 	static const GUID NAGA_EPIC_CHROMA =
-	{ 0xd714c50b, 0x7158, 0x4368,{ 0xb9, 0x9c, 0x60, 0x1a, 0xcb, 0x98, 0x5e, 0x98 } };
+		{ 0xd714c50b, 0x7158, 0x4368, {0xb9, 0x9c, 0x60, 0x1a, 0xcb, 0x98,
+									   0x5e, 0x98} };
 
 	//! Razer Naga device.
 	// {F1876328-6CA4-46AE-BE04-BE812B414433}
 	static const GUID NAGA_CHROMA =
-	{ 0xf1876328, 0x6ca4, 0x46ae,{ 0xbe, 0x4, 0xbe, 0x81, 0x2b, 0x41, 0x44, 0x33 } };
+		{ 0xf1876328, 0x6ca4, 0x46ae, {0xbe, 0x4, 0xbe, 0x81, 0x2b, 0x41, 0x44,
+									   0x33} };
 
 	//! Razer Orochi Chroma device.
 	// {52C15681-4ECE-4DD9-8A52-A1418459EB34}
 	static const GUID OROCHI_CHROMA =
-	{ 0x52c15681, 0x4ece, 0x4dd9,{ 0x8a, 0x52, 0xa1, 0x41, 0x84, 0x59, 0xeb, 0x34 } };
+		{ 0x52c15681, 0x4ece, 0x4dd9, {0x8a, 0x52, 0xa1, 0x41, 0x84, 0x59,
+									   0xeb, 0x34} };
 
 	//! Razer Naga Hex Chroma device.
 	// {195D70F5-F285-4CFF-99F2-B8C0E9658DB4}
 	static const GUID NAGA_HEX_CHROMA =
-	{ 0x195d70f5, 0xf285, 0x4cff,{ 0x99, 0xf2, 0xb8, 0xc0, 0xe9, 0x65, 0x8d, 0xb4 } };
-
+		{ 0x195d70f5, 0xf285, 0x4cff, {0x99, 0xf2, 0xb8, 0xc0, 0xe9, 0x65,
+									   0x8d, 0xb4} };
 
 	// Headsets
 	//! Razer Kraken 7.1 Chroma device.
 	// {CD1E09A5-D5E6-4A6C-A93B-E6D9BF1D2092}
 	static const GUID KRAKEN71_CHROMA =
-	{ 0xcd1e09a5, 0xd5e6, 0x4a6c,{ 0xa9, 0x3b, 0xe6, 0xd9, 0xbf, 0x1d, 0x20, 0x92 } };
+		{ 0xcd1e09a5, 0xd5e6, 0x4a6c, {0xa9, 0x3b, 0xe6, 0xd9, 0xbf, 0x1d,
+									   0x20, 0x92} };
 
 	//! Razer ManO'War device.
 	// {DF3164D7-5408-4A0E-8A7F-A7412F26BEBF}
 	static const GUID MANOWAR_HEADSET =
-	{ 0xdf3164d7, 0x5408, 0x4a0e,{ 0x8a, 0x7f, 0xa7, 0x41, 0x2f, 0x26, 0xbe, 0xbf } };
-
+		{ 0xdf3164d7, 0x5408, 0x4a0e, {0x8a, 0x7f, 0xa7, 0x41, 0x2f, 0x26,
+									   0xbe, 0xbf} };
 
 	// Mouse mat
 	//! Razer Firefly device.
 	// {80F95A94-73D2-48CA-AE9A-0986789A9AF2}
 	static const GUID FIREFLY_CHROMA =
-	{ 0x80f95a94, 0x73d2, 0x48ca,{ 0xae, 0x9a, 0x9, 0x86, 0x78, 0x9a, 0x9a, 0xf2 } };
-
+		{ 0x80f95a94, 0x73d2, 0x48ca, {0xae, 0x9a, 0x9, 0x86, 0x78, 0x9a, 0x9a,
+									   0xf2} };
 
 	// Keypads
 	//! Razer Tartarus device.
 	// {00F0545C-E180-4AD1-8E8A-419061CE505E}
 	static const GUID TARTARUS_CHROMA =
-	{ 0xf0545c, 0xe180, 0x4ad1,{ 0x8e, 0x8a, 0x41, 0x90, 0x61, 0xce, 0x50, 0x5e } };
+		{ 0xf0545c, 0xe180, 0x4ad1, {0x8e, 0x8a, 0x41, 0x90, 0x61, 0xce, 0x50,
+									 0x5e} };
 
 	//! Razer Orbweaver device.
 	// {9D24B0AB-0162-466C-9640-7A924AA4D9FD}
 	static const GUID ORBWEAVER_CHROMA =
-	{ 0x9d24b0ab, 0x162, 0x466c,{ 0x96, 0x40, 0x7a, 0x92, 0x4a, 0xa4, 0xd9, 0xfd } };
-
+		{ 0x9d24b0ab, 0x162, 0x466c, {0x96, 0x40, 0x7a, 0x92, 0x4a, 0xa4, 0xd9,
+									  0xfd} };
 
 	// Systems
 	// {35F6F18D-1AE5-436C-A575-AB44A127903A}
 	static const GUID LENOVO_Y900 =
-	{ 0x35f6f18d, 0x1ae5, 0x436c,{ 0xa5, 0x75, 0xab, 0x44, 0xa1, 0x27, 0x90, 0x3a } };
+		{ 0x35f6f18d, 0x1ae5, 0x436c, {0xa5, 0x75, 0xab, 0x44, 0xa1, 0x27,
+									   0x90, 0x3a} };
 
 	// {47DB1FA7-6B9B-4EE6-B6F4-4071A3B2053B}
 	static const GUID LENOVO_Y27 =
-	{ 0x47db1fa7, 0x6b9b, 0x4ee6,{ 0xb6, 0xf4, 0x40, 0x71, 0xa3, 0xb2, 0x5, 0x3b } };
-
+		{ 0x47db1fa7, 0x6b9b, 0x4ee6, {0xb6, 0xf4, 0x40, 0x71, 0xa3, 0xb2, 0x5,
+									   0x3b} };
 
 	// Accessories
 	// {0201203B-62F3-4C50-83DD-598BABD208E0}
 	static const GUID CORE_CHROMA =
-	{ 0x201203b, 0x62f3, 0x4c50,{ 0x83, 0xdd, 0x59, 0x8b, 0xab, 0xd2, 0x8, 0xe0 } };
-
+		{ 0x201203b, 0x62f3, 0x4c50, {0x83, 0xdd, 0x59, 0x8b, 0xab, 0xd2, 0x8,
+									  0xe0} };
 
 }
 
diff --git a/Aurora-RazerLEDWrapper/dllmain.cpp b/Aurora-RazerLEDWrapper/dllmain.cpp
index 65a910b..f1ae5e2 100644
--- a/Aurora-RazerLEDWrapper/dllmain.cpp
+++ b/Aurora-RazerLEDWrapper/dllmain.cpp
@@ -12,7 +12,7 @@
 #include <sstream>
 #include <windows.h>
 
-#define PIPE_NAME L"\\\\.\\pipe\\Aurora\\server" 
+#define PIPE_NAME L"\\\\.\\pipe\\Aurora\\server"
 
 #define LOGI_LED_BITMAP_WIDTH 21
 #define LOGI_LED_BITMAP_HEIGHT 6
@@ -20,7 +20,7 @@
 
 #define LOGI_LED_BITMAP_SIZE (LOGI_LED_BITMAP_WIDTH*LOGI_LED_BITMAP_HEIGHT*LOGI_LED_BITMAP_BYTES_PER_KEY)
 
-const GUID GUID_NULL = { 0, 0, 0,{ 0, 0, 0, 0, 0, 0, 0, 0 } };
+const GUID GUID_NULL = { 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0} };
 
 typedef enum
 {
@@ -109,7 +109,7 @@ typedef enum
 	BITLOC_L = 288,
 	BITLOC_SEMICOLON = 292,
 	BITLOC_APOSTROPHE = 296,
-	BITLOC_HASHTAG = 300,//300
+	BITLOC_HASHTAG = 300,		//300
 	BITLOC_ENTER = 304,
 	//308
 	//312
@@ -162,9 +162,10 @@ typedef enum
 	BITLOC_NUM_ZERO = 492,
 	BITLOC_NUM_PERIOD = 496,
 	//500
-}Logitech_keyboardBitmapKeys;
+} Logitech_keyboardBitmapKeys;
 
-Logitech_keyboardBitmapKeys ToLogitechBitmap(int rzrow, int rzcolumn)
+Logitech_keyboardBitmapKeys
+ToLogitechBitmap (int rzrow, int rzcolumn)
 {
 	//Row 1
 	if (rzrow == 0 && rzcolumn == 1)
@@ -419,7 +420,6 @@ typedef struct WRAPPER_EFFECT
 	std::string command_cargo = "";
 } WRAPPER_EFFECT;
 
-
 HANDLE hPipe = INVALID_HANDLE_VALUE;
 static bool isInitialized = false;
 static bool requiresUpdate = true;
@@ -433,48 +433,56 @@ static unsigned char current_g4[4];
 static unsigned char current_g5[4];
 static unsigned char current_peripheral[4];
 
-struct GUIDComparer {
-	bool operator()(const GUID & Left, const GUID & Right) const
+struct GUIDComparer
+{
+	bool operator () (const GUID & Left, const GUID & Right) const
 	{
 		// comparison logic goes here
-		return memcmp(&Left, &Right, sizeof(Right)) < 0;
+		return memcmp (&Left, &Right, sizeof (Right)) < 0;
 	}
 };
 
-static std::map<GUID, WRAPPER_EFFECT, GUIDComparer> effects;
+static
+	std::map <
+	GUID,
+	WRAPPER_EFFECT,
+	GUIDComparer >
+	effects;
 
-static std::string program_name;
+static
+	std::string
+	program_name;
 
-void write_text_to_log_file(const std::string &text)
+void
+write_text_to_log_file (const std::string & text)
 {
 	/*
-	std::ofstream out("output.txt", std::ios_base::app);
-	out << text;
-	out.close();
-	*/
+	   std::ofstream out("output.txt", std::ios_base::app);
+	   out << text;
+	   out.close();
+	 */
 }
 
-BOOL WINAPI DllMain(HMODULE hModule,
-	DWORD  ul_reason_for_call,
-	LPVOID lpReserved
-)
+BOOL WINAPI
+DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
 {
 	switch (ul_reason_for_call)
 	{
 	case DLL_PROCESS_ATTACH:
-		write_text_to_log_file("\r\nDLL_PROCESS_ATTACH");
+		write_text_to_log_file ("\r\nDLL_PROCESS_ATTACH");
 	case DLL_THREAD_ATTACH:
-		write_text_to_log_file("\r\nDLL_THREAD_ATTACH");
+		write_text_to_log_file ("\r\nDLL_THREAD_ATTACH");
 	case DLL_THREAD_DETACH:
-		write_text_to_log_file("\r\nDLL_THREAD_DETACH");
+		write_text_to_log_file ("\r\nDLL_THREAD_DETACH");
 	case DLL_PROCESS_DETACH:
-		write_text_to_log_file("\r\nDLL_PROCESS_DETACH");
+		write_text_to_log_file ("\r\nDLL_PROCESS_DETACH");
 		break;
 	}
 	return TRUE;
 }
 
-bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
+bool __fastcall
+WriteToPipe (WRAPPER_EFFECT effect)
 {
 	if (!isInitialized)
 		return false;
@@ -488,7 +496,8 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 	std::stringstream ss;
 
 	ss << '{';
-	ss << "\"provider\": {\"name\": \"" << program_name << "\", \"appid\": 0},";
+	ss << "\"provider\": {\"name\": \"" << program_name <<
+		"\", \"appid\": 0},";
 	ss << effect.command_cargo << ',';
 	ss << "\"bitmap\": [";
 	for (int bitm_pos = 0; bitm_pos < LOGI_LED_BITMAP_SIZE; bitm_pos += 4)
@@ -501,10 +510,10 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 			current_bitmap[bitm_pos + 3] = effect.bitmap[bitm_pos + 3];
 		}
 
-		ss << (short)current_bitmap[bitm_pos] << ',';
-		ss << (short)current_bitmap[bitm_pos + 1] << ',';
-		ss << (short)current_bitmap[bitm_pos + 2] << ',';
-		ss << (short)current_bitmap[bitm_pos + 3];
+		ss << (short) current_bitmap[bitm_pos] << ',';
+		ss << (short) current_bitmap[bitm_pos + 1] << ',';
+		ss << (short) current_bitmap[bitm_pos + 2] << ',';
+		ss << (short) current_bitmap[bitm_pos + 3];
 
 		if (bitm_pos + 4 < LOGI_LED_BITMAP_SIZE)
 			ss << ',';
@@ -521,10 +530,10 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 		current_logo[3] = effect.logo[3];
 	}
 
-	ss << (short)current_logo[0] << ',';
-	ss << (short)current_logo[1] << ',';
-	ss << (short)current_logo[2] << ',';
-	ss << (short)current_logo[3];
+	ss << (short) current_logo[0] << ',';
+	ss << (short) current_logo[1] << ',';
+	ss << (short) current_logo[2] << ',';
+	ss << (short) current_logo[3];
 
 	ss << "],";
 	ss << "\"G1\": [";
@@ -536,10 +545,10 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 		current_g1[3] = effect.g1[3];
 	}
 
-	ss << (short)current_g1[0] << ',';
-	ss << (short)current_g1[1] << ',';
-	ss << (short)current_g1[2] << ',';
-	ss << (short)current_g1[3];
+	ss << (short) current_g1[0] << ',';
+	ss << (short) current_g1[1] << ',';
+	ss << (short) current_g1[2] << ',';
+	ss << (short) current_g1[3];
 
 	ss << "],";
 	ss << "\"G2\": [";
@@ -551,10 +560,10 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 		current_g2[3] = effect.g2[3];
 	}
 
-	ss << (short)current_g2[0] << ',';
-	ss << (short)current_g2[1] << ',';
-	ss << (short)current_g2[2] << ',';
-	ss << (short)current_g2[3];
+	ss << (short) current_g2[0] << ',';
+	ss << (short) current_g2[1] << ',';
+	ss << (short) current_g2[2] << ',';
+	ss << (short) current_g2[3];
 
 	ss << "],";
 	ss << "\"G3\": [";
@@ -566,10 +575,10 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 		current_g3[3] = effect.g3[3];
 	}
 
-	ss << (short)current_g3[0] << ',';
-	ss << (short)current_g3[1] << ',';
-	ss << (short)current_g3[2] << ',';
-	ss << (short)current_g3[3];
+	ss << (short) current_g3[0] << ',';
+	ss << (short) current_g3[1] << ',';
+	ss << (short) current_g3[2] << ',';
+	ss << (short) current_g3[3];
 
 	ss << "],";
 	ss << "\"G4\": [";
@@ -581,10 +590,10 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 		current_g4[3] = effect.g4[3];
 	}
 
-	ss << (short)current_g4[0] << ',';
-	ss << (short)current_g4[1] << ',';
-	ss << (short)current_g4[2] << ',';
-	ss << (short)current_g4[3];
+	ss << (short) current_g4[0] << ',';
+	ss << (short) current_g4[1] << ',';
+	ss << (short) current_g4[2] << ',';
+	ss << (short) current_g4[3];
 
 	ss << "],";
 	ss << "\"G5\": [";
@@ -596,10 +605,10 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 		current_g5[3] = effect.g5[3];
 	}
 
-	ss << (short)current_g5[0] << ',';
-	ss << (short)current_g5[1] << ',';
-	ss << (short)current_g5[2] << ',';
-	ss << (short)current_g5[3];
+	ss << (short) current_g5[0] << ',';
+	ss << (short) current_g5[1] << ',';
+	ss << (short) current_g5[2] << ',';
+	ss << (short) current_g5[3];
 
 	ss << "],";
 	ss << "\"peripheral\": [";
@@ -611,14 +620,13 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 		current_peripheral[3] = effect.peripheral[3];
 	}
 
-	ss << (short)current_peripheral[0] << ',';
-	ss << (short)current_peripheral[1] << ',';
-	ss << (short)current_peripheral[2] << ',';
-	ss << (short)current_peripheral[3];
+	ss << (short) current_peripheral[0] << ',';
+	ss << (short) current_peripheral[1] << ',';
+	ss << (short) current_peripheral[2] << ',';
+	ss << (short) current_peripheral[3];
 	ss << "]";
 	ss << '}';
 
-
 	ss << '}';
 
 	ss << "\r\n";
@@ -627,38 +635,39 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 	{
 		//Try to gestore handle
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
-			GENERIC_WRITE,  // write access 
-			0,              // no sharing 
-			NULL,           // default security attributes
-			OPEN_EXISTING,  // opens existing pipe 
-			0,              // default attributes 
-			NULL);          // no template file 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
+							GENERIC_WRITE,	// write access 
+							0,	// no sharing 
+							NULL,	// default security attributes
+							OPEN_EXISTING,	// opens existing pipe 
+							0,	// default attributes 
+							NULL);	// no template file 
 
 		if (hPipe == NULL || hPipe == INVALID_HANDLE_VALUE)
 		{
-			DWORD last_error = GetLastError();
+			DWORD
+				last_error = GetLastError ();
 
 			switch (last_error)
 			{
 			case ERROR_PIPE_BUSY:
-				write_text_to_log_file("Pipe error, ERROR_PIPE_BUSY");
+				write_text_to_log_file ("Pipe error, ERROR_PIPE_BUSY");
 				break;
 			case ERROR_PIPE_CONNECTED:
-				write_text_to_log_file("Pipe error, ERROR_PIPE_CONNECTED");
+				write_text_to_log_file ("Pipe error, ERROR_PIPE_CONNECTED");
 				break;
 			case ERROR_PIPE_LISTENING:
-				write_text_to_log_file("Pipe error, ERROR_PIPE_LISTENING");
+				write_text_to_log_file ("Pipe error, ERROR_PIPE_LISTENING");
 				break;
 			case ERROR_PIPE_LOCAL:
-				write_text_to_log_file("Pipe error, ERROR_PIPE_LOCAL");
+				write_text_to_log_file ("Pipe error, ERROR_PIPE_LOCAL");
 				break;
 			case ERROR_PIPE_NOT_CONNECTED:
-				write_text_to_log_file("Pipe error, ERROR_PIPE_NOT_CONNECTED");
+				write_text_to_log_file
+					("Pipe error, ERROR_PIPE_NOT_CONNECTED");
 				break;
 			default:
-				write_text_to_log_file("Non-pipe related error");
+				write_text_to_log_file ("Non-pipe related error");
 				break;
 			}
 
@@ -666,18 +675,19 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 		}
 	}
 
-	DWORD cbBytes;
+	DWORD
+		cbBytes;
 
-	BOOL bResult = WriteFile(
-		hPipe,                // handle to pipe 
-		ss.str().c_str(),             // buffer to write from 
-		strlen(ss.str().c_str()),   // number of bytes to write, include the NULL
-		&cbBytes,             // number of bytes written 
-		NULL);                // not overlapped I/O 
+	BOOL
+		bResult = WriteFile (hPipe,	// handle to pipe 
+							 ss.str ().c_str (),	// buffer to write from 
+							 strlen (ss.str ().c_str ()),	// number of bytes to write, include the NULL
+							 &cbBytes,	// number of bytes written 
+							 NULL);	// not overlapped I/O 
 
-	if ((!bResult) || (strlen(ss.str().c_str()) != cbBytes))
+	if ((!bResult) || (strlen (ss.str ().c_str ()) != cbBytes))
 	{
-		CloseHandle(hPipe);
+		CloseHandle (hPipe);
 		return false;
 	}
 	else
@@ -688,36 +698,43 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 	return false;
 }
 
-WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZPARAM pParam)
+WRAPPER_EFFECT
+HandleKeyboardEffect (ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZPARAM pParam)
 {
-	WRAPPER_EFFECT return_effect;
+	WRAPPER_EFFECT
+		return_effect;
 	std::stringstream additional_effect_data;
 
 	additional_effect_data << ',';
 
 	if (Effect == ChromaSDK::Keyboard::CHROMA_STATIC)
 	{
-		struct ChromaSDK::Keyboard::STATIC_EFFECT_TYPE *static_effect = (struct ChromaSDK::Keyboard::STATIC_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Keyboard::STATIC_EFFECT_TYPE *
+			static_effect =
+			(struct ChromaSDK::Keyboard::STATIC_EFFECT_TYPE *) pParam;
 
-		unsigned char blue = GetBValue(static_effect->Color);
-		unsigned char green = GetGValue(static_effect->Color);
-		unsigned char red = GetRValue(static_effect->Color);
+		unsigned char
+			blue = GetBValue (static_effect->Color);
+		unsigned char
+			green = GetGValue (static_effect->Color);
+		unsigned char
+			red = GetRValue (static_effect->Color);
 
 		for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
 		{
 			if (return_effect.bitmap[colorset] != blue ||
 				return_effect.bitmap[colorset + 1] != green ||
-				return_effect.bitmap[colorset + 2] != red
-				)
+				return_effect.bitmap[colorset + 2] != red)
 				requiresUpdate = true;
 
 			return_effect.bitmap[colorset] = blue;
 			return_effect.bitmap[colorset + 1] = green;
 			return_effect.bitmap[colorset + 2] = red;
-			return_effect.bitmap[colorset + 3] = (char)255;
+			return_effect.bitmap[colorset + 3] = (char) 255;
 		}
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_STATIC" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_STATIC" << "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_NONE)
 	{
@@ -725,400 +742,404 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 		{
 			if (return_effect.bitmap[colorset] != 0 ||
 				return_effect.bitmap[colorset + 1] != 0 ||
-				return_effect.bitmap[colorset + 2] != 0
-				)
+				return_effect.bitmap[colorset + 2] != 0)
 				requiresUpdate = true;
 
-			return_effect.bitmap[colorset] = (char)0;
-			return_effect.bitmap[colorset + 1] = (char)0;
-			return_effect.bitmap[colorset + 2] = (char)0;
-			return_effect.bitmap[colorset + 3] = (char)255;
+			return_effect.bitmap[colorset] = (char) 0;
+			return_effect.bitmap[colorset + 1] = (char) 0;
+			return_effect.bitmap[colorset + 2] = (char) 0;
+			return_effect.bitmap[colorset + 3] = (char) 255;
 		}
 
 		//Logo
 		if (current_logo[0] != 0 ||
-			current_logo[1] != 0 ||
-			current_logo[2] != 0
-			)
+			current_logo[1] != 0 || current_logo[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.logo[0] = 0;
 		return_effect.logo[1] = 0;
 		return_effect.logo[2] = 0;
-		return_effect.logo[3] = (char)255;
+		return_effect.logo[3] = (char) 255;
 
 		//G Keys
-		if (current_g1[0] != 0 ||
-			current_g1[1] != 0 ||
-			current_g1[2] != 0
-			)
+		if (current_g1[0] != 0 || current_g1[1] != 0 || current_g1[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g1[0] = 0;
 		return_effect.g1[1] = 0;
 		return_effect.g1[2] = 0;
-		return_effect.g1[3] = (char)255;
+		return_effect.g1[3] = (char) 255;
 
-		if (current_g2[0] != 0 ||
-			current_g2[1] != 0 ||
-			current_g2[2] != 0
-			)
+		if (current_g2[0] != 0 || current_g2[1] != 0 || current_g2[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g2[0] = 0;
 		return_effect.g2[1] = 0;
 		return_effect.g2[2] = 0;
-		return_effect.g2[3] = (char)255;
+		return_effect.g2[3] = (char) 255;
 
-		if (current_g3[0] != 0 ||
-			current_g3[1] != 0 ||
-			current_g3[2] != 0
-			)
+		if (current_g3[0] != 0 || current_g3[1] != 0 || current_g3[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g3[0] = 0;
 		return_effect.g3[1] = 0;
 		return_effect.g3[2] = 0;
-		return_effect.g3[3] = (char)255;
+		return_effect.g3[3] = (char) 255;
 
-		if (current_g4[0] != 0 ||
-			current_g4[1] != 0 ||
-			current_g4[2] != 0
-			)
+		if (current_g4[0] != 0 || current_g4[1] != 0 || current_g4[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g4[0] = 0;
 		return_effect.g4[1] = 0;
 		return_effect.g4[2] = 0;
-		return_effect.g4[3] = (char)255;
+		return_effect.g4[3] = (char) 255;
 
-		if (current_g5[0] != 0 ||
-			current_g5[1] != 0 ||
-			current_g5[2] != 0
-			)
+		if (current_g5[0] != 0 || current_g5[1] != 0 || current_g5[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g5[0] = 0;
 		return_effect.g5[1] = 0;
 		return_effect.g5[2] = 0;
-		return_effect.g5[3] = (char)255;
+		return_effect.g5[3] = (char) 255;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_NONE" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_NONE"
+			<< "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_CUSTOM)
 	{
-		struct ChromaSDK::Keyboard::CUSTOM_EFFECT_TYPE *custom_effect = (struct ChromaSDK::Keyboard::CUSTOM_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Keyboard::CUSTOM_EFFECT_TYPE *
+			custom_effect =
+			(struct ChromaSDK::Keyboard::CUSTOM_EFFECT_TYPE *) pParam;
 
 		for (int row = 0; row < ChromaSDK::Keyboard::MAX_ROW; row++)
 		{
 			for (int col = 0; col < ChromaSDK::Keyboard::MAX_COLUMN; col++)
 			{
-				Logitech_keyboardBitmapKeys bitmap_pos = ToLogitechBitmap(row, col);
+				Logitech_keyboardBitmapKeys
+					bitmap_pos = ToLogitechBitmap (row, col);
 
 				if (bitmap_pos != Logitech_keyboardBitmapKeys::UNKNOWN)
 				{
-					unsigned char blue = GetBValue(custom_effect->Color[row][col]);
-					unsigned char green = GetGValue(custom_effect->Color[row][col]);
-					unsigned char red = GetRValue(custom_effect->Color[row][col]);
-
+					unsigned char
+						blue = GetBValue (custom_effect->Color[row][col]);
+					unsigned char
+						green = GetGValue (custom_effect->Color[row][col]);
+					unsigned char
+						red = GetRValue (custom_effect->Color[row][col]);
 
 					if (bitmap_pos == Logitech_keyboardBitmapKeys::LOGO)
 					{
 						if (current_logo[0] != blue ||
-							current_logo[1] != green ||
-							current_logo[2] != red
-							)
+							current_logo[1] != green || current_logo[2] != red)
 							requiresUpdate = true;
 
 						return_effect.logo[0] = blue;
 						return_effect.logo[1] = green;
 						return_effect.logo[2] = red;
-						return_effect.logo[3] = (char)255;
+						return_effect.logo[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G1)
 					{
 						if (current_g1[0] != blue ||
-							current_g1[1] != green ||
-							current_g1[2] != red
-							)
+							current_g1[1] != green || current_g1[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g1[0] = blue;
 						return_effect.g1[1] = green;
 						return_effect.g1[2] = red;
-						return_effect.g1[3] = (char)255;
+						return_effect.g1[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G2)
 					{
 						if (current_g2[0] != blue ||
-							current_g2[1] != green ||
-							current_g2[2] != red
-							)
+							current_g2[1] != green || current_g2[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g2[0] = blue;
 						return_effect.g2[1] = green;
 						return_effect.g2[2] = red;
-						return_effect.g2[3] = (char)255;
+						return_effect.g2[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G3)
 					{
 						if (current_g3[0] != blue ||
-							current_g3[1] != green ||
-							current_g3[2] != red
-							)
+							current_g3[1] != green || current_g3[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g3[0] = blue;
 						return_effect.g3[1] = green;
 						return_effect.g3[2] = red;
-						return_effect.g3[3] = (char)255;
+						return_effect.g3[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G4)
 					{
 						if (current_g4[0] != blue ||
-							current_g4[1] != green ||
-							current_g4[2] != red
-							)
+							current_g4[1] != green || current_g4[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g4[0] = blue;
 						return_effect.g4[1] = green;
 						return_effect.g4[2] = red;
-						return_effect.g4[3] = (char)255;
+						return_effect.g4[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G5)
 					{
 						if (current_g5[0] != blue ||
-							current_g5[1] != green ||
-							current_g5[2] != red
-							)
+							current_g5[1] != green || current_g5[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g5[0] = blue;
 						return_effect.g5[1] = green;
 						return_effect.g5[2] = red;
-						return_effect.g5[3] = (char)255;
+						return_effect.g5[3] = (char) 255;
 					}
 					else
 					{
-						if (current_bitmap[(int)bitmap_pos] != blue ||
-							current_bitmap[(int)bitmap_pos + 1] != green ||
-							current_bitmap[(int)bitmap_pos + 2] != red
-							)
+						if (current_bitmap[(int) bitmap_pos] != blue ||
+							current_bitmap[(int) bitmap_pos + 1] != green ||
+							current_bitmap[(int) bitmap_pos + 2] != red)
 							requiresUpdate = true;
 
-						return_effect.bitmap[(int)bitmap_pos] = blue;
-						return_effect.bitmap[(int)bitmap_pos + 1] = green;
-						return_effect.bitmap[(int)bitmap_pos + 2] = red;
-						return_effect.bitmap[(int)bitmap_pos + 3] = (char)255;
+						return_effect.bitmap[(int) bitmap_pos] = blue;
+						return_effect.bitmap[(int) bitmap_pos + 1] = green;
+						return_effect.bitmap[(int) bitmap_pos + 2] = red;
+						return_effect.bitmap[(int) bitmap_pos + 3] =
+							(char) 255;
 					}
 				}
 			}
 		}
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_CUSTOM" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_CUSTOM" << "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_CUSTOM_KEY)
 	{
-		struct ChromaSDK::Keyboard::CUSTOM_KEY_EFFECT_TYPE *custom_effect = (struct ChromaSDK::Keyboard::CUSTOM_KEY_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Keyboard::CUSTOM_KEY_EFFECT_TYPE *
+			custom_effect =
+			(struct ChromaSDK::Keyboard::CUSTOM_KEY_EFFECT_TYPE *) pParam;
 
 		for (int row = 0; row < ChromaSDK::Keyboard::MAX_ROW; row++)
 		{
 			for (int col = 0; col < ChromaSDK::Keyboard::MAX_COLUMN; col++)
 			{
-				Logitech_keyboardBitmapKeys bitmap_pos = ToLogitechBitmap(row, col);
+				Logitech_keyboardBitmapKeys
+					bitmap_pos = ToLogitechBitmap (row, col);
 
 				if (bitmap_pos != Logitech_keyboardBitmapKeys::UNKNOWN)
 				{
-					unsigned char blue = GetBValue(custom_effect->Key[row][col]);
-					unsigned char green = GetGValue(custom_effect->Key[row][col]);
-					unsigned char red = GetRValue(custom_effect->Key[row][col]);
-
+					unsigned char
+						blue = GetBValue (custom_effect->Key[row][col]);
+					unsigned char
+						green = GetGValue (custom_effect->Key[row][col]);
+					unsigned char
+						red = GetRValue (custom_effect->Key[row][col]);
 
 					if (bitmap_pos == Logitech_keyboardBitmapKeys::LOGO)
 					{
 						if (current_logo[0] != blue ||
-							current_logo[1] != green ||
-							current_logo[2] != red
-							)
+							current_logo[1] != green || current_logo[2] != red)
 							requiresUpdate = true;
 
 						return_effect.logo[0] = blue;
 						return_effect.logo[1] = green;
 						return_effect.logo[2] = red;
-						return_effect.logo[3] = (char)255;
+						return_effect.logo[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G1)
 					{
 						if (current_g1[0] != blue ||
-							current_g1[1] != green ||
-							current_g1[2] != red
-							)
+							current_g1[1] != green || current_g1[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g1[0] = blue;
 						return_effect.g1[1] = green;
 						return_effect.g1[2] = red;
-						return_effect.g1[3] = (char)255;
+						return_effect.g1[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G2)
 					{
 						if (current_g2[0] != blue ||
-							current_g2[1] != green ||
-							current_g2[2] != red
-							)
+							current_g2[1] != green || current_g2[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g2[0] = blue;
 						return_effect.g2[1] = green;
 						return_effect.g2[2] = red;
-						return_effect.g2[3] = (char)255;
+						return_effect.g2[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G3)
 					{
 						if (current_g3[0] != blue ||
-							current_g3[1] != green ||
-							current_g3[2] != red
-							)
+							current_g3[1] != green || current_g3[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g3[0] = blue;
 						return_effect.g3[1] = green;
 						return_effect.g3[2] = red;
-						return_effect.g3[3] = (char)255;
+						return_effect.g3[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G4)
 					{
 						if (current_g4[0] != blue ||
-							current_g4[1] != green ||
-							current_g4[2] != red
-							)
+							current_g4[1] != green || current_g4[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g4[0] = blue;
 						return_effect.g4[1] = green;
 						return_effect.g4[2] = red;
-						return_effect.g4[3] = (char)255;
+						return_effect.g4[3] = (char) 255;
 					}
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G5)
 					{
 						if (current_g5[0] != blue ||
-							current_g5[1] != green ||
-							current_g5[2] != red
-							)
+							current_g5[1] != green || current_g5[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g5[0] = blue;
 						return_effect.g5[1] = green;
 						return_effect.g5[2] = red;
-						return_effect.g5[3] = (char)255;
+						return_effect.g5[3] = (char) 255;
 					}
 					else
 					{
-						if (current_bitmap[(int)bitmap_pos] != blue ||
-							current_bitmap[(int)bitmap_pos + 1] != green ||
-							current_bitmap[(int)bitmap_pos + 2] != red
-							)
+						if (current_bitmap[(int) bitmap_pos] != blue ||
+							current_bitmap[(int) bitmap_pos + 1] != green ||
+							current_bitmap[(int) bitmap_pos + 2] != red)
 							requiresUpdate = true;
 
-						return_effect.bitmap[(int)bitmap_pos] = blue;
-						return_effect.bitmap[(int)bitmap_pos + 1] = green;
-						return_effect.bitmap[(int)bitmap_pos + 2] = red;
-						return_effect.bitmap[(int)bitmap_pos + 3] = (char)255;
+						return_effect.bitmap[(int) bitmap_pos] = blue;
+						return_effect.bitmap[(int) bitmap_pos + 1] = green;
+						return_effect.bitmap[(int) bitmap_pos + 2] = red;
+						return_effect.bitmap[(int) bitmap_pos + 3] =
+							(char) 255;
 					}
 				}
 			}
 		}
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_CUSTOM" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_CUSTOM" << "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_BREATHING)
 	{
-		struct ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE *breathing_effect = (struct ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE *)pParam;
-
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"red_end\": " << "\"" << GetRValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\"green_end\": " << "\"" << GetGValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\blue_end\": " << "\"" << GetBValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_BREATHING" << "\"" << ',';
+		struct ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE *
+			breathing_effect =
+			(struct ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE *) pParam;
+
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"red_end\": " << "\"" <<
+			GetRValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\"green_end\": " << "\"" <<
+			GetGValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\blue_end\": " << "\"" <<
+			GetBValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_BREATHING" << "\"" << ',';
 
 		switch (breathing_effect->Type)
 		{
 		case ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE::Type::TWO_COLORS:
-			additional_effect_data << "\"effect_config\": " << "\"" << "TWO_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"TWO_COLORS" << "\"";
 			break;
 		case ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE::Type::RANDOM_COLORS:
-			additional_effect_data << "\"effect_config\": " << "\"" << "RANDOM_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"RANDOM_COLORS" << "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "INVALID" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"INVALID" << "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_REACTIVE)
 	{
-		struct ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE *reactive_effect = (struct ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE *)pParam;
-
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_REACTIVE" << "\"" << ',';
+		struct ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE *
+			reactive_effect =
+			(struct ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE *) pParam;
+
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_REACTIVE" << "\"" << ',';
 
 		switch (reactive_effect->Duration)
 		{
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_NONE:
-			additional_effect_data << "\"effect_config\": " << "\"" << "NONE" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "NONE"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_SHORT:
-			additional_effect_data << "\"effect_config\": " << "\"" << "SHORT" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "SHORT"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_MEDIUM:
-			additional_effect_data << "\"effect_config\": " << "\"" << "MEDIUM" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "MEDIUM"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_LONG:
-			additional_effect_data << "\"effect_config\": " << "\"" << "LONG" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "LONG"
+				<< "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "INVALID" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"INVALID" << "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_SPECTRUMCYCLING)
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_SPECTRUMCYCLING" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_SPECTRUMCYCLING" << "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_WAVE)
 	{
-		struct ChromaSDK::Keyboard::WAVE_EFFECT_TYPE *wave_effect = (struct ChromaSDK::Keyboard::WAVE_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Keyboard::WAVE_EFFECT_TYPE *
+			wave_effect =
+			(struct ChromaSDK::Keyboard::WAVE_EFFECT_TYPE *) pParam;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_WAVE" << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_WAVE"
+			<< "\"" << ',';
 
 		switch (wave_effect->Direction)
 		{
 		case ChromaSDK::Keyboard::WAVE_EFFECT_TYPE::DIRECTION_NONE:
-			additional_effect_data << "\"effect_config\": " << "\"" << "NONE" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "NONE"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::WAVE_EFFECT_TYPE::DIRECTION_LEFT_TO_RIGHT:
-			additional_effect_data << "\"effect_config\": " << "\"" << "LEFT_TO_RIGHT" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"LEFT_TO_RIGHT" << "\"";
 			break;
 		case ChromaSDK::Keyboard::WAVE_EFFECT_TYPE::DIRECTION_RIGHT_TO_LEFT:
-			additional_effect_data << "\"effect_config\": " << "\"" << "RIGHT_TO_LEFT" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"RIGHT_TO_LEFT" << "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "INVALID" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"INVALID" << "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_STARLIGHT)
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_STARLIGHT" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_STARLIGHT" << "\"";
 	}
 	else
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_INVALID" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_INVALID" << "\"";
 	}
 
 	std::stringstream ss;
@@ -1126,17 +1147,19 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 	ss << "\"command_data\": {";
 
 	ss << "\"custom_mode\": " << 0;
-	ss << additional_effect_data.str();
+	ss << additional_effect_data.str ();
 	ss << '}';
 
-	return_effect.command_cargo = ss.str();
+	return_effect.command_cargo = ss.str ();
 
 	return return_effect;
 }
 
-WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam)
+WRAPPER_EFFECT
+HandleMouseEffect (ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam)
 {
-	WRAPPER_EFFECT return_effect;
+	WRAPPER_EFFECT
+		return_effect;
 	std::stringstream additional_effect_data;
 
 	additional_effect_data << ',';
@@ -1144,19 +1167,19 @@ WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM
 	switch (Effect)
 	{
 		//case ChromaSDK::Mouse::CHROMA_NONE:
-		//	break;
-	//case ChromaSDK::Mouse::CHROMA_BLINKING:
-	//	break;
-	//case ChromaSDK::Mouse::CHROMA_BREATHING:
-	//	break;
+		//  break;
+		//case ChromaSDK::Mouse::CHROMA_BLINKING:
+		//  break;
+		//case ChromaSDK::Mouse::CHROMA_BREATHING:
+		//  break;
 		//case ChromaSDK::Mouse::CHROMA_CUSTOM:
-		//	break;
-	//case ChromaSDK::Mouse::CHROMA_REACTIVE:
-	//	break;
-	//case ChromaSDK::Mouse::CHROMA_SPECTRUMCYCLING:
-	//	break;
+		//  break;
+		//case ChromaSDK::Mouse::CHROMA_REACTIVE:
+		//  break;
+		//case ChromaSDK::Mouse::CHROMA_SPECTRUMCYCLING:
+		//  break;
 		//case ChromaSDK::Mouse::CHROMA_STATIC:
-		//	break;
+		//  break;
 	case ChromaSDK::Mouse::CHROMA_WAVE:
 		break;
 	case ChromaSDK::Mouse::CHROMA_CUSTOM2:
@@ -1169,158 +1192,223 @@ WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM
 
 	if (Effect == ChromaSDK::Mouse::CHROMA_STATIC)
 	{
-		struct ChromaSDK::Mouse::STATIC_EFFECT_TYPE *static_effect = (struct ChromaSDK::Mouse::STATIC_EFFECT_TYPE *)pParam;
-
-		unsigned char blue = GetBValue(static_effect->Color);
-		unsigned char green = GetGValue(static_effect->Color);
-		unsigned char red = GetRValue(static_effect->Color);
-
-		if (static_effect->LEDId == ChromaSDK::Mouse::RZLED::RZLED_LOGO || static_effect->LEDId == ChromaSDK::Mouse::RZLED::RZLED_ALL)
+		struct ChromaSDK::Mouse::STATIC_EFFECT_TYPE *
+			static_effect =
+			(struct ChromaSDK::Mouse::STATIC_EFFECT_TYPE *) pParam;
+
+		unsigned char
+			blue = GetBValue (static_effect->Color);
+		unsigned char
+			green = GetGValue (static_effect->Color);
+		unsigned char
+			red = GetRValue (static_effect->Color);
+
+		if (static_effect->LEDId == ChromaSDK::Mouse::RZLED::RZLED_LOGO
+			|| static_effect->LEDId == ChromaSDK::Mouse::RZLED::RZLED_ALL)
 		{
 			if (current_peripheral[0] != blue ||
-				current_peripheral[1] != green ||
-				current_peripheral[2] != red
-				)
+				current_peripheral[1] != green || current_peripheral[2] != red)
 				requiresUpdate = true;
 
 			return_effect.peripheral[0] = blue;
 			return_effect.peripheral[1] = green;
 			return_effect.peripheral[2] = red;
-			return_effect.peripheral[3] = (char)255;
+			return_effect.peripheral[3] = (char) 255;
 		}
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_STATIC" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_STATIC" << "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_BLINKING)
 	{
-		struct ChromaSDK::Mouse::BLINKING_EFFECT_TYPE *blinking_effect = (struct ChromaSDK::Mouse::BLINKING_EFFECT_TYPE *)pParam;
-
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(blinking_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(blinking_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(blinking_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_BLINKING" << "\"";
+		struct ChromaSDK::Mouse::BLINKING_EFFECT_TYPE *
+			blinking_effect =
+			(struct ChromaSDK::Mouse::BLINKING_EFFECT_TYPE *) pParam;
+
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (blinking_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (blinking_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (blinking_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_BLINKING" << "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_NONE)
 	{
 		if (current_peripheral[0] != 0 ||
-			current_peripheral[1] != 0 ||
-			current_peripheral[2] != 0
-			)
+			current_peripheral[1] != 0 || current_peripheral[2] != 0)
 			requiresUpdate = true;
 
-		return_effect.peripheral[0] = (char)0;
-		return_effect.peripheral[1] = (char)0;
-		return_effect.peripheral[2] = (char)0;
-		return_effect.peripheral[3] = (char)255;
+		return_effect.peripheral[0] = (char) 0;
+		return_effect.peripheral[1] = (char) 0;
+		return_effect.peripheral[2] = (char) 0;
+		return_effect.peripheral[3] = (char) 255;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_NONE" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_NONE"
+			<< "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_CUSTOM)
 	{
-		struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE *custom_effect = (struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE *)pParam;
-
-		unsigned char blue = GetBValue(custom_effect->Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
-		unsigned char green = GetGValue(custom_effect->Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
-		unsigned char red = GetRValue(custom_effect->Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
+		struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE *
+			custom_effect =
+			(struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE *) pParam;
+
+		unsigned char
+			blue =
+			GetBValue (custom_effect->
+					   Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
+		unsigned char
+			green =
+			GetGValue (custom_effect->
+					   Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
+		unsigned char
+			red =
+			GetRValue (custom_effect->
+					   Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
 
 		if (current_peripheral[0] != blue ||
-			current_peripheral[1] != green ||
-			current_peripheral[2] != red
-			)
+			current_peripheral[1] != green || current_peripheral[2] != red)
 			requiresUpdate = true;
 
 		return_effect.peripheral[0] = blue;
 		return_effect.peripheral[1] = green;
 		return_effect.peripheral[2] = red;
-		return_effect.peripheral[3] = (char)255;
+		return_effect.peripheral[3] = (char) 255;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_CUSTOM" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_CUSTOM" << "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_BREATHING)
 	{
-		struct ChromaSDK::Mouse::BREATHING_EFFECT_TYPE *breathing_effect = (struct ChromaSDK::Mouse::BREATHING_EFFECT_TYPE *)pParam;
-
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"red_end\": " << "\"" << GetRValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\"green_end\": " << "\"" << GetGValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\blue_end\": " << "\"" << GetBValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_BREATHING" << "\"" << ',';
+		struct ChromaSDK::Mouse::BREATHING_EFFECT_TYPE *
+			breathing_effect =
+			(struct ChromaSDK::Mouse::BREATHING_EFFECT_TYPE *) pParam;
+
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"red_end\": " << "\"" <<
+			GetRValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\"green_end\": " << "\"" <<
+			GetGValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\blue_end\": " << "\"" <<
+			GetBValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_BREATHING" << "\"" << ',';
 
 		switch (breathing_effect->Type)
 		{
 		case ChromaSDK::Mouse::BREATHING_EFFECT_TYPE::Type::ONE_COLOR:
-			additional_effect_data << "\"effect_config\": " << "\"" << "TWO_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"TWO_COLORS" << "\"";
 			break;
 		case ChromaSDK::Mouse::BREATHING_EFFECT_TYPE::Type::TWO_COLORS:
-			additional_effect_data << "\"effect_config\": " << "\"" << "TWO_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"TWO_COLORS" << "\"";
 			break;
 		case ChromaSDK::Mouse::BREATHING_EFFECT_TYPE::Type::RANDOM_COLORS:
-			additional_effect_data << "\"effect_config\": " << "\"" << "RANDOM_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"RANDOM_COLORS" << "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "INVALID" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"INVALID" << "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_REACTIVE)
 	{
-		struct ChromaSDK::Mouse::REACTIVE_EFFECT_TYPE *reactive_effect = (struct ChromaSDK::Mouse::REACTIVE_EFFECT_TYPE *)pParam;
-
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_REACTIVE" << "\"" << ',';
+		struct ChromaSDK::Mouse::REACTIVE_EFFECT_TYPE *
+			reactive_effect =
+			(struct ChromaSDK::Mouse::REACTIVE_EFFECT_TYPE *) pParam;
+
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_REACTIVE" << "\"" << ',';
 
 		switch (reactive_effect->Duration)
 		{
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_SHORT:
-			additional_effect_data << "\"effect_config\": " << "\"" << "SHORT" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "SHORT"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_MEDIUM:
-			additional_effect_data << "\"effect_config\": " << "\"" << "MEDIUM" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "MEDIUM"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_LONG:
-			additional_effect_data << "\"effect_config\": " << "\"" << "LONG" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "LONG"
+				<< "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "NONE" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "NONE"
+				<< "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_SPECTRUMCYCLING)
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_SPECTRUMCYCLING" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_SPECTRUMCYCLING" << "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_WAVE)
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_WAVE" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_WAVE"
+			<< "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_CUSTOM2)
 	{
-		struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE2 *custom_effect = (struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE2 *)pParam;
-
-		unsigned char blue = GetBValue(custom_effect->Color[HIBYTE(ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE(ChromaSDK::Mouse::RZLED2_LOGO)]);
-		unsigned char green = GetGValue(custom_effect->Color[HIBYTE(ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE(ChromaSDK::Mouse::RZLED2_LOGO)]);
-		unsigned char red = GetRValue(custom_effect->Color[HIBYTE(ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE(ChromaSDK::Mouse::RZLED2_LOGO)]);
+		struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE2 *
+			custom_effect =
+			(struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE2 *) pParam;
+
+		unsigned char
+			blue =
+			GetBValue (custom_effect->
+					   Color[HIBYTE (ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE
+																	 (ChromaSDK::
+																	  Mouse::
+																	  RZLED2_LOGO)]);
+		unsigned char
+			green =
+			GetGValue (custom_effect->
+					   Color[HIBYTE (ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE
+																	 (ChromaSDK::
+																	  Mouse::
+																	  RZLED2_LOGO)]);
+		unsigned char
+			red =
+			GetRValue (custom_effect->
+					   Color[HIBYTE (ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE
+																	 (ChromaSDK::
+																	  Mouse::
+																	  RZLED2_LOGO)]);
 
 		if (current_peripheral[0] != blue ||
-			current_peripheral[1] != green ||
-			current_peripheral[2] != red
-			)
+			current_peripheral[1] != green || current_peripheral[2] != red)
 			requiresUpdate = true;
 
 		return_effect.peripheral[0] = blue;
 		return_effect.peripheral[1] = green;
 		return_effect.peripheral[2] = red;
-		return_effect.peripheral[3] = (char)255;
+		return_effect.peripheral[3] = (char) 255;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_CUSTOM2" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_CUSTOM2" << "\"";
 	}
 	else
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_INVALID" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_INVALID" << "\"";
 	}
 
 	std::stringstream ss;
@@ -1328,31 +1416,38 @@ WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM
 	ss << "\"command_data\": {";
 
 	ss << "\"custom_mode\": " << 0;
-	ss << additional_effect_data.str();
+	ss << additional_effect_data.str ();
 	ss << '}';
 
-	return_effect.command_cargo = ss.str();
+	return_effect.command_cargo = ss.str ();
 
 	return return_effect;
 }
 
 #ifdef __cplusplus
-extern "C" {
+extern
+	"C"
+{
 #endif
 
-	__declspec(dllexport) RZRESULT Init()
+	__declspec (dllexport) RZRESULT
+	Init ()
 	{
-		write_text_to_log_file("Call, Init()");
+		write_text_to_log_file ("Call, Init()");
 
 		if (!isInitialized)
 		{
 			//Get Application name
-			CHAR pBuf[MAX_PATH];
-			int bytes = GetModuleFileNameA(NULL, pBuf, MAX_PATH);
-			std::string filepath = pBuf;
-
-			int fn_beginning = 0;
-			for (int chr_pos = strlen(pBuf) - 1; chr_pos > -1; chr_pos--)
+			CHAR
+				pBuf[MAX_PATH];
+			int
+				bytes = GetModuleFileNameA (NULL, pBuf, MAX_PATH);
+			std::string
+				filepath = pBuf;
+
+			int
+				fn_beginning = 0;
+			for (int chr_pos = strlen (pBuf) - 1; chr_pos > -1; chr_pos--)
 			{
 				if (pBuf[chr_pos] == '\\')
 				{
@@ -1361,41 +1456,44 @@ extern "C" {
 				}
 			}
 
-			program_name = filepath.substr(fn_beginning);
+			program_name = filepath.substr (fn_beginning);
 
 			//Connect to the server pipe using CreateFile()
-			hPipe = CreateFile(
-				PIPE_NAME,   // pipe name 
-				GENERIC_WRITE,  // write access 
-				0,              // no sharing 
-				NULL,           // default security attributes
-				OPEN_EXISTING,  // opens existing pipe 
-				0,              // default attributes 
-				NULL);          // no template file 
+			hPipe = CreateFile (PIPE_NAME,	// pipe name 
+								GENERIC_WRITE,	// write access 
+								0,	// no sharing 
+								NULL,	// default security attributes
+								OPEN_EXISTING,	// opens existing pipe 
+								0,	// default attributes 
+								NULL);	// no template file 
 
 			if (hPipe == NULL || hPipe == INVALID_HANDLE_VALUE)
 			{
-				DWORD last_error = GetLastError();
+				DWORD
+					last_error = GetLastError ();
 
 				switch (last_error)
 				{
 				case ERROR_PIPE_BUSY:
-					write_text_to_log_file("Pipe error, ERROR_PIPE_BUSY");
+					write_text_to_log_file ("Pipe error, ERROR_PIPE_BUSY");
 					break;
 				case ERROR_PIPE_CONNECTED:
-					write_text_to_log_file("Pipe error, ERROR_PIPE_CONNECTED");
+					write_text_to_log_file
+						("Pipe error, ERROR_PIPE_CONNECTED");
 					break;
 				case ERROR_PIPE_LISTENING:
-					write_text_to_log_file("Pipe error, ERROR_PIPE_LISTENING");
+					write_text_to_log_file
+						("Pipe error, ERROR_PIPE_LISTENING");
 					break;
 				case ERROR_PIPE_LOCAL:
-					write_text_to_log_file("Pipe error, ERROR_PIPE_LOCAL");
+					write_text_to_log_file ("Pipe error, ERROR_PIPE_LOCAL");
 					break;
 				case ERROR_PIPE_NOT_CONNECTED:
-					write_text_to_log_file("Pipe error, ERROR_PIPE_NOT_CONNECTED");
+					write_text_to_log_file
+						("Pipe error, ERROR_PIPE_NOT_CONNECTED");
 					break;
 				default:
-					write_text_to_log_file("Non-pipe related error");
+					write_text_to_log_file ("Non-pipe related error");
 					break;
 				}
 
@@ -1408,31 +1506,35 @@ extern "C" {
 			return RZRESULT_ALREADY_INITIALIZED;
 		}
 
-		write_text_to_log_file("Initialized Successfully");
+		write_text_to_log_file ("Initialized Successfully");
 
 		isInitialized = true;
 		return RZRESULT_SUCCESS;
 	}
 
-	__declspec(dllexport) RZRESULT UnInit()
+	__declspec (dllexport) RZRESULT
+	UnInit ()
 	{
 		if (isInitialized && (hPipe != NULL && hPipe != INVALID_HANDLE_VALUE))
-			CloseHandle(hPipe);
+			CloseHandle (hPipe);
 
 		isInitialized = false;
 		return RZRESULT_SUCCESS;
 	}
 
-	__declspec(dllexport) RZRESULT CreateEffect(RZDEVICEID DeviceId, ChromaSDK::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateEffect (RZDEVICEID DeviceId, ChromaSDK::EFFECT_TYPE Effect,
+				  PRZPARAM pParam, RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
-			WRAPPER_EFFECT createdEffect;
+			WRAPPER_EFFECT
+				createdEffect;
 
 			if (DeviceId == ChromaSDK::BLACKWIDOW_CHROMA)
 			{
 				ChromaSDK::Keyboard::EFFECT_TYPE kbType;
-				
+
 				switch (Effect)
 				{
 				case ChromaSDK::CHROMA_NONE:
@@ -1442,10 +1544,13 @@ extern "C" {
 					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_WAVE;
 					break;
 				case ChromaSDK::CHROMA_SPECTRUMCYCLING:
-					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_SPECTRUMCYCLING;
+					kbType =
+						ChromaSDK::Keyboard::EFFECT_TYPE::
+						CHROMA_SPECTRUMCYCLING;
 					break;
 				case ChromaSDK::CHROMA_BREATHING:
-					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_BREATHING;
+					kbType =
+						ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_BREATHING;
 					break;
 				case ChromaSDK::CHROMA_REACTIVE:
 					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_REACTIVE;
@@ -1457,14 +1562,15 @@ extern "C" {
 					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_CUSTOM;
 					break;
 				case ChromaSDK::CHROMA_STARLIGHT:
-					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_STARLIGHT;
+					kbType =
+						ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_STARLIGHT;
 					break;
 				default:
 					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_INVALID;
 					break;
 				}
-				
-				createdEffect = HandleKeyboardEffect(kbType, pParam);
+
+				createdEffect = HandleKeyboardEffect (kbType, pParam);
 			}
 			else if (DeviceId == ChromaSDK::DEATHADDER_CHROMA)
 			{
@@ -1479,10 +1585,12 @@ extern "C" {
 					mouseType = ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_WAVE;
 					break;
 				case ChromaSDK::CHROMA_SPECTRUMCYCLING:
-					mouseType = ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_SPECTRUMCYCLING;
+					mouseType =
+						ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_SPECTRUMCYCLING;
 					break;
 				case ChromaSDK::CHROMA_BREATHING:
-					mouseType = ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_BREATHING;
+					mouseType =
+						ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_BREATHING;
 					break;
 				case ChromaSDK::CHROMA_BLINKING:
 					mouseType = ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_BLINKING;
@@ -1500,8 +1608,8 @@ extern "C" {
 					mouseType = ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_INVALID;
 					break;
 				}
-				
-				createdEffect = HandleMouseEffect(mouseType, pParam);
+
+				createdEffect = HandleMouseEffect (mouseType, pParam);
 			}
 			else
 			{
@@ -1510,12 +1618,12 @@ extern "C" {
 
 			if (pEffectId == NULL)
 			{
-				WriteToPipe(createdEffect);
+				WriteToPipe (createdEffect);
 			}
 			else
 			{
 				if (*pEffectId == GUID_NULL)
-					CoCreateGuid(pEffectId);
+					CoCreateGuid (pEffectId);
 
 				effects[*pEffectId] = createdEffect;
 			}
@@ -1528,22 +1636,25 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateKeyboardEffect (ChromaSDK::Keyboard::EFFECT_TYPE Effect,
+						  PRZPARAM pParam, RZEFFECTID * pEffectId)
 	{
-		write_text_to_log_file("Call, CreateKeyboardEffect()");
+		write_text_to_log_file ("Call, CreateKeyboardEffect()");
 
 		if (isInitialized)
 		{
-			WRAPPER_EFFECT kbEffect = HandleKeyboardEffect(Effect, pParam);
+			WRAPPER_EFFECT
+				kbEffect = HandleKeyboardEffect (Effect, pParam);
 
 			if (pEffectId == NULL)
 			{
-				WriteToPipe(kbEffect);
+				WriteToPipe (kbEffect);
 			}
 			else
 			{
 				if (*pEffectId == GUID_NULL)
-					CoCreateGuid(pEffectId);
+					CoCreateGuid (pEffectId);
 
 				effects[*pEffectId] = kbEffect;
 			}
@@ -1556,41 +1667,43 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateHeadsetEffect(ChromaSDK::Headset::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateHeadsetEffect (ChromaSDK::Headset::EFFECT_TYPE Effect,
+						 PRZPARAM pParam, RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
 			// Not Implemented
 
 			/*
-			switch (Effect)
-			{
-			case ChromaSDK::Headset::CHROMA_NONE:
-				break;
-			case ChromaSDK::Headset::CHROMA_STATIC:
-				break;
-			case ChromaSDK::Headset::CHROMA_BREATHING:
-				break;
-			case ChromaSDK::Headset::CHROMA_SPECTRUMCYCLING:
-				break;
-			case ChromaSDK::Headset::CHROMA_CUSTOM:
-				break;
-			case ChromaSDK::Headset::CHROMA_INVALID:
-				break;
-			default:
-				break;
-			}
-
-			std::stringstream ss;
-			ss << "\"command\": " << "\"CreateHeadsetEffect\"" << ',';
-			ss << "\"command_data\": {";
-
-			ss << "\"custom_mode\": " << 0;
-
-			ss << '}';
-
-			WriteToPipe(current_bitmap, ss.str());
-			*/
+			   switch (Effect)
+			   {
+			   case ChromaSDK::Headset::CHROMA_NONE:
+			   break;
+			   case ChromaSDK::Headset::CHROMA_STATIC:
+			   break;
+			   case ChromaSDK::Headset::CHROMA_BREATHING:
+			   break;
+			   case ChromaSDK::Headset::CHROMA_SPECTRUMCYCLING:
+			   break;
+			   case ChromaSDK::Headset::CHROMA_CUSTOM:
+			   break;
+			   case ChromaSDK::Headset::CHROMA_INVALID:
+			   break;
+			   default:
+			   break;
+			   }
+
+			   std::stringstream ss;
+			   ss << "\"command\": " << "\"CreateHeadsetEffect\"" << ',';
+			   ss << "\"command_data\": {";
+
+			   ss << "\"custom_mode\": " << 0;
+
+			   ss << '}';
+
+			   WriteToPipe(current_bitmap, ss.str());
+			 */
 			return RZRESULT_SUCCESS;
 		}
 		else
@@ -1599,33 +1712,35 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateMousepadEffect(ChromaSDK::Mousepad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateMousepadEffect (ChromaSDK::Mousepad::EFFECT_TYPE Effect,
+						  PRZPARAM pParam, RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
 			// Not Implemented
 
 			/*
-			switch (Effect)
-			{
-			case ChromaSDK::Mousepad::CHROMA_NONE:
-				break;
-			case ChromaSDK::Mousepad::CHROMA_BREATHING:
-				break;
-			case ChromaSDK::Mousepad::CHROMA_CUSTOM:
-				break;
-			case ChromaSDK::Mousepad::CHROMA_SPECTRUMCYCLING:
-				break;
-			case ChromaSDK::Mousepad::CHROMA_STATIC:
-				break;
-			case ChromaSDK::Mousepad::CHROMA_WAVE:
-				break;
-			case ChromaSDK::Mousepad::CHROMA_INVALID:
-				break;
-			default:
-				break;
-			}
-			*/
+			   switch (Effect)
+			   {
+			   case ChromaSDK::Mousepad::CHROMA_NONE:
+			   break;
+			   case ChromaSDK::Mousepad::CHROMA_BREATHING:
+			   break;
+			   case ChromaSDK::Mousepad::CHROMA_CUSTOM:
+			   break;
+			   case ChromaSDK::Mousepad::CHROMA_SPECTRUMCYCLING:
+			   break;
+			   case ChromaSDK::Mousepad::CHROMA_STATIC:
+			   break;
+			   case ChromaSDK::Mousepad::CHROMA_WAVE:
+			   break;
+			   case ChromaSDK::Mousepad::CHROMA_INVALID:
+			   break;
+			   default:
+			   break;
+			   }
+			 */
 
 			return RZRESULT_SUCCESS;
 		}
@@ -1635,20 +1750,23 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateMouseEffect (ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam,
+					   RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
-			WRAPPER_EFFECT mouseEffect = HandleMouseEffect(Effect, pParam);
+			WRAPPER_EFFECT
+				mouseEffect = HandleMouseEffect (Effect, pParam);
 
 			if (pEffectId == NULL)
 			{
-				WriteToPipe(mouseEffect);
+				WriteToPipe (mouseEffect);
 			}
 			else
 			{
 				if (*pEffectId == GUID_NULL)
-					CoCreateGuid(pEffectId);
+					CoCreateGuid (pEffectId);
 
 				effects[*pEffectId] = mouseEffect;
 			}
@@ -1661,35 +1779,37 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateKeypadEffect(ChromaSDK::Keypad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateKeypadEffect (ChromaSDK::Keypad::EFFECT_TYPE Effect, PRZPARAM pParam,
+						RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
 			// Not Implemented
 
 			/*
-			switch (Effect)
-			{
-			case ChromaSDK::Keypad::CHROMA_NONE:
-				break;
-			case ChromaSDK::Keypad::CHROMA_BREATHING:
-				break;
-			case ChromaSDK::Keypad::CHROMA_CUSTOM:
-				break;
-			case ChromaSDK::Keypad::CHROMA_REACTIVE:
-				break;
-			case ChromaSDK::Keypad::CHROMA_SPECTRUMCYCLING:
-				break;
-			case ChromaSDK::Keypad::CHROMA_STATIC:
-				break;
-			case ChromaSDK::Keypad::CHROMA_WAVE:
-				break;
-			case ChromaSDK::Keypad::CHROMA_INVALID:
-				break;
-			default:
-				break;
-			}
-			*/
+			   switch (Effect)
+			   {
+			   case ChromaSDK::Keypad::CHROMA_NONE:
+			   break;
+			   case ChromaSDK::Keypad::CHROMA_BREATHING:
+			   break;
+			   case ChromaSDK::Keypad::CHROMA_CUSTOM:
+			   break;
+			   case ChromaSDK::Keypad::CHROMA_REACTIVE:
+			   break;
+			   case ChromaSDK::Keypad::CHROMA_SPECTRUMCYCLING:
+			   break;
+			   case ChromaSDK::Keypad::CHROMA_STATIC:
+			   break;
+			   case ChromaSDK::Keypad::CHROMA_WAVE:
+			   break;
+			   case ChromaSDK::Keypad::CHROMA_INVALID:
+			   break;
+			   default:
+			   break;
+			   }
+			 */
 			return RZRESULT_SUCCESS;
 		}
 		else
@@ -1698,14 +1818,15 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT SetEffect(RZEFFECTID EffectId)
+	__declspec (dllexport) RZRESULT
+	SetEffect (RZEFFECTID EffectId)
 	{
 		if (isInitialized)
 		{
-			if (EffectId != GUID_NULL && effects.count(EffectId) != 0)
+			if (EffectId != GUID_NULL && effects.count (EffectId) != 0)
 			{
 				requiresUpdate = true;
-				WriteToPipe(effects[EffectId]);
+				WriteToPipe (effects[EffectId]);
 			}
 
 			return RZRESULT_SUCCESS;
@@ -1716,12 +1837,13 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT DeleteEffect(RZEFFECTID EffectId)
+	__declspec (dllexport) RZRESULT
+	DeleteEffect (RZEFFECTID EffectId)
 	{
 		if (isInitialized)
 		{
-			if (EffectId != GUID_NULL && effects.count(EffectId) != 0)
-				effects.erase(EffectId);
+			if (EffectId != GUID_NULL && effects.count (EffectId) != 0)
+				effects.erase (EffectId);
 
 			return RZRESULT_SUCCESS;
 		}
@@ -1731,7 +1853,8 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT RegisterEventNotification(HWND hWnd)
+	__declspec (dllexport) RZRESULT
+	RegisterEventNotification (HWND hWnd)
 	{
 		if (isInitialized)
 		{
@@ -1745,7 +1868,8 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT UnregisterEventNotification(HWND hWnd)
+	__declspec (dllexport) RZRESULT
+	UnregisterEventNotification (HWND hWnd)
 	{
 		if (isInitialized)
 		{
@@ -1759,14 +1883,17 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT QueryDevice(RZDEVICEID DeviceId, ChromaSDK::DEVICE_INFO_TYPE &DeviceInfo)
+	__declspec (dllexport) RZRESULT
+	QueryDevice (RZDEVICEID DeviceId, ChromaSDK::DEVICE_INFO_TYPE & DeviceInfo)
 	{
 		if (isInitialized)
 		{
 			if (DeviceId == ChromaSDK::BLACKWIDOW_CHROMA)
-				DeviceInfo.DeviceType = ChromaSDK::DEVICE_INFO_TYPE::DeviceType::DEVICE_KEYBOARD;
+				DeviceInfo.DeviceType =
+					ChromaSDK::DEVICE_INFO_TYPE::DeviceType::DEVICE_KEYBOARD;
 			else if (DeviceId == ChromaSDK::DEATHADDER_CHROMA)
-				DeviceInfo.DeviceType = ChromaSDK::DEVICE_INFO_TYPE::DeviceType::DEVICE_MOUSE;
+				DeviceInfo.DeviceType =
+					ChromaSDK::DEVICE_INFO_TYPE::DeviceType::DEVICE_MOUSE;
 			else
 			{
 				DeviceInfo.Connected = 0;
@@ -1803,4 +1930,4 @@ CreateMousepadEffect
 CreateKeypadEffect
 QueryDevice
 EnumDevice
-*/
\ No newline at end of file
+*/
diff --git a/Aurora-RazerLEDWrapper/stdafx.h b/Aurora-RazerLEDWrapper/stdafx.h
index f3a0737..8e634bc 100644
--- a/Aurora-RazerLEDWrapper/stdafx.h
+++ b/Aurora-RazerLEDWrapper/stdafx.h
@@ -7,10 +7,8 @@
 
 #include "targetver.h"
 
-#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers
+#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
 // Windows Header Files:
 #include <windows.h>
 
-
-
 // TODO: reference additional headers your program requires here
