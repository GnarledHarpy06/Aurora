diff --git a/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.cpp b/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.cpp
index 2cb3134..73e6a02 100644
--- a/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.cpp
+++ b/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.cpp
@@ -9,7 +8,8 @@
 AURORALEAGUELOGILEDWRAPPER_API int nAuroraLeagueLogiLEDWrapper = 0;
 
 // This is an example of an exported function.
-AURORALEAGUELOGILEDWRAPPER_API int fnAuroraLeagueLogiLEDWrapper(void)
+AURORALEAGUELOGILEDWRAPPER_API int
+fnAuroraLeagueLogiLEDWrapper (void)
 {
 	return 42;
 }
diff --git a/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.h b/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.h
index c04f7f6..3d80a26 100644
--- a/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.h
+++ b/Aurora-LeagueLogiLEDWrapper/Aurora-LeagueLogiLEDWrapper.h
@@ -11,7 +11,8 @@
 #endif
 
 // This class is exported from the Aurora-LeagueLogiLEDWrapper.dll
-class AURORALEAGUELOGILEDWRAPPER_API CAuroraLeagueLogiLEDWrapper {
+class AURORALEAGUELOGILEDWRAPPER_API CAuroraLeagueLogiLEDWrapper
+{
   public:
 	CAuroraLeagueLogiLEDWrapper (void);
 	// TODO: add your methods here.
diff --git a/Aurora-LeagueLogiLEDWrapper/dllmain.cpp b/Aurora-LeagueLogiLEDWrapper/dllmain.cpp
index 8893188..8965ee4 100644
--- a/Aurora-LeagueLogiLEDWrapper/dllmain.cpp
+++ b/Aurora-LeagueLogiLEDWrapper/dllmain.cpp
@@ -15,12 +15,12 @@ static bool isInitialized = false;
 
 static unsigned char current_bitmap[LOGI_LED_BITMAP_SIZE];
 
-static std::string program_name;
+static
+	std::string
+	program_name;
 
-BOOL WINAPI DllMain(HMODULE hModule,
-	DWORD  ul_reason_for_call,
-	LPVOID lpReserved
-	)
+BOOL WINAPI
+DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
 {
 	switch (ul_reason_for_call)
 	{
@@ -33,8 +33,8 @@ BOOL WINAPI DllMain(HMODULE hModule,
 	return TRUE;
 }
 
-
-bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
+bool
+WriteToPipe (unsigned char bitmap[], std::string command_cargo)
 {
 	if (!isInitialized)
 		return false;
@@ -43,7 +43,8 @@ bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
 	std::stringstream ss;
 
 	ss << '{';
-	ss << "\"provider\": {\"name\": \"" << program_name << "\", \"appid\": 0},";
+	ss << "\"provider\": {\"name\": \"" << program_name <<
+		"\", \"appid\": 0},";
 	ss << command_cargo << ',';
 	ss << "\"bitmap\": [";
 	for (int bitm_pos = 0; bitm_pos < LOGI_LED_BITMAP_SIZE; bitm_pos++)
@@ -62,11 +63,9 @@ bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
 	{
 		//Try to gestore handle
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
 							GENERIC_READ |	// read and write access 
-			GENERIC_WRITE,
-			0,              // no sharing 
+							GENERIC_WRITE, 0,	// no sharing 
 							NULL,	// default security attributes
 							OPEN_EXISTING,	// opens existing pipe 
 							0,	// default attributes 
@@ -78,10 +77,11 @@ bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
 		}
 	}
 
-	DWORD cbBytes;
+	DWORD
+		cbBytes;
 
-	BOOL bResult = WriteFile(
-		hPipe,                // handle to pipe 
+	BOOL
+		bResult = WriteFile (hPipe,	// handle to pipe 
 							 ss.str ().c_str (),	// buffer to write from 
 							 strlen (ss.str ().c_str ()),	// number of bytes to write, include the NULL
 							 &cbBytes,	// number of bytes written 
@@ -100,16 +100,20 @@ bool WriteToPipe(unsigned char bitmap[], std::string command_cargo)
 	return false;
 }
 
-bool LogiLedInit()
+bool
+LogiLedInit ()
 {
 	if (!isInitialized)
 	{
 		//Get Application name
-		CHAR pBuf[MAX_PATH];
-		int bytes = GetModuleFileNameA(NULL, pBuf, MAX_PATH);
+		CHAR
+			pBuf[MAX_PATH];
+		int
+			bytes = GetModuleFileNameA (NULL, pBuf, MAX_PATH);
 		std::string filepath = pBuf;
 
-		int fn_beginning = 0;
+		int
+			fn_beginning = 0;
 		for (int chr_pos = strlen (pBuf) - 1; chr_pos > -1; chr_pos--)
 		{
 			if (pBuf[chr_pos] == '\\')
@@ -122,11 +126,9 @@ bool LogiLedInit()
 		program_name = filepath.substr (fn_beginning);
 
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
 							GENERIC_READ |	// read and write access 
-			GENERIC_WRITE,
-			0,              // no sharing 
+							GENERIC_WRITE, 0,	// no sharing 
 							NULL,	// default security attributes
 							OPEN_EXISTING,	// opens existing pipe 
 							0,	// default attributes 
@@ -143,12 +145,14 @@ bool LogiLedInit()
 	return true;
 }
 
-bool LogiLedSaveCurrentLighting(int deviceType)
+bool
+LogiLedSaveCurrentLighting (int deviceType)
 {
 	return isInitialized;
 }
 
-int LogiLedGetCurrentBrightnessPercentage(int deviceType)
+int
+LogiLedGetCurrentBrightnessPercentage (int deviceType)
 {
 	if (deviceType == LOGITECH_LED_KEYBOARD || deviceType == LOGITECH_LED_ALL)
 		return ((int) current_bitmap[3] / (float) 255) * 100;
@@ -156,14 +160,23 @@ int LogiLedGetCurrentBrightnessPercentage(int deviceType)
 		return 100;
 }
 
-bool LogiLedSetLighting(int deviceType, int redPercentage, int greenPercentage, int bluePercentage, int brightnessPercentage)
+bool
+LogiLedSetLighting (int deviceType, int redPercentage, int greenPercentage,
+					int bluePercentage, int brightnessPercentage)
 {
-	unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
-	unsigned char brightnessValue = (unsigned char)((brightnessPercentage / 100.0f) * 255);
-
-	if (isInitialized && (deviceType == LOGITECH_LED_KEYBOARD || deviceType == LOGITECH_LED_ALL))
+	unsigned char
+		redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+	unsigned char
+		greenValue = (unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char
+		blueValue = (unsigned char) ((bluePercentage / 100.0f) * 255);
+	unsigned char
+		brightnessValue =
+		(unsigned char) ((brightnessPercentage / 100.0f) * 255);
+
+	if (isInitialized
+		&& (deviceType == LOGITECH_LED_KEYBOARD
+			|| deviceType == LOGITECH_LED_ALL))
 	{
 		for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
 		{
@@ -185,18 +198,25 @@ bool LogiLedSetLighting(int deviceType, int redPercentage, int greenPercentage,
 	return isInitialized;
 }
 
-bool LogiLedRestoreLighting()
+bool
+LogiLedRestoreLighting ()
 {
 	return isInitialized;
 }
 
-bool LogiLedFlashLighting(int deviceType, int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+bool
+LogiLedFlashLighting (int deviceType, int redPercentage, int greenPercentage,
+					  int bluePercentage, int milliSecondsDuration,
+					  int milliSecondsInterval)
 {
 	if (deviceType == LOGITECH_LED_KEYBOARD || deviceType == LOGITECH_LED_ALL)
 	{
-		unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-		unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-		unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+		unsigned char
+			redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+		unsigned char
+			greenValue = (unsigned char) ((greenPercentage / 100.0f) * 255);
+		unsigned char
+			blueValue = (unsigned char) ((bluePercentage / 100.0f) * 255);
 
 		std::stringstream ss;
 		ss << "\"command\": " << "\"FlashLighting\"" << ',';
@@ -216,13 +236,19 @@ bool LogiLedFlashLighting(int deviceType, int redPercentage, int greenPercentage
 	return isInitialized;
 }
 
-bool LogiLedPulseLighting(int deviceType, int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+bool
+LogiLedPulseLighting (int deviceType, int redPercentage, int greenPercentage,
+					  int bluePercentage, int milliSecondsDuration,
+					  int milliSecondsInterval)
 {
 	if (deviceType == LOGITECH_LED_KEYBOARD || deviceType == LOGITECH_LED_ALL)
 	{
-		unsigned char redValue = (unsigned char)((redPercentage / 100.0f) * 255);
-		unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-		unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+		unsigned char
+			redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
+		unsigned char
+			greenValue = (unsigned char) ((greenPercentage / 100.0f) * 255);
+		unsigned char
+			blueValue = (unsigned char) ((bluePercentage / 100.0f) * 255);
 
 		std::stringstream ss;
 		ss << "\"command\": " << "\"PulseLighting\"" << ',';
@@ -242,7 +268,8 @@ bool LogiLedPulseLighting(int deviceType, int redPercentage, int greenPercentage
 	return isInitialized;
 }
 
-void LogiLedShutdown()
+void
+LogiLedShutdown ()
 {
 	if (isInitialized)
 	{
diff --git a/Aurora-LightFXWrapper/Aurora-LightFXWrapper.cpp b/Aurora-LightFXWrapper/Aurora-LightFXWrapper.cpp
index ea1dc19..d0de3a8 100644
--- a/Aurora-LightFXWrapper/Aurora-LightFXWrapper.cpp
+++ b/Aurora-LightFXWrapper/Aurora-LightFXWrapper.cpp
@@ -9,7 +8,8 @@
 AURORALIGHTFXWRAPPER_API int nAuroraLightFXWrapper = 0;
 
 // This is an example of an exported function.
-AURORALIGHTFXWRAPPER_API int fnAuroraLightFXWrapper(void)
+AURORALIGHTFXWRAPPER_API int
+fnAuroraLightFXWrapper (void)
 {
 	return 42;
 }
diff --git a/Aurora-LightFXWrapper/Aurora-LightFXWrapper.h b/Aurora-LightFXWrapper/Aurora-LightFXWrapper.h
index bc84fe8..8d8f2e8 100644
--- a/Aurora-LightFXWrapper/Aurora-LightFXWrapper.h
+++ b/Aurora-LightFXWrapper/Aurora-LightFXWrapper.h
@@ -11,7 +11,8 @@
 #endif
 
 // This class is exported from the Aurora-LightFXWrapper.dll
-class AURORALIGHTFXWRAPPER_API CAuroraLightFXWrapper {
+class AURORALIGHTFXWRAPPER_API CAuroraLightFXWrapper
+{
   public:
 	CAuroraLightFXWrapper (void);
 	// TODO: add your methods here.
diff --git a/Aurora-LightFXWrapper/LFX2.h b/Aurora-LightFXWrapper/LFX2.h
index 89d29fb..f23939a 100644
--- a/Aurora-LightFXWrapper/LFX2.h
+++ b/Aurora-LightFXWrapper/LFX2.h
@@ -45,7 +45,8 @@ is strictly forbidden.
 #endif // STDCALL_SUPPORTED
 
 #ifdef __cplusplus
-extern "C" {
+extern "C"
+{
 #endif
 
 	// LightFX 2.0 DLL export function declarations
@@ -156,7 +157,12 @@ extern "C" {
 	LFX_ERROR_BUFFSIZE if the buffer provided is too small.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetDeviceDescription(const unsigned int, char* const, const unsigned int, unsigned char* const);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetDeviceDescription (const unsigned
+															 int, char *const,
+															 const unsigned
+															 int,
+															 unsigned char
+															 *const);
 
 	/*********************************************************
 	Function: LFX_GetNumLights
@@ -170,7 +176,8 @@ extern "C" {
 	LFX_ERROR_NOLIGHTS if no lights are available at the device index provided.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumLights(const unsigned int, unsigned int* const);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumLights (const unsigned int,
+													 unsigned int *const);
 
 	/*********************************************************
 	Function: LFX_GetLightDescription
@@ -185,7 +192,11 @@ extern "C" {
 	LFX_ERROR_BUFFSIZE if the buffer provided is too small in size.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightDescription(const unsigned int, const unsigned int, char* const, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightDescription (const unsigned int,
+															const unsigned int,
+															char *const,
+															const unsigned
+															int);
 
 	/*********************************************************
 	Function: LFX_GetLightLocation
@@ -200,7 +211,9 @@ extern "C" {
 	LFX_ERROR_NOLIGHTS if no lights are available at the device and light index provided.
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightLocation(const unsigned int, const unsigned int, PLFX_POSITION const);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightLocation (const unsigned int,
+														 const unsigned int,
+														 PLFX_POSITION const);
 
 	/*********************************************************
 	Function: LFX_GetLightColor
@@ -220,7 +233,9 @@ extern "C" {
 	LFX_ERROR_NOLIGHTS if no lights are available at the device and light index provided.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightColor(const unsigned int, const unsigned int, PLFX_COLOR const);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightColor (const unsigned int,
+													  const unsigned int,
+													  PLFX_COLOR const);
 
 	/*********************************************************
 	Function: LFX_SetLightColor
@@ -236,7 +251,9 @@ extern "C" {
 	LFX_ERROR_NOINIT if the system is not yet initialized.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightColor(const unsigned int, const unsigned int, const PLFX_COLOR);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightColor (const unsigned int,
+													  const unsigned int,
+													  const PLFX_COLOR);
 
 	/*********************************************************
 	Function: LFX_Light
@@ -264,7 +281,8 @@ extern "C" {
 	LFX_FAILURE if some other error occurred
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Light(const unsigned int, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_Light (const unsigned int,
+											  const unsigned int);
 
 	/*********************************************************
 	Function: LFX_SetLightActionColor
@@ -281,7 +299,10 @@ extern "C" {
 	LFX_ERROR_NOINIT if the system is not yet initialized.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColor(const unsigned int, const unsigned int, const unsigned int, const PLFX_COLOR);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColor (const unsigned int,
+															const unsigned int,
+															const unsigned int,
+															const PLFX_COLOR);
 
 	/*********************************************************
 	Function: LFX_SetLightActionColorEx
@@ -298,7 +319,15 @@ extern "C" {
 	LFX_ERROR_NOINIT if the system is not yet initialized.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColorEx(const unsigned int, const unsigned int, const unsigned int, const PLFX_COLOR, const PLFX_COLOR);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColorEx (const unsigned
+															  int,
+															  const unsigned
+															  int,
+															  const unsigned
+															  int,
+															  const PLFX_COLOR,
+															  const
+															  PLFX_COLOR);
 
 	/*********************************************************
 	Function: LFX_ActionColor
@@ -326,7 +355,9 @@ extern "C" {
 	LFX_FAILURE if some other error occurred
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColor(const unsigned int, const unsigned int, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColor (const unsigned int,
+													const unsigned int,
+													const unsigned int);
 
 	/*********************************************************
 	Function: LFX_ActionColorEx
@@ -354,7 +385,10 @@ extern "C" {
 	LFX_FAILURE if some other error occurred
 	LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColorEx(const unsigned int, const unsigned int, const unsigned int, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColorEx (const unsigned int,
+													  const unsigned int,
+													  const unsigned int,
+													  const unsigned int);
 
 	/*********************************************************
 	Function: LFX_SetTiming
@@ -386,7 +420,8 @@ extern "C" {
 	LFX_ERROR_BUFFSIZE if the buffer provided is too small.
 	LFX_FAILURE or LFX_SUCCESS otherwise.
 	*********************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetVersion(char* const, const unsigned int);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetVersion (char *const,
+												   const unsigned int);
 
 #ifdef __cplusplus
 }								/* end extern "C" */
@@ -424,16 +459,34 @@ typedef LFX_RESULT(*LFX2RESET)();
 typedef LFX_RESULT (*LFX2UPDATE) ();
 typedef LFX_RESULT (*LFX2UPDATEDEFAULT) ();
 typedef LFX_RESULT (*LFX2GETNUMDEVICES) (unsigned int *const);
-typedef LFX_RESULT(*LFX2GETDEVDESC)(const unsigned int, char* const, const unsigned int, unsigned char* const);
-typedef LFX_RESULT(*LFX2GETNUMLIGHTS)(const unsigned int, unsigned int* const);
-typedef LFX_RESULT(*LFX2GETLIGHTDESC)(const unsigned int, const unsigned int, char* const, const unsigned int);
-typedef LFX_RESULT(*LFX2GETLIGHTLOC)(const unsigned int, const unsigned int, PLFX_POSITION const);
-typedef LFX_RESULT(*LFX2GETLIGHTCOL)(const unsigned int, const unsigned int, PLFX_COLOR const);
-typedef LFX_RESULT(*LFX2SETLIGHTCOL)(const unsigned int, const unsigned int, const PLFX_COLOR);
+typedef LFX_RESULT (*LFX2GETDEVDESC) (const unsigned int, char *const,
+									  const unsigned int,
+									  unsigned char *const);
+typedef LFX_RESULT (*LFX2GETNUMLIGHTS) (const unsigned int,
+										unsigned int *const);
+typedef LFX_RESULT (*LFX2GETLIGHTDESC) (const unsigned int, const unsigned int,
+										char *const, const unsigned int);
+typedef LFX_RESULT (*LFX2GETLIGHTLOC) (const unsigned int, const unsigned int,
+									   PLFX_POSITION const);
+typedef LFX_RESULT (*LFX2GETLIGHTCOL) (const unsigned int, const unsigned int,
+									   PLFX_COLOR const);
+typedef LFX_RESULT (*LFX2SETLIGHTCOL) (const unsigned int, const unsigned int,
+									   const PLFX_COLOR);
 typedef LFX_RESULT (*LFX2LIGHT) (const unsigned int, const unsigned int);
-typedef LFX_RESULT(*LFX2SETLIGHTACTIONCOLOR)(const unsigned int, const unsigned int, const unsigned int, const PLFX_COLOR);
-typedef LFX_RESULT(*LFX2SETLIGHTACTIONCOLOREX)(const unsigned int, const unsigned int, const unsigned int, const PLFX_COLOR, const PLFX_COLOR);
-typedef LFX_RESULT(*LFX2ACTIONCOLOR)(const unsigned int, const unsigned int, const unsigned int);
-typedef LFX_RESULT(*LFX2ACTIONCOLOREX)(const unsigned int, const unsigned int, const unsigned int, const unsigned int);
+typedef LFX_RESULT (*LFX2SETLIGHTACTIONCOLOR) (const unsigned int,
+											   const unsigned int,
+											   const unsigned int,
+											   const PLFX_COLOR);
+typedef LFX_RESULT (*LFX2SETLIGHTACTIONCOLOREX) (const unsigned int,
+												 const unsigned int,
+												 const unsigned int,
+												 const PLFX_COLOR,
+												 const PLFX_COLOR);
+typedef LFX_RESULT (*LFX2ACTIONCOLOR) (const unsigned int, const unsigned int,
+									   const unsigned int);
+typedef LFX_RESULT (*LFX2ACTIONCOLOREX) (const unsigned int,
+										 const unsigned int,
+										 const unsigned int,
+										 const unsigned int);
 typedef LFX_RESULT (*LFX2SETTIMING) (const int);
 typedef LFX_RESULT (*LFX2GETVERSION) (char *const, const unsigned int);
diff --git a/Aurora-LightFXWrapper/LFXConfigurator.h b/Aurora-LightFXWrapper/LFXConfigurator.h
index 61b1b02..dd2c231 100644
--- a/Aurora-LightFXWrapper/LFXConfigurator.h
+++ b/Aurora-LightFXWrapper/LFXConfigurator.h
@@ -63,7 +63,8 @@ is strictly forbidden.
 #define LFX_GENERALUSEAPP		1	// It is a general use application
 
 #ifdef __cplusplus
-extern "C" {
+extern "C"
+{
 #endif
 
 	// LightFX Config 1.0 DLL export function declarations
@@ -108,7 +109,11 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_RegisterConfigurationFile(char* const appFXName, char* const configurationFileFullPath, const LFX_APPTYPE appType);
+	FN_DECLSPEC LFX_RESULT STDCALL
+		LFX_CONFIGURATOR_RegisterConfigurationFile (char *const appFXName,
+													char *const
+													configurationFileFullPath,
+													const LFX_APPTYPE appType);
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_UnregisterConfigurationFile
@@ -123,7 +128,8 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_UnregisterConfigurationFile(char* const appFXName);
+	FN_DECLSPEC LFX_RESULT STDCALL
+		LFX_CONFIGURATOR_UnregisterConfigurationFile (char *const appFXName);
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_GetUserConfigurationFilePath
@@ -140,7 +146,12 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_GetUserConfigurationFilePath(char* const appFXName, char* const userConfigurationFilename, const unsigned int userConfigurationFilenameSize);
+	FN_DECLSPEC LFX_RESULT STDCALL
+		LFX_CONFIGURATOR_GetUserConfigurationFilePath (char *const appFXName,
+													   char *const
+													   userConfigurationFilename,
+													   const unsigned int
+													   userConfigurationFilenameSize);
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_GetConfigurationEvent
@@ -155,7 +166,19 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_GetConfigurationEvent(char* const appFXName, const unsigned int eventID, unsigned int* &colors, unsigned int &colorCount);
+	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_GetConfigurationEvent (char
+																		   *const
+																		   appFXName,
+																		   const
+																		   unsigned
+																		   int
+																		   eventID,
+																		   unsigned
+																		   int
+																		   *&colors,
+																		   unsigned
+																		   int
+																		   &colorCount);
 
 	/***************************************************************
 	Function: LFX_CONFIGURATOR_GetConfigurationEventAt
@@ -173,8 +196,15 @@ extern "C" {
 	LFX_ERROR_NOINIT if the LFX_CONFIGURATOR_Initialize
 	function was not called before
 	***************************************************************/
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_CONFIGURATOR_GetConfigurationEventAt(char* const appFXName, unsigned int position,
-		int &eventID, char* const eventName, const unsigned int eventNameSize, unsigned int* &colors, unsigned int &colorCount);
+	FN_DECLSPEC LFX_RESULT STDCALL
+		LFX_CONFIGURATOR_GetConfigurationEventAt (char *const appFXName,
+												  unsigned int position,
+												  int &eventID,
+												  char *const eventName,
+												  const unsigned int
+												  eventNameSize,
+												  unsigned int *&colors,
+												  unsigned int &colorCount);
 
 #ifdef __cplusplus
 }								/* end extern "C" */
@@ -197,8 +226,31 @@ extern "C" {
   // LightFX Config 1.0 function pointer declarations
 typedef LFX_RESULT (*LFXCONFIGURATORINITIALIZE) ();
 typedef LFX_RESULT (*LFXCONFIGURATORRELEASE) ();
-typedef LFX_RESULT(*LFXCONFIGURATORREGISTERCONFIGURATIONFILE)(char* const, char* const, const LFX_APPTYPE);
+typedef LFX_RESULT (*LFXCONFIGURATORREGISTERCONFIGURATIONFILE) (char *const,
+																char *const,
+																const
+																LFX_APPTYPE);
 typedef LFX_RESULT (*LFXCONFIGURATORUNREGISTERCONFIGURATIONFILE) (char *const);
-typedef LFX_RESULT(*LFXCONFIGURATORGETUSERCONFIGURATIONFILEPATH)(char* const, char* const, const unsigned int);
-typedef LFX_RESULT(*LFXCONFIGURATORGETCONFIGURATIONEVENT)(char* const, const unsigned int, unsigned int*&, unsigned int&);
-typedef LFX_RESULT(*LFXCONFIGURATORGETCONFIGURATIONEVENTFROMPOSITION)(char* const, unsigned int, int&, char* const, const unsigned int, unsigned int*&, unsigned int&);
+typedef LFX_RESULT (*LFXCONFIGURATORGETUSERCONFIGURATIONFILEPATH) (char *const,
+																   char *const,
+																   const
+																   unsigned
+																   int);
+typedef LFX_RESULT (*LFXCONFIGURATORGETCONFIGURATIONEVENT) (char *const,
+															const unsigned int,
+															unsigned int *&,
+															unsigned int &);
+typedef LFX_RESULT (*LFXCONFIGURATORGETCONFIGURATIONEVENTFROMPOSITION) (char
+																		*const,
+																		unsigned
+																		int,
+																		int &,
+																		char
+																		*const,
+																		const
+																		unsigned
+																		int,
+																		unsigned
+																		int *&,
+																		unsigned
+																		int &);
diff --git a/Aurora-LightFXWrapper/dllmain.cpp b/Aurora-LightFXWrapper/dllmain.cpp
index 6353172..0a853ab 100644
--- a/Aurora-LightFXWrapper/dllmain.cpp
+++ b/Aurora-LightFXWrapper/dllmain.cpp
@@ -13,18 +13,23 @@ static bool isInitialized = false;
 static LFX_COLOR current_bg = { (char) 0, (char) 0, (char) 0, (char) 0 };
 static int action_timing = 200;
 
-static std::string program_name;
-static std::string device_name = "Aurora";
-static int device_lights_num = 1; //DEVICE_LIGHTS_NUM;
-static std::string device_lights_name = "Northern Light";
+static
+	std::string
+	program_name;
+static
+	std::string
+	device_name = "Aurora";
+static int
+	device_lights_num = 1;		//DEVICE_LIGHTS_NUM;
+static
+	std::string
+	device_lights_name = "Northern Light";
 //static PLFX_COLOR device_lights[DEVICE_LIGHTS_NUM];
-static bool isUpdated;
+static bool
+	isUpdated;
 
-
-BOOL APIENTRY DllMain(HMODULE hModule,
-	DWORD  ul_reason_for_call,
-	LPVOID lpReserved
-)
+BOOL APIENTRY
+DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
 {
 	switch (ul_reason_for_call)
 	{
@@ -37,7 +42,8 @@ BOOL APIENTRY DllMain(HMODULE hModule,
 	return TRUE;
 }
 
-bool WriteToPipe(const std::string command_cargo)
+bool
+WriteToPipe (const std::string command_cargo)
 {
 	if (!isInitialized)
 		return false;
@@ -46,7 +52,8 @@ bool WriteToPipe(const std::string command_cargo)
 	std::string contents = "";
 
 	contents += '{';
-	contents += "\"provider\": {\"name\": \"" + program_name + "\", \"appid\": 0},";
+	contents +=
+		"\"provider\": {\"name\": \"" + program_name + "\", \"appid\": 0},";
 	contents += command_cargo;
 	contents += '}';
 	contents += "\r\n";
@@ -55,8 +62,7 @@ bool WriteToPipe(const std::string command_cargo)
 	{
 		//Try to restore handle
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
 							GENERIC_WRITE,	// write access 
 							0,	// no sharing 
 							NULL,	// default security attributes
@@ -70,13 +76,16 @@ bool WriteToPipe(const std::string command_cargo)
 		}
 	}
 
-	DWORD cbBytes;
+	DWORD
+		cbBytes;
 
-	const char* c_contents = contents.c_str();
-	int c_cotents_len = strlen(c_contents);
+	const char *
+		c_contents = contents.c_str ();
+	int
+		c_cotents_len = strlen (c_contents);
 
-	BOOL bResult = WriteFile(
-		hPipe,                // handle to pipe 
+	BOOL
+		bResult = WriteFile (hPipe,	// handle to pipe 
 							 c_contents,	// buffer to write from 
 							 c_cotents_len,	// number of bytes to write, include the NULL
 							 &cbBytes,	// number of bytes written 
@@ -95,23 +104,29 @@ bool WriteToPipe(const std::string command_cargo)
 	return false;
 }
 
-
 #ifdef __cplusplus
-extern "C" {
+extern
+	"C"
+{
 #endif
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Initialize()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Initialize ()
 	{
 		isUpdated = false;
 
 		if (!isInitialized)
 		{
 			//Get Application name
-			CHAR pBuf[MAX_PATH];
-			int bytes = GetModuleFileNameA(NULL, pBuf, MAX_PATH);
-			std::string filepath = pBuf;
-
-			int fn_beginning = 0;
+			CHAR
+				pBuf[MAX_PATH];
+			int
+				bytes = GetModuleFileNameA (NULL, pBuf, MAX_PATH);
+			std::string
+				filepath = pBuf;
+
+			int
+				fn_beginning = 0;
 			for (int chr_pos = strlen (pBuf) - 1; chr_pos > -1; chr_pos--)
 			{
 				if (pBuf[chr_pos] == '\\')
@@ -124,8 +139,7 @@ extern "C" {
 			program_name = filepath.substr (fn_beginning);
 
 			//Connect to the server pipe using CreateFile()
-			hPipe = CreateFile(
-				PIPE_NAME,   // pipe name 
+			hPipe = CreateFile (PIPE_NAME,	// pipe name 
 								GENERIC_WRITE,	// write access 
 								0,	// no sharing 
 								NULL,	// default security attributes
@@ -144,7 +158,8 @@ extern "C" {
 		return LFX_SUCCESS;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Release()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Release ()
 	{
 		if (isInitialized && hPipe != INVALID_HANDLE_VALUE)
 		{
@@ -154,11 +169,14 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Reset()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Reset ()
 	{
 		if (isInitialized)
 		{
-			current_bg = { (char)0, (char)0, (char)0, (char)0 };
+			current_bg =
+			{
+			(char) 0, (char) 0, (char) 0, (char) 0};
 			isUpdated = true;
 
 			std::string contents = "";
@@ -173,20 +191,32 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Update()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Update ()
 	{
 		if (isInitialized && isUpdated)
 		{
-			unsigned char redValue = (unsigned char)((int)(current_bg.red) * ((int)(current_bg.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(current_bg.green) * ((int)(current_bg.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(current_bg.blue) * ((int)(current_bg.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (current_bg.red) *
+								 ((int) (current_bg.brightness) / 255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (current_bg.green) *
+								 ((int) (current_bg.brightness) / 255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (current_bg.blue) *
+								 ((int) (current_bg.brightness) / 255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_Update\",";
 			contents += "\"command_data\": {";
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
 			contents += "\"blue_start\": " + std::to_string ((int) blueValue);
 			contents += '}';
 
@@ -198,13 +228,15 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_UpdateDefault()
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_UpdateDefault ()
 	{
 		// Not supported
 		return LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumDevices(unsigned int* const numDevices)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetNumDevices (unsigned int *const numDevices)
 	{
 		if (isInitialized)
 		{
@@ -224,7 +256,10 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetDeviceDescription(const unsigned int devIndex, char* const devDesc, const unsigned int devDescSize, unsigned char* const devType)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetDeviceDescription (const unsigned int devIndex, char *const devDesc,
+							  const unsigned int devDescSize,
+							  unsigned char *const devType)
 	{
 		if (isInitialized)
 		{
@@ -250,7 +285,9 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetNumLights(const unsigned int devIndex, unsigned int* const numLights)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetNumLights (const unsigned int devIndex,
+					  unsigned int *const numLights)
 	{
 		if (isInitialized)
 		{
@@ -272,7 +308,11 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightDescription(const unsigned int devIndex, const unsigned int lightIndex, char* const lightDesc, const unsigned int lightDescSize)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetLightDescription (const unsigned int devIndex,
+							 const unsigned int lightIndex,
+							 char *const lightDesc,
+							 const unsigned int lightDescSize)
 	{
 		if (isInitialized)
 		{
@@ -299,7 +339,10 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightLocation(const unsigned int devIndex, const unsigned int lightIndex, PLFX_POSITION const lightLoc)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetLightLocation (const unsigned int devIndex,
+						  const unsigned int lightIndex,
+						  PLFX_POSITION const lightLoc)
 	{
 		if (isInitialized)
 		{
@@ -317,7 +360,8 @@ extern "C" {
 			if (lightIndex >= 1)
 				return LFX_ERROR_NOLIGHTS;
 
-			_LFX_POSITION newpos = { 0, (char)lightIndex , 0 };
+			_LFX_POSITION
+			newpos = { 0, (char) lightIndex, 0 };
 
 			*lightLoc = newpos;
 		}
@@ -325,7 +369,10 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetLightColor(const unsigned int devIndex, const unsigned int lightIndex, PLFX_COLOR const lightCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetLightColor (const unsigned int devIndex,
+					   const unsigned int lightIndex,
+					   PLFX_COLOR const lightCol)
 	{
 		if (isInitialized)
 		{
@@ -349,7 +396,10 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightColor(const unsigned int devIndex, const unsigned int lightIndex, const PLFX_COLOR lightCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_SetLightColor (const unsigned int devIndex,
+					   const unsigned int lightIndex,
+					   const PLFX_COLOR lightCol)
 	{
 		if (isInitialized)
 		{
@@ -375,30 +425,44 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_Light(const unsigned int locationMask, const unsigned int lightCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_Light (const unsigned int locationMask, const unsigned int lightCol)
 	{
 		//Not supported
 		if (isInitialized)
 		{
-			LFX_COLOR lfx_color;
+			LFX_COLOR
+				lfx_color;
 			lfx_color.brightness = (lightCol >> 24) & 0xFF;
 			lfx_color.red = (lightCol >> 16) & 0xFF;
 			lfx_color.green = (lightCol >> 8) & 0xFF;
 			lfx_color.blue = lightCol & 0xFF;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color.red) * ((int)(lfx_color.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color.green) * ((int)(lfx_color.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color.blue) * ((int)(lfx_color.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color.red) *
+								 ((int) (lfx_color.brightness) / 255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color.green) *
+								 ((int) (lfx_color.brightness) / 255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color.blue) *
+								 ((int) (lfx_color.brightness) / 255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_Light\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"locationMask\": \"" + std::to_string(locationMask) + "\",";
+			contents +=
+				"\"locationMask\": \"" + std::to_string (locationMask) + "\",";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
 			contents += "\"blue_start\": " + std::to_string ((int) blueValue);
 			contents += '}';
 
@@ -411,7 +475,11 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColor(const unsigned int devIndex, const unsigned int lightIndex, const unsigned int actionType, const PLFX_COLOR primaryCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_SetLightActionColor (const unsigned int devIndex,
+							 const unsigned int lightIndex,
+							 const unsigned int actionType,
+							 const PLFX_COLOR primaryCol)
 	{
 		if (!isInitialized)
 			return LFX_ERROR_NOINIT;
@@ -425,27 +493,45 @@ extern "C" {
 		if (isInitialized)
 		{
 			//Primary Color
-			LFX_COLOR lfx_color_primary;
+			LFX_COLOR
+				lfx_color_primary;
 			lfx_color_primary.brightness = (*primaryCol).brightness;
 			lfx_color_primary.red = (*primaryCol).red;
 			lfx_color_primary.green = (*primaryCol).green;
 			lfx_color_primary.blue = (*primaryCol).blue;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color_primary.red) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color_primary.green) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color_primary.blue) * ((int)(lfx_color_primary.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color_primary.red) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color_primary.green) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color_primary.blue) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_SetLightActionColor\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-			contents += "\"duration\": " + std::to_string((int)action_timing) + ',';
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents +=
+				"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+			contents +=
+				"\"duration\": " + std::to_string ((int) action_timing) + ',';
 
-			switch (actionType) {
+			switch (actionType)
+			{
 			case LFX_ACTION_MORPH:
 				contents += "\"effect_type\": \"LFX_ACTION_MORPH\"";
 				break;
@@ -468,7 +554,12 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetLightActionColorEx(const unsigned int devIndex, const unsigned int lightIndex, const unsigned int actionType, const PLFX_COLOR primaryCol, const PLFX_COLOR secondaryCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_SetLightActionColorEx (const unsigned int devIndex,
+							   const unsigned int lightIndex,
+							   const unsigned int actionType,
+							   const PLFX_COLOR primaryCol,
+							   const PLFX_COLOR secondaryCol)
 	{
 		if (!isInitialized)
 			return LFX_ERROR_NOINIT;
@@ -482,41 +573,76 @@ extern "C" {
 		if (isInitialized)
 		{
 			//Primary Color
-			LFX_COLOR lfx_color_primary;
+			LFX_COLOR
+				lfx_color_primary;
 			lfx_color_primary.brightness = (*primaryCol).brightness;
 			lfx_color_primary.red = (*primaryCol).red;
 			lfx_color_primary.green = (*primaryCol).green;
 			lfx_color_primary.blue = (*primaryCol).blue;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color_primary.red) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color_primary.green) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color_primary.blue) * ((int)(lfx_color_primary.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color_primary.red) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color_primary.green) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color_primary.blue) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
 
 			//Secondary Color
-			LFX_COLOR lfx_color_secondary;
+			LFX_COLOR
+				lfx_color_secondary;
 			lfx_color_secondary.brightness = (*secondaryCol).brightness;
 			lfx_color_secondary.red = (*secondaryCol).red;
 			lfx_color_secondary.green = (*secondaryCol).green;
 			lfx_color_secondary.blue = (*secondaryCol).blue;
 
-			unsigned char redValue_end = (unsigned char)((int)(lfx_color_secondary.red) * ((int)(lfx_color_secondary.brightness) / 255.0f));
-			unsigned char greenValue_end = (unsigned char)((int)(lfx_color_secondary.green) * ((int)(lfx_color_secondary.brightness) / 255.0f));
-			unsigned char blueValue_end = (unsigned char)((int)(lfx_color_secondary.blue) * ((int)(lfx_color_secondary.brightness) / 255.0f));
+			unsigned char
+				redValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.red) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.green) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.blue) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_SetLightActionColorEx\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-			contents += "\"red_end\": " + std::to_string((int)redValue_end) + ',';
-			contents += "\"green_end\": " + std::to_string((int)greenValue_end) + ',';
-			contents += "\"blue_end\": " + std::to_string((int)blueValue_end) + ',';
-			contents += "\"duration\": " + std::to_string((int)action_timing) + ',';
-
-			switch (actionType) {
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents +=
+				"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+			contents +=
+				"\"red_end\": " + std::to_string ((int) redValue_end) + ',';
+			contents +=
+				"\"green_end\": " + std::to_string ((int) greenValue_end) +
+				',';
+			contents +=
+				"\"blue_end\": " + std::to_string ((int) blueValue_end) + ',';
+			contents +=
+				"\"duration\": " + std::to_string ((int) action_timing) + ',';
+
+			switch (actionType)
+			{
 			case LFX_ACTION_MORPH:
 				contents += "\"effect_type\": \"LFX_ACTION_MORPH\"";
 				break;
@@ -539,7 +665,10 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColor(const unsigned int locationMask, const unsigned int actionType, const unsigned int primaryCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_ActionColor (const unsigned int locationMask,
+					 const unsigned int actionType,
+					 const unsigned int primaryCol)
 	{
 		if (!isInitialized)
 			return LFX_ERROR_NOINIT;
@@ -547,27 +676,45 @@ extern "C" {
 		if (isInitialized)
 		{
 			//Primary Color
-			LFX_COLOR lfx_color_primary;
+			LFX_COLOR
+				lfx_color_primary;
 			lfx_color_primary.brightness = (primaryCol >> 24) & 0xFF;
 			lfx_color_primary.red = (primaryCol >> 16) & 0xFF;
 			lfx_color_primary.green = (primaryCol >> 8) & 0xFF;
 			lfx_color_primary.blue = primaryCol & 0xFF;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color_primary.red) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color_primary.green) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color_primary.blue) * ((int)(lfx_color_primary.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color_primary.red) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color_primary.green) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color_primary.blue) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_ActionColor\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-			contents += "\"duration\": " + std::to_string((int)action_timing) + ',';
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents +=
+				"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+			contents +=
+				"\"duration\": " + std::to_string ((int) action_timing) + ',';
 
-			switch (actionType) {
+			switch (actionType)
+			{
 			case LFX_ACTION_MORPH:
 				contents += "\"effect_type\": \"LFX_ACTION_MORPH\"";
 				break;
@@ -590,7 +737,11 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_ActionColorEx(const unsigned int locationMask, const unsigned int actionType, const unsigned int primaryCol, const unsigned int secondaryCol)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_ActionColorEx (const unsigned int locationMask,
+					   const unsigned int actionType,
+					   const unsigned int primaryCol,
+					   const unsigned int secondaryCol)
 	{
 		if (!isInitialized)
 			return LFX_ERROR_NOINIT;
@@ -598,41 +749,76 @@ extern "C" {
 		if (isInitialized)
 		{
 			//Primary Color
-			LFX_COLOR lfx_color_primary;
+			LFX_COLOR
+				lfx_color_primary;
 			lfx_color_primary.brightness = (primaryCol >> 24) & 0xFF;
 			lfx_color_primary.red = (primaryCol >> 16) & 0xFF;
 			lfx_color_primary.green = (primaryCol >> 8) & 0xFF;
 			lfx_color_primary.blue = primaryCol & 0xFF;
 
-			unsigned char redValue = (unsigned char)((int)(lfx_color_primary.red) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char greenValue = (unsigned char)((int)(lfx_color_primary.green) * ((int)(lfx_color_primary.brightness) / 255.0f));
-			unsigned char blueValue = (unsigned char)((int)(lfx_color_primary.blue) * ((int)(lfx_color_primary.brightness) / 255.0f));
+			unsigned char
+				redValue =
+				(unsigned char) ((int) (lfx_color_primary.red) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue =
+				(unsigned char) ((int) (lfx_color_primary.green) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue =
+				(unsigned char) ((int) (lfx_color_primary.blue) *
+								 ((int) (lfx_color_primary.brightness) /
+								  255.0f));
 
 			//Secondary Color
-			LFX_COLOR lfx_color_secondary;
+			LFX_COLOR
+				lfx_color_secondary;
 			lfx_color_secondary.brightness = (secondaryCol >> 24) & 0xFF;
 			lfx_color_secondary.red = (secondaryCol >> 16) & 0xFF;
 			lfx_color_secondary.green = (secondaryCol >> 8) & 0xFF;
 			lfx_color_secondary.blue = secondaryCol & 0xFF;
 
-			unsigned char redValue_end = (unsigned char)((int)(lfx_color_secondary.red) * ((int)(lfx_color_secondary.brightness) / 255.0f));
-			unsigned char greenValue_end = (unsigned char)((int)(lfx_color_secondary.green) * ((int)(lfx_color_secondary.brightness) / 255.0f));
-			unsigned char blueValue_end = (unsigned char)((int)(lfx_color_secondary.blue) * ((int)(lfx_color_secondary.brightness) / 255.0f));
+			unsigned char
+				redValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.red) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
+			unsigned char
+				greenValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.green) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
+			unsigned char
+				blueValue_end =
+				(unsigned char) ((int) (lfx_color_secondary.blue) *
+								 ((int) (lfx_color_secondary.brightness) /
+								  255.0f));
 
 			std::string contents = "";
 
 			contents += "\"command\": \"LFX_ActionColorEx\",";
 			contents += "\"command_data\": {";
 
-			contents += "\"red_start\": " + std::to_string((int)redValue) + ',';
-			contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-			contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
-			contents += "\"red_end\": " + std::to_string((int)redValue_end) + ',';
-			contents += "\"green_end\": " + std::to_string((int)greenValue_end) + ',';
-			contents += "\"blue_end\": " + std::to_string((int)blueValue_end) + ',';
-			contents += "\"duration\": " + std::to_string((int)action_timing) + ',';
-
-			switch (actionType) {
+			contents +=
+				"\"red_start\": " + std::to_string ((int) redValue) + ',';
+			contents +=
+				"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+			contents +=
+				"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
+			contents +=
+				"\"red_end\": " + std::to_string ((int) redValue_end) + ',';
+			contents +=
+				"\"green_end\": " + std::to_string ((int) greenValue_end) +
+				',';
+			contents +=
+				"\"blue_end\": " + std::to_string ((int) blueValue_end) + ',';
+			contents +=
+				"\"duration\": " + std::to_string ((int) action_timing) + ',';
+
+			switch (actionType)
+			{
 			case LFX_ACTION_MORPH:
 				contents += "\"effect_type\": \"LFX_ACTION_MORPH\"";
 				break;
@@ -655,13 +841,15 @@ extern "C" {
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_SetTiming(const int newTiming)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_SetTiming (const int newTiming)
 	{
 		action_timing = newTiming;
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
 	}
 
-	FN_DECLSPEC LFX_RESULT STDCALL LFX_GetVersion(char* const version, const unsigned int versionSize)
+	FN_DECLSPEC LFX_RESULT STDCALL
+	LFX_GetVersion (char *const version, const unsigned int versionSize)
 	{
 		sprintf_s (version, versionSize, "2.2.0.0");
 		return isInitialized ? LFX_SUCCESS : LFX_FAILURE;
diff --git a/Aurora-LogiLEDWrapper/dllmain.cpp b/Aurora-LogiLEDWrapper/dllmain.cpp
index 5f719bc..bf20267 100644
--- a/Aurora-LogiLEDWrapper/dllmain.cpp
+++ b/Aurora-LogiLEDWrapper/dllmain.cpp
@@ -17,12 +17,12 @@ static unsigned char current_bg[3];
 
 static int current_device = LOGI_DEVICETYPE_ALL;
 
-static std::string program_name;
+static
+	std::string
+	program_name;
 
-BOOL WINAPI DllMain(HMODULE hModule,
-	DWORD  ul_reason_for_call,
-	LPVOID lpReserved
-	)
+BOOL WINAPI
+DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
 {
 	switch (ul_reason_for_call)
 	{
@@ -35,7 +35,8 @@ BOOL WINAPI DllMain(HMODULE hModule,
 	return TRUE;
 }
 
-LogiLed::Logitech_keyboardBitmapKeys ToLogitechBitmap(LogiLed::KeyName keyName)
+LogiLed::Logitech_keyboardBitmapKeys ToLogitechBitmap (LogiLed::
+													   KeyName keyName)
 {
 	switch (keyName)
 	{
@@ -256,7 +257,8 @@ LogiLed::Logitech_keyboardBitmapKeys ToLogitechBitmap(LogiLed::KeyName keyName)
 	}
 }
 
-bool WriteToPipe(const std::string command_cargo)
+bool
+WriteToPipe (const std::string command_cargo)
 {
 	if (!isInitialized)
 		return false;
@@ -265,7 +267,8 @@ bool WriteToPipe(const std::string command_cargo)
 	std::string contents = "";
 
 	contents += '{';
-	contents += "\"provider\": {\"name\": \"" + program_name + "\", \"appid\": 0},";
+	contents +=
+		"\"provider\": {\"name\": \"" + program_name + "\", \"appid\": 0},";
 	contents += command_cargo;
 	contents += '}';
 	contents += "\r\n";
@@ -274,8 +277,7 @@ bool WriteToPipe(const std::string command_cargo)
 	{
 		//Try to restore handle
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
 							GENERIC_WRITE,	// write access 
 							0,	// no sharing 
 							NULL,	// default security attributes
@@ -294,8 +296,7 @@ bool WriteToPipe(const std::string command_cargo)
 	const char *c_contents = contents.c_str ();
 	int c_cotents_len = strlen (c_contents);
 
-	BOOL bResult = WriteFile(
-		hPipe,                // handle to pipe 
+	BOOL bResult = WriteFile (hPipe,	// handle to pipe 
 							  c_contents,	// buffer to write from 
 							  c_cotents_len,	// number of bytes to write, include the NULL
 							  &cbBytes,	// number of bytes written 
@@ -314,19 +315,26 @@ bool WriteToPipe(const std::string command_cargo)
 	return false;
 }
 
-void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercentage, int custom_mode = 0)
+void
+_LogiLedSetLighting (int redPercentage, int greenPercentage,
+					 int bluePercentage, int custom_mode = 0)
 {
 	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
-
-	if (isInitialized && (current_device == LOGI_DEVICETYPE_ALL || current_device == LOGI_DEVICETYPE_PERKEY_RGB))
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
+
+	if (isInitialized
+		&& (current_device == LOGI_DEVICETYPE_ALL
+			|| current_device == LOGI_DEVICETYPE_PERKEY_RGB))
 	{
 		std::string contents = "";
 
 		if (program_name.compare ("GTA5.exe") == 0)
 		{
-			for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
+			for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE;
+				 colorset += 4)
 			{
 				current_bitmap[colorset] = blueValue;
 				current_bitmap[colorset + 1] = greenValue;
@@ -341,133 +349,228 @@ void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercent
 			case 0xFFFBE4:
 			case 0xFFFBFF:
 				//F1
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 3] = (char) 255;
 				//F2
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 3] = (char) 255;
 				//F3
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 3] = (char) 255;
 				//F4
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 3] = (char) 255;
 				//F5
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 3] = (char) 255;
 				//F6
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 3] = (char) 255;
 				//F7
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 3] = (char) 255;
 				//F8
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 3] = (char) 255;
 				//F9
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 3] = (char) 255;
 				//F10
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 3] = (char) 255;
 				//F11
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 3] = (char) 255;
 				//F12
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 3] = (char) 255;
 				break;
 			case 0xFF0100:
 			case 0xFF0150:
 			case 0xFF01E4:
 			case 0xFF01FF:
 				//F1
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F1 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F1 + 3] = (char) 255;
 				//F2
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F2 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F2 + 3] = (char) 255;
 				//F3
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F3 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F3 + 3] = (char) 255;
 				//F4
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F4 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F4 + 3] = (char) 255;
 				//F5
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F5 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F5 + 3] = (char) 255;
 				//F6
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 2] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F6 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 2] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F6 + 3] = (char) 255;
 				//F7
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F7 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F7 + 3] = (char) 255;
 				//F8
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F8 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F8 + 3] = (char) 255;
 				//F9
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F9 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F9 + 3] = (char) 255;
 				//F10
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F10 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F10 + 3] = (char) 255;
 				//F11
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F11 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F11 + 3] = (char) 255;
 				//F12
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 1] = (char)0;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 2] = (char)255;
-				current_bitmap[(int)LogiLed::Logitech_keyboardBitmapKeys::BITLOC_F12 + 3] = (char)255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 1] = (char) 0;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 2] = (char) 255;
+				current_bitmap[(int) LogiLed::Logitech_keyboardBitmapKeys::
+							   BITLOC_F12 + 3] = (char) 255;
 			}
 
-
 			contents += "\"bitmap\": [";
 			for (int bitm_pos = 0; bitm_pos < LOGI_LED_BITMAP_SIZE; bitm_pos++)
 			{
@@ -482,9 +585,7 @@ void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercent
 		{
 
 			if (current_bg[0] == blueValue &&
-				current_bg[1] == greenValue &&
-				current_bg[2] == redValue
-				)
+				current_bg[1] == greenValue && current_bg[2] == redValue)
 			{
 				//No need to write on pipe, color did not change
 				return;
@@ -494,7 +595,8 @@ void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercent
 			current_bg[1] = greenValue;
 			current_bg[2] = redValue;
 
-			for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
+			for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE;
+				 colorset += 4)
 			{
 				current_bitmap[colorset] = blueValue;
 				current_bitmap[colorset + 1] = greenValue;
@@ -506,8 +608,10 @@ void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercent
 		contents += "\"command\": \"SetLighting\",";
 		contents += "\"command_data\": {";
 		contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
-		contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-		contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
+		contents +=
+			"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+		contents +=
+			"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
 
 		contents += "\"custom_mode\": " + std::to_string (custom_mode);
 
@@ -517,11 +621,16 @@ void _LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercent
 	}
 }
 
-void _LogiLedFlashLighting(int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+void
+_LogiLedFlashLighting (int redPercentage, int greenPercentage,
+					   int bluePercentage, int milliSecondsDuration,
+					   int milliSecondsInterval)
 {
 	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"FlashLighting\",";
@@ -538,11 +647,16 @@ void _LogiLedFlashLighting(int redPercentage, int greenPercentage, int bluePerce
 	WriteToPipe (contents);
 }
 
-void _LogiLedPulseLighting(int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+void
+_LogiLedPulseLighting (int redPercentage, int greenPercentage,
+					   int bluePercentage, int milliSecondsDuration,
+					   int milliSecondsInterval)
 {
 	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"PulseLighting\",";
@@ -559,7 +673,8 @@ void _LogiLedPulseLighting(int redPercentage, int greenPercentage, int bluePerce
 	WriteToPipe (contents);
 }
 
-void _LogiLedStopEffects()
+void
+_LogiLedStopEffects ()
 {
 	std::string contents = "";
 	contents += "\"command\": \"StopEffects\",";
@@ -569,9 +684,12 @@ void _LogiLedStopEffects()
 	WriteToPipe (contents);
 }
 
-void _LogiLedSetLightingFromBitmap(unsigned char bitmap[])
+void
+_LogiLedSetLightingFromBitmap (unsigned char bitmap[])
 {
-	if (isInitialized && (current_device == LOGI_DEVICETYPE_ALL || current_device == LOGI_DEVICETYPE_PERKEY_RGB))
+	if (isInitialized
+		&& (current_device == LOGI_DEVICETYPE_ALL
+			|| current_device == LOGI_DEVICETYPE_PERKEY_RGB))
 	{
 		for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
 		{
@@ -599,11 +717,15 @@ void _LogiLedSetLightingFromBitmap(unsigned char bitmap[])
 	}
 }
 
-void _LogiLedSetLightingForKeyWithScanCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+void
+_LogiLedSetLightingForKeyWithScanCode (int keyCode, int redPercentage,
+									   int greenPercentage, int bluePercentage)
 {
 	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"SetLightingForKeyWithScanCode\",";
@@ -633,11 +755,15 @@ void _LogiLedSetLightingForKeyWithScanCode(int keyCode, int redPercentage, int g
 	WriteToPipe (contents);
 }
 
-void _LogiLedSetLightingForKeyWithHidCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+void
+_LogiLedSetLightingForKeyWithHidCode (int keyCode, int redPercentage,
+									  int greenPercentage, int bluePercentage)
 {
 	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"SetLightingForKeyWithHidCode\",";
@@ -667,11 +793,16 @@ void _LogiLedSetLightingForKeyWithHidCode(int keyCode, int redPercentage, int gr
 	WriteToPipe (contents);
 }
 
-void _LogiLedSetLightingForKeyWithQuartzCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+void
+_LogiLedSetLightingForKeyWithQuartzCode (int keyCode, int redPercentage,
+										 int greenPercentage,
+										 int bluePercentage)
 {
 	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"SetLightingForKeyWithQuartzCode\",";
@@ -701,23 +832,28 @@ void _LogiLedSetLightingForKeyWithQuartzCode(int keyCode, int redPercentage, int
 	WriteToPipe (contents);
 }
 
-void _LogiLedSetLightingForKeyWithKeyName(LogiLed::KeyName keyName, int redPercentage, int greenPercentage, int bluePercentage)
+void
+_LogiLedSetLightingForKeyWithKeyName (LogiLed::KeyName keyName,
+									  int redPercentage, int greenPercentage,
+									  int bluePercentage)
 {
 	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
-	LogiLed::Logitech_keyboardBitmapKeys bit_location = ToLogitechBitmap(keyName);
+	LogiLed::Logitech_keyboardBitmapKeys bit_location =
+		ToLogitechBitmap (keyName);
 
-	if (isInitialized && (current_device == LOGI_DEVICETYPE_ALL || current_device == LOGI_DEVICETYPE_PERKEY_RGB))
+	if (isInitialized
+		&& (current_device == LOGI_DEVICETYPE_ALL
+			|| current_device == LOGI_DEVICETYPE_PERKEY_RGB))
 	{
 		if (bit_location == LogiLed::Logitech_keyboardBitmapKeys::UNKNOWN ||
-			(
-				current_bitmap[(int)bit_location] == blueValue &&
+			(current_bitmap[(int) bit_location] == blueValue &&
 			 current_bitmap[(int) bit_location + 1] == greenValue &&
-				current_bitmap[(int)bit_location + 2] == redValue
-				)
-			)
+			 current_bitmap[(int) bit_location + 2] == redValue))
 		{
 			//No need to write on pipe, color did not change
 			return;
@@ -732,8 +868,10 @@ void _LogiLedSetLightingForKeyWithKeyName(LogiLed::KeyName keyName, int redPerce
 		contents += "\"command_data\": {";
 
 		contents += "\"red_start\": " + std::to_string ((int) redValue) + ',';
-		contents += "\"green_start\": " + std::to_string((int)greenValue) + ',';
-		contents += "\"blue_start\": " + std::to_string((int)blueValue) + ',';
+		contents +=
+			"\"green_start\": " + std::to_string ((int) greenValue) + ',';
+		contents +=
+			"\"blue_start\": " + std::to_string ((int) blueValue) + ',';
 		contents += "\"key\": " + std::to_string (keyName);
 
 		contents += "}";
@@ -742,11 +880,16 @@ void _LogiLedSetLightingForKeyWithKeyName(LogiLed::KeyName keyName, int redPerce
 	}
 }
 
-void _LogiLedFlashSingleKey(LogiLed::KeyName keyName, int redPercentage, int greenPercentage, int bluePercentage, int msDuration, int msInterval)
+void
+_LogiLedFlashSingleKey (LogiLed::KeyName keyName, int redPercentage,
+						int greenPercentage, int bluePercentage,
+						int msDuration, int msInterval)
 {
 	unsigned char redValue = (unsigned char) ((redPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((greenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((bluePercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((greenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((bluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"FlashSingleKey\",";
@@ -764,14 +907,25 @@ void _LogiLedFlashSingleKey(LogiLed::KeyName keyName, int redPercentage, int gre
 	WriteToPipe (contents);
 }
 
-void _LogiLedPulseSingleKey(LogiLed::KeyName keyName, int startRedPercentage, int startGreenPercentage, int startBluePercentage, int finishRedPercentage, int finishGreenPercentage, int finishBluePercentage, int msDuration, bool isInfinite)
+void
+_LogiLedPulseSingleKey (LogiLed::KeyName keyName, int startRedPercentage,
+						int startGreenPercentage, int startBluePercentage,
+						int finishRedPercentage, int finishGreenPercentage,
+						int finishBluePercentage, int msDuration,
+						bool isInfinite)
 {
-	unsigned char redValue = (unsigned char)((startRedPercentage / 100.0f) * 255);
-	unsigned char greenValue = (unsigned char)((startGreenPercentage / 100.0f) * 255);
-	unsigned char blueValue = (unsigned char)((startBluePercentage / 100.0f) * 255);
-	unsigned char redValue_end = (unsigned char)((finishRedPercentage / 100.0f) * 255);
-	unsigned char greenValue_end = (unsigned char)((finishGreenPercentage / 100.0f) * 255);
-	unsigned char blueValue_end = (unsigned char)((finishBluePercentage / 100.0f) * 255);
+	unsigned char redValue =
+		(unsigned char) ((startRedPercentage / 100.0f) * 255);
+	unsigned char greenValue =
+		(unsigned char) ((startGreenPercentage / 100.0f) * 255);
+	unsigned char blueValue =
+		(unsigned char) ((startBluePercentage / 100.0f) * 255);
+	unsigned char redValue_end =
+		(unsigned char) ((finishRedPercentage / 100.0f) * 255);
+	unsigned char greenValue_end =
+		(unsigned char) ((finishGreenPercentage / 100.0f) * 255);
+	unsigned char blueValue_end =
+		(unsigned char) ((finishBluePercentage / 100.0f) * 255);
 
 	std::string contents = "";
 	contents += "\"command\": \"PulseSingleKey\",";
@@ -781,7 +935,8 @@ void _LogiLedPulseSingleKey(LogiLed::KeyName keyName, int startRedPercentage, in
 	contents += "\"green_start\": " + std::to_string ((int) greenValue) + ',';
 	contents += "\"blue_start\": " + std::to_string ((int) blueValue) + ',';
 	contents += "\"red_end\": " + std::to_string ((int) redValue_end) + ',';
-	contents += "\"green_end\": " + std::to_string((int)greenValue_end) + ',';
+	contents +=
+		"\"green_end\": " + std::to_string ((int) greenValue_end) + ',';
 	contents += "\"blue_end\": " + std::to_string ((int) blueValue_end) + ',';
 	contents += "\"duration\": " + std::to_string (msDuration) + ',';
 	if (isInfinite)
@@ -795,7 +950,8 @@ void _LogiLedPulseSingleKey(LogiLed::KeyName keyName, int startRedPercentage, in
 	WriteToPipe (contents);
 }
 
-void _LogiLedStopEffectsOnKey(LogiLed::KeyName keyName)
+void
+_LogiLedStopEffectsOnKey (LogiLed::KeyName keyName)
 {
 	std::string contents = "";
 	contents += "\"command\": \"StopEffectsOnKey\",";
@@ -806,7 +962,8 @@ void _LogiLedStopEffectsOnKey(LogiLed::KeyName keyName)
 	WriteToPipe (contents);
 }
 
-bool LogiLedInit()
+bool
+LogiLedInit ()
 {
 	if (!isInitialized)
 	{
@@ -828,8 +985,7 @@ bool LogiLedInit()
 		program_name = filepath.substr (fn_beginning);
 
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
 							GENERIC_WRITE,	// write access 
 							0,	// no sharing 
 							NULL,	// default security attributes
@@ -848,118 +1004,164 @@ bool LogiLedInit()
 	return true;
 }
 
-bool LogiLedSetTargetDevice(int targetDevice)
+bool
+LogiLedSetTargetDevice (int targetDevice)
 {
 	current_device = targetDevice;
 
 	return isInitialized;
 }
 
-bool LogiLedSaveCurrentLighting()
+bool
+LogiLedSaveCurrentLighting ()
 {
 	return isInitialized;
 }
 
-bool LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercentage, int custom_mode = 0)
+bool
+LogiLedSetLighting (int redPercentage, int greenPercentage, int bluePercentage,
+					int custom_mode = 0)
 {
-	_LogiLedSetLighting(redPercentage, greenPercentage, bluePercentage, custom_mode);
+	_LogiLedSetLighting (redPercentage, greenPercentage, bluePercentage,
+						 custom_mode);
 
 	return isInitialized;
 }
 
-bool LogiLedRestoreLighting()
+bool
+LogiLedRestoreLighting ()
 {
 	return isInitialized;
 }
 
-bool LogiLedFlashLighting(int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+bool
+LogiLedFlashLighting (int redPercentage, int greenPercentage,
+					  int bluePercentage, int milliSecondsDuration,
+					  int milliSecondsInterval)
 {
-	_LogiLedFlashLighting(redPercentage, greenPercentage, bluePercentage, milliSecondsDuration, milliSecondsInterval);
+	_LogiLedFlashLighting (redPercentage, greenPercentage, bluePercentage,
+						   milliSecondsDuration, milliSecondsInterval);
 
 	return isInitialized;
 }
 
-bool LogiLedPulseLighting(int redPercentage, int greenPercentage, int bluePercentage, int milliSecondsDuration, int milliSecondsInterval)
+bool
+LogiLedPulseLighting (int redPercentage, int greenPercentage,
+					  int bluePercentage, int milliSecondsDuration,
+					  int milliSecondsInterval)
 {
-	_LogiLedPulseLighting(redPercentage, greenPercentage, bluePercentage, milliSecondsDuration, milliSecondsInterval);
+	_LogiLedPulseLighting (redPercentage, greenPercentage, bluePercentage,
+						   milliSecondsDuration, milliSecondsInterval);
 
 	return isInitialized;
 }
 
-bool LogiLedStopEffects()
+bool
+LogiLedStopEffects ()
 {
 	_LogiLedStopEffects ();
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingFromBitmap(unsigned char bitmap[])
+bool
+LogiLedSetLightingFromBitmap (unsigned char bitmap[])
 {
 	_LogiLedSetLightingFromBitmap (bitmap);
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingForKeyWithScanCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+bool
+LogiLedSetLightingForKeyWithScanCode (int keyCode, int redPercentage,
+									  int greenPercentage, int bluePercentage)
 {
-	_LogiLedSetLightingForKeyWithScanCode(keyCode, redPercentage, greenPercentage, bluePercentage);
+	_LogiLedSetLightingForKeyWithScanCode (keyCode, redPercentage,
+										   greenPercentage, bluePercentage);
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingForKeyWithHidCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+bool
+LogiLedSetLightingForKeyWithHidCode (int keyCode, int redPercentage,
+									 int greenPercentage, int bluePercentage)
 {
-	_LogiLedSetLightingForKeyWithHidCode(keyCode, redPercentage, greenPercentage, bluePercentage);
+	_LogiLedSetLightingForKeyWithHidCode (keyCode, redPercentage,
+										  greenPercentage, bluePercentage);
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingForKeyWithQuartzCode(int keyCode, int redPercentage, int greenPercentage, int bluePercentage)
+bool
+LogiLedSetLightingForKeyWithQuartzCode (int keyCode, int redPercentage,
+										int greenPercentage,
+										int bluePercentage)
 {
-	_LogiLedSetLightingForKeyWithQuartzCode(keyCode, redPercentage, greenPercentage, bluePercentage);
+	_LogiLedSetLightingForKeyWithQuartzCode (keyCode, redPercentage,
+											 greenPercentage, bluePercentage);
 
 	return isInitialized;
 }
 
-bool LogiLedSetLightingForKeyWithKeyName(LogiLed::KeyName keyName, int redPercentage, int greenPercentage, int bluePercentage)
+bool
+LogiLedSetLightingForKeyWithKeyName (LogiLed::KeyName keyName,
+									 int redPercentage, int greenPercentage,
+									 int bluePercentage)
 {
-	_LogiLedSetLightingForKeyWithKeyName(keyName, redPercentage, greenPercentage, bluePercentage);
+	_LogiLedSetLightingForKeyWithKeyName (keyName, redPercentage,
+										  greenPercentage, bluePercentage);
 
 	return isInitialized;
 }
 
-bool LogiLedSaveLightingForKey(LogiLed::KeyName keyName)
+bool
+LogiLedSaveLightingForKey (LogiLed::KeyName keyName)
 {
 	return isInitialized;
 }
 
-bool LogiLedRestoreLightingForKey(LogiLed::KeyName keyName)
+bool
+LogiLedRestoreLightingForKey (LogiLed::KeyName keyName)
 {
 	return isInitialized;
 }
 
-bool LogiLedFlashSingleKey(LogiLed::KeyName keyName, int redPercentage, int greenPercentage, int bluePercentage, int msDuration, int msInterval)
+bool
+LogiLedFlashSingleKey (LogiLed::KeyName keyName, int redPercentage,
+					   int greenPercentage, int bluePercentage, int msDuration,
+					   int msInterval)
 {
-	_LogiLedFlashSingleKey(keyName, redPercentage, greenPercentage, bluePercentage, msDuration, msInterval);
+	_LogiLedFlashSingleKey (keyName, redPercentage, greenPercentage,
+							bluePercentage, msDuration, msInterval);
 
 	return isInitialized;
 }
 
-bool LogiLedPulseSingleKey(LogiLed::KeyName keyName, int startRedPercentage, int startGreenPercentage, int startBluePercentage, int finishRedPercentage, int finishGreenPercentage, int finishBluePercentage, int msDuration, bool isInfinite)
+bool
+LogiLedPulseSingleKey (LogiLed::KeyName keyName, int startRedPercentage,
+					   int startGreenPercentage, int startBluePercentage,
+					   int finishRedPercentage, int finishGreenPercentage,
+					   int finishBluePercentage, int msDuration,
+					   bool isInfinite)
 {
-	_LogiLedPulseSingleKey(keyName, startRedPercentage, startGreenPercentage, startBluePercentage, finishRedPercentage, finishGreenPercentage, finishBluePercentage, msDuration, isInfinite);
+	_LogiLedPulseSingleKey (keyName, startRedPercentage, startGreenPercentage,
+							startBluePercentage, finishRedPercentage,
+							finishGreenPercentage, finishBluePercentage,
+							msDuration, isInfinite);
 
 	return isInitialized;
 }
 
-bool LogiLedStopEffectsOnKey(LogiLed::KeyName keyName)
+bool
+LogiLedStopEffectsOnKey (LogiLed::KeyName keyName)
 {
 	_LogiLedStopEffectsOnKey (keyName);
 
 	return isInitialized;
 }
 
-void LogiLedShutdown()
+void
+LogiLedShutdown ()
 {
 	if (isInitialized)
 	{
diff --git a/Aurora-RazerLEDWrapper/RzChromaSDKDefines.h b/Aurora-RazerLEDWrapper/RzChromaSDKDefines.h
index 0f09bf0..f895039 100644
--- a/Aurora-RazerLEDWrapper/RzChromaSDKDefines.h
+++ b/Aurora-RazerLEDWrapper/RzChromaSDKDefines.h
@@ -16,132 +16,173 @@ namespace ChromaSDK
 	//! Razer Blackwidow Chroma device.
 	// {2EA1BB63-CA28-428D-9F06-196B88330BBB}
 	static const GUID BLACKWIDOW_CHROMA =
-	{ 0x2ea1bb63, 0xca28, 0x428d,{ 0x9f, 0x06, 0x19, 0x6b, 0x88, 0x33, 0x0b, 0xbb } };
+		{ 0x2ea1bb63, 0xca28, 0x428d, {0x9f, 0x06, 0x19, 0x6b, 0x88, 0x33,
+									   0x0b, 0xbb}
+	};
 
 	//! Razer Blackwidow Chroma Tournament Edition device.
 	// {ED1C1B82-BFBE-418F-B49D-D03F05B149DF}
 	static const GUID BLACKWIDOW_CHROMA_TE =
-	{ 0xed1c1b82, 0xbfbe, 0x418f,{ 0xb4, 0x9d, 0xd0, 0x3f, 0x5, 0xb1, 0x49, 0xdf } };
+		{ 0xed1c1b82, 0xbfbe, 0x418f, {0xb4, 0x9d, 0xd0, 0x3f, 0x5, 0xb1, 0x49,
+									   0xdf}
+	};
 
 	//! Razer Deathstalker device.
 	// {18C5AD9B-4326-4828-92C4-2669A66D2283}
 	static const GUID DEATHSTALKER_CHROMA =
-	{ 0x18c5ad9b, 0x4326, 0x4828,{ 0x92, 0xc4, 0x26, 0x69, 0xa6, 0x6d, 0x22, 0x83 } };
+		{ 0x18c5ad9b, 0x4326, 0x4828, {0x92, 0xc4, 0x26, 0x69, 0xa6, 0x6d,
+									   0x22, 0x83}
+	};
 
 	//! Overwatch Keyboard.
 	// {872AB2A9-7959-4478-9FED-15F6186E72E4}
 	static const GUID OVERWATCH_KEYBOARD =
-	{ 0x872ab2a9, 0x7959, 0x4478,{ 0x9f, 0xed, 0x15, 0xf6, 0x18, 0x6e, 0x72, 0xe4 } };
+		{ 0x872ab2a9, 0x7959, 0x4478, {0x9f, 0xed, 0x15, 0xf6, 0x18, 0x6e,
+									   0x72, 0xe4}
+	};
 
 	//! Razer Blackwidow X Chroma device.
 	// {5AF60076-ADE9-43D4-B574-52599293B554}
 	static const GUID BLACKWIDOW_X_CHROMA =
-	{ 0x5af60076, 0xade9, 0x43d4,{ 0xb5, 0x74, 0x52, 0x59, 0x92, 0x93, 0xb5, 0x54 } };
+		{ 0x5af60076, 0xade9, 0x43d4, {0xb5, 0x74, 0x52, 0x59, 0x92, 0x93,
+									   0xb5, 0x54}
+	};
 
 	//! Razer Blackwidow X TE Chroma device.
 	// {2D84DD51-3290-4AAC-9A89-D8AFDE38B57C}
 	static const GUID BLACKWIDOW_X_TE_CHROMA =
-	{ 0x2d84dd51, 0x3290, 0x4aac,{ 0x9a, 0x89, 0xd8, 0xaf, 0xde, 0x38, 0xb5, 0x7c } };
+		{ 0x2d84dd51, 0x3290, 0x4aac, {0x9a, 0x89, 0xd8, 0xaf, 0xde, 0x38,
+									   0xb5, 0x7c}
+	};
 
 	//! Razer Blade Stealth.
 	// {C83BDFE8-E7FC-40E0-99DB-872E23F19891}
 	static const GUID BLADE_STEALTH =
-	{ 0xc83bdfe8, 0xe7fc, 0x40e0,{ 0x99, 0xdb, 0x87, 0x2e, 0x23, 0xf1, 0x98, 0x91 } };
+		{ 0xc83bdfe8, 0xe7fc, 0x40e0, {0x99, 0xdb, 0x87, 0x2e, 0x23, 0xf1,
+									   0x98, 0x91}
+	};
 
 	//! Razer Blade
 	// {F2BEDFAF-A0FE-4651-9D41-B6CE603A3DDD}
 	static const GUID BLADE =
-	{ 0xf2bedfaf, 0xa0fe, 0x4651,{ 0x9d, 0x41, 0xb6, 0xce, 0x60, 0x3a, 0x3d, 0xdd } };
-
+		{ 0xf2bedfaf, 0xa0fe, 0x4651, {0x9d, 0x41, 0xb6, 0xce, 0x60, 0x3a,
+									   0x3d, 0xdd}
+	};
 
 	// Mice
 	//! Razer Deathadder Chroma device.
 	// {AEC50D91-B1F1-452F-8E16-7B73F376FDF3}
 	static const GUID DEATHADDER_CHROMA =
-	{ 0xaec50d91, 0xb1f1, 0x452f,{ 0x8e, 0x16, 0x7b, 0x73, 0xf3, 0x76, 0xfd, 0xf3 } };
+		{ 0xaec50d91, 0xb1f1, 0x452f, {0x8e, 0x16, 0x7b, 0x73, 0xf3, 0x76,
+									   0xfd, 0xf3}
+	};
 
 	//! Razer Mamba Chroma Tournament Edition device.
 	// {7EC00450-E0EE-4289-89D5-0D879C19061A}
 	static const GUID MAMBA_CHROMA_TE =
-	{ 0x7ec00450, 0xe0ee, 0x4289,{ 0x89, 0xd5, 0xd, 0x87, 0x9c, 0x19, 0x6, 0x1a } };
+		{ 0x7ec00450, 0xe0ee, 0x4289, {0x89, 0xd5, 0xd, 0x87, 0x9c, 0x19, 0x6,
+									   0x1a}
+	};
 
 	//! Razer Diamondback device.
 	// {FF8A5929-4512-4257-8D59-C647BF9935D0}
 	static const GUID DIAMONDBACK_CHROMA =
-	{ 0xff8a5929, 0x4512, 0x4257,{ 0x8d, 0x59, 0xc6, 0x47, 0xbf, 0x99, 0x35, 0xd0 } };
+		{ 0xff8a5929, 0x4512, 0x4257, {0x8d, 0x59, 0xc6, 0x47, 0xbf, 0x99,
+									   0x35, 0xd0}
+	};
 
 	//! Razer Mamba device.
 	// {D527CBDC-EB0A-483A-9E89-66D50463EC6C}
 	static const GUID MAMBA_CHROMA =
-	{ 0xd527cbdc, 0xeb0a, 0x483a,{ 0x9e, 0x89, 0x66, 0xd5, 0x4, 0x63, 0xec, 0x6c } };
+		{ 0xd527cbdc, 0xeb0a, 0x483a, {0x9e, 0x89, 0x66, 0xd5, 0x4, 0x63, 0xec,
+									   0x6c}
+	};
 
 	//! Razer Naga Epic device.
 	// {D714C50B-7158-4368-B99C-601ACB985E98}
 	static const GUID NAGA_EPIC_CHROMA =
-	{ 0xd714c50b, 0x7158, 0x4368,{ 0xb9, 0x9c, 0x60, 0x1a, 0xcb, 0x98, 0x5e, 0x98 } };
+		{ 0xd714c50b, 0x7158, 0x4368, {0xb9, 0x9c, 0x60, 0x1a, 0xcb, 0x98,
+									   0x5e, 0x98}
+	};
 
 	//! Razer Naga device.
 	// {F1876328-6CA4-46AE-BE04-BE812B414433}
 	static const GUID NAGA_CHROMA =
-	{ 0xf1876328, 0x6ca4, 0x46ae,{ 0xbe, 0x4, 0xbe, 0x81, 0x2b, 0x41, 0x44, 0x33 } };
+		{ 0xf1876328, 0x6ca4, 0x46ae, {0xbe, 0x4, 0xbe, 0x81, 0x2b, 0x41, 0x44,
+									   0x33}
+	};
 
 	//! Razer Orochi Chroma device.
 	// {52C15681-4ECE-4DD9-8A52-A1418459EB34}
 	static const GUID OROCHI_CHROMA =
-	{ 0x52c15681, 0x4ece, 0x4dd9,{ 0x8a, 0x52, 0xa1, 0x41, 0x84, 0x59, 0xeb, 0x34 } };
+		{ 0x52c15681, 0x4ece, 0x4dd9, {0x8a, 0x52, 0xa1, 0x41, 0x84, 0x59,
+									   0xeb, 0x34}
+	};
 
 	//! Razer Naga Hex Chroma device.
 	// {195D70F5-F285-4CFF-99F2-B8C0E9658DB4}
 	static const GUID NAGA_HEX_CHROMA =
-	{ 0x195d70f5, 0xf285, 0x4cff,{ 0x99, 0xf2, 0xb8, 0xc0, 0xe9, 0x65, 0x8d, 0xb4 } };
-
+		{ 0x195d70f5, 0xf285, 0x4cff, {0x99, 0xf2, 0xb8, 0xc0, 0xe9, 0x65,
+									   0x8d, 0xb4}
+	};
 
 	// Headsets
 	//! Razer Kraken 7.1 Chroma device.
 	// {CD1E09A5-D5E6-4A6C-A93B-E6D9BF1D2092}
 	static const GUID KRAKEN71_CHROMA =
-	{ 0xcd1e09a5, 0xd5e6, 0x4a6c,{ 0xa9, 0x3b, 0xe6, 0xd9, 0xbf, 0x1d, 0x20, 0x92 } };
+		{ 0xcd1e09a5, 0xd5e6, 0x4a6c, {0xa9, 0x3b, 0xe6, 0xd9, 0xbf, 0x1d,
+									   0x20, 0x92}
+	};
 
 	//! Razer ManO'War device.
 	// {DF3164D7-5408-4A0E-8A7F-A7412F26BEBF}
 	static const GUID MANOWAR_HEADSET =
-	{ 0xdf3164d7, 0x5408, 0x4a0e,{ 0x8a, 0x7f, 0xa7, 0x41, 0x2f, 0x26, 0xbe, 0xbf } };
-
+		{ 0xdf3164d7, 0x5408, 0x4a0e, {0x8a, 0x7f, 0xa7, 0x41, 0x2f, 0x26,
+									   0xbe, 0xbf}
+	};
 
 	// Mouse mat
 	//! Razer Firefly device.
 	// {80F95A94-73D2-48CA-AE9A-0986789A9AF2}
 	static const GUID FIREFLY_CHROMA =
-	{ 0x80f95a94, 0x73d2, 0x48ca,{ 0xae, 0x9a, 0x9, 0x86, 0x78, 0x9a, 0x9a, 0xf2 } };
-
+		{ 0x80f95a94, 0x73d2, 0x48ca, {0xae, 0x9a, 0x9, 0x86, 0x78, 0x9a, 0x9a,
+									   0xf2}
+	};
 
 	// Keypads
 	//! Razer Tartarus device.
 	// {00F0545C-E180-4AD1-8E8A-419061CE505E}
 	static const GUID TARTARUS_CHROMA =
-	{ 0xf0545c, 0xe180, 0x4ad1,{ 0x8e, 0x8a, 0x41, 0x90, 0x61, 0xce, 0x50, 0x5e } };
+		{ 0xf0545c, 0xe180, 0x4ad1, {0x8e, 0x8a, 0x41, 0x90, 0x61, 0xce, 0x50,
+									 0x5e}
+	};
 
 	//! Razer Orbweaver device.
 	// {9D24B0AB-0162-466C-9640-7A924AA4D9FD}
 	static const GUID ORBWEAVER_CHROMA =
-	{ 0x9d24b0ab, 0x162, 0x466c,{ 0x96, 0x40, 0x7a, 0x92, 0x4a, 0xa4, 0xd9, 0xfd } };
-
+		{ 0x9d24b0ab, 0x162, 0x466c, {0x96, 0x40, 0x7a, 0x92, 0x4a, 0xa4, 0xd9,
+									  0xfd}
+	};
 
 	// Systems
 	// {35F6F18D-1AE5-436C-A575-AB44A127903A}
 	static const GUID LENOVO_Y900 =
-	{ 0x35f6f18d, 0x1ae5, 0x436c,{ 0xa5, 0x75, 0xab, 0x44, 0xa1, 0x27, 0x90, 0x3a } };
+		{ 0x35f6f18d, 0x1ae5, 0x436c, {0xa5, 0x75, 0xab, 0x44, 0xa1, 0x27,
+									   0x90, 0x3a}
+	};
 
 	// {47DB1FA7-6B9B-4EE6-B6F4-4071A3B2053B}
 	static const GUID LENOVO_Y27 =
-	{ 0x47db1fa7, 0x6b9b, 0x4ee6,{ 0xb6, 0xf4, 0x40, 0x71, 0xa3, 0xb2, 0x5, 0x3b } };
-
+		{ 0x47db1fa7, 0x6b9b, 0x4ee6, {0xb6, 0xf4, 0x40, 0x71, 0xa3, 0xb2, 0x5,
+									   0x3b}
+	};
 
 	// Accessories
 	// {0201203B-62F3-4C50-83DD-598BABD208E0}
 	static const GUID CORE_CHROMA =
-	{ 0x201203b, 0x62f3, 0x4c50,{ 0x83, 0xdd, 0x59, 0x8b, 0xab, 0xd2, 0x8, 0xe0 } };
-
+		{ 0x201203b, 0x62f3, 0x4c50, {0x83, 0xdd, 0x59, 0x8b, 0xab, 0xd2, 0x8,
+									  0xe0}
+	};
 
 }
 
diff --git a/Aurora-RazerLEDWrapper/dllmain.cpp b/Aurora-RazerLEDWrapper/dllmain.cpp
index 65a910b..f1ae5e2 100644
--- a/Aurora-RazerLEDWrapper/dllmain.cpp
+++ b/Aurora-RazerLEDWrapper/dllmain.cpp
@@ -164,7 +164,8 @@ typedef enum
 	//500
 } Logitech_keyboardBitmapKeys;
 
-Logitech_keyboardBitmapKeys ToLogitechBitmap(int rzrow, int rzcolumn)
+Logitech_keyboardBitmapKeys
+ToLogitechBitmap (int rzrow, int rzcolumn)
 {
 	//Row 1
 	if (rzrow == 0 && rzcolumn == 1)
@@ -433,7 +433,8 @@ static unsigned char current_g4[4];
 static unsigned char current_g5[4];
 static unsigned char current_peripheral[4];
 
-struct GUIDComparer {
+struct GUIDComparer
+{
 	bool operator () (const GUID & Left, const GUID & Right) const
 	{
 		// comparison logic goes here
@@ -441,11 +442,19 @@ struct GUIDComparer {
 	}
 };
 
-static std::map<GUID, WRAPPER_EFFECT, GUIDComparer> effects;
+static
+	std::map <
+	GUID,
+	WRAPPER_EFFECT,
+	GUIDComparer >
+	effects;
 
-static std::string program_name;
+static
+	std::string
+	program_name;
 
-void write_text_to_log_file(const std::string &text)
+void
+write_text_to_log_file (const std::string & text)
 {
 	/*
 	   std::ofstream out("output.txt", std::ios_base::app);
@@ -454,10 +463,8 @@ void write_text_to_log_file(const std::string &text)
 	 */
 }
 
-BOOL WINAPI DllMain(HMODULE hModule,
-	DWORD  ul_reason_for_call,
-	LPVOID lpReserved
-)
+BOOL WINAPI
+DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
 {
 	switch (ul_reason_for_call)
 	{
@@ -474,7 +481,8 @@ BOOL WINAPI DllMain(HMODULE hModule,
 	return TRUE;
 }
 
-bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
+bool __fastcall
+WriteToPipe (WRAPPER_EFFECT effect)
 {
 	if (!isInitialized)
 		return false;
@@ -488,7 +496,8 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 	std::stringstream ss;
 
 	ss << '{';
-	ss << "\"provider\": {\"name\": \"" << program_name << "\", \"appid\": 0},";
+	ss << "\"provider\": {\"name\": \"" << program_name <<
+		"\", \"appid\": 0},";
 	ss << effect.command_cargo << ',';
 	ss << "\"bitmap\": [";
 	for (int bitm_pos = 0; bitm_pos < LOGI_LED_BITMAP_SIZE; bitm_pos += 4)
@@ -627,8 +635,7 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 	{
 		//Try to gestore handle
 		//Connect to the server pipe using CreateFile()
-		hPipe = CreateFile(
-			PIPE_NAME,   // pipe name 
+		hPipe = CreateFile (PIPE_NAME,	// pipe name 
 							GENERIC_WRITE,	// write access 
 							0,	// no sharing 
 							NULL,	// default security attributes
@@ -638,7 +645,8 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 
 		if (hPipe == NULL || hPipe == INVALID_HANDLE_VALUE)
 		{
-			DWORD last_error = GetLastError();
+			DWORD
+				last_error = GetLastError ();
 
 			switch (last_error)
 			{
@@ -655,7 +663,8 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 				write_text_to_log_file ("Pipe error, ERROR_PIPE_LOCAL");
 				break;
 			case ERROR_PIPE_NOT_CONNECTED:
-				write_text_to_log_file("Pipe error, ERROR_PIPE_NOT_CONNECTED");
+				write_text_to_log_file
+					("Pipe error, ERROR_PIPE_NOT_CONNECTED");
 				break;
 			default:
 				write_text_to_log_file ("Non-pipe related error");
@@ -666,10 +675,11 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 		}
 	}
 
-	DWORD cbBytes;
+	DWORD
+		cbBytes;
 
-	BOOL bResult = WriteFile(
-		hPipe,                // handle to pipe 
+	BOOL
+		bResult = WriteFile (hPipe,	// handle to pipe 
 							 ss.str ().c_str (),	// buffer to write from 
 							 strlen (ss.str ().c_str ()),	// number of bytes to write, include the NULL
 							 &cbBytes,	// number of bytes written 
@@ -688,27 +698,33 @@ bool __fastcall WriteToPipe(WRAPPER_EFFECT effect)
 	return false;
 }
 
-WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZPARAM pParam)
+WRAPPER_EFFECT
+HandleKeyboardEffect (ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZPARAM pParam)
 {
-	WRAPPER_EFFECT return_effect;
+	WRAPPER_EFFECT
+		return_effect;
 	std::stringstream additional_effect_data;
 
 	additional_effect_data << ',';
 
 	if (Effect == ChromaSDK::Keyboard::CHROMA_STATIC)
 	{
-		struct ChromaSDK::Keyboard::STATIC_EFFECT_TYPE *static_effect = (struct ChromaSDK::Keyboard::STATIC_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Keyboard::STATIC_EFFECT_TYPE *
+			static_effect =
+			(struct ChromaSDK::Keyboard::STATIC_EFFECT_TYPE *) pParam;
 
-		unsigned char blue = GetBValue(static_effect->Color);
-		unsigned char green = GetGValue(static_effect->Color);
-		unsigned char red = GetRValue(static_effect->Color);
+		unsigned char
+			blue = GetBValue (static_effect->Color);
+		unsigned char
+			green = GetGValue (static_effect->Color);
+		unsigned char
+			red = GetRValue (static_effect->Color);
 
 		for (int colorset = 0; colorset < LOGI_LED_BITMAP_SIZE; colorset += 4)
 		{
 			if (return_effect.bitmap[colorset] != blue ||
 				return_effect.bitmap[colorset + 1] != green ||
-				return_effect.bitmap[colorset + 2] != red
-				)
+				return_effect.bitmap[colorset + 2] != red)
 				requiresUpdate = true;
 
 			return_effect.bitmap[colorset] = blue;
@@ -717,7 +733,8 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 			return_effect.bitmap[colorset + 3] = (char) 255;
 		}
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_STATIC" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_STATIC" << "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_NONE)
 	{
@@ -725,8 +742,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 		{
 			if (return_effect.bitmap[colorset] != 0 ||
 				return_effect.bitmap[colorset + 1] != 0 ||
-				return_effect.bitmap[colorset + 2] != 0
-				)
+				return_effect.bitmap[colorset + 2] != 0)
 				requiresUpdate = true;
 
 			return_effect.bitmap[colorset] = (char) 0;
@@ -737,9 +753,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 
 		//Logo
 		if (current_logo[0] != 0 ||
-			current_logo[1] != 0 ||
-			current_logo[2] != 0
-			)
+			current_logo[1] != 0 || current_logo[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.logo[0] = 0;
@@ -748,10 +762,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 		return_effect.logo[3] = (char) 255;
 
 		//G Keys
-		if (current_g1[0] != 0 ||
-			current_g1[1] != 0 ||
-			current_g1[2] != 0
-			)
+		if (current_g1[0] != 0 || current_g1[1] != 0 || current_g1[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g1[0] = 0;
@@ -759,10 +770,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 		return_effect.g1[2] = 0;
 		return_effect.g1[3] = (char) 255;
 
-		if (current_g2[0] != 0 ||
-			current_g2[1] != 0 ||
-			current_g2[2] != 0
-			)
+		if (current_g2[0] != 0 || current_g2[1] != 0 || current_g2[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g2[0] = 0;
@@ -770,10 +778,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 		return_effect.g2[2] = 0;
 		return_effect.g2[3] = (char) 255;
 
-		if (current_g3[0] != 0 ||
-			current_g3[1] != 0 ||
-			current_g3[2] != 0
-			)
+		if (current_g3[0] != 0 || current_g3[1] != 0 || current_g3[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g3[0] = 0;
@@ -781,10 +786,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 		return_effect.g3[2] = 0;
 		return_effect.g3[3] = (char) 255;
 
-		if (current_g4[0] != 0 ||
-			current_g4[1] != 0 ||
-			current_g4[2] != 0
-			)
+		if (current_g4[0] != 0 || current_g4[1] != 0 || current_g4[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g4[0] = 0;
@@ -792,10 +794,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 		return_effect.g4[2] = 0;
 		return_effect.g4[3] = (char) 255;
 
-		if (current_g5[0] != 0 ||
-			current_g5[1] != 0 ||
-			current_g5[2] != 0
-			)
+		if (current_g5[0] != 0 || current_g5[1] != 0 || current_g5[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.g5[0] = 0;
@@ -803,31 +802,35 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 		return_effect.g5[2] = 0;
 		return_effect.g5[3] = (char) 255;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_NONE" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_NONE"
+			<< "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_CUSTOM)
 	{
-		struct ChromaSDK::Keyboard::CUSTOM_EFFECT_TYPE *custom_effect = (struct ChromaSDK::Keyboard::CUSTOM_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Keyboard::CUSTOM_EFFECT_TYPE *
+			custom_effect =
+			(struct ChromaSDK::Keyboard::CUSTOM_EFFECT_TYPE *) pParam;
 
 		for (int row = 0; row < ChromaSDK::Keyboard::MAX_ROW; row++)
 		{
 			for (int col = 0; col < ChromaSDK::Keyboard::MAX_COLUMN; col++)
 			{
-				Logitech_keyboardBitmapKeys bitmap_pos = ToLogitechBitmap(row, col);
+				Logitech_keyboardBitmapKeys
+					bitmap_pos = ToLogitechBitmap (row, col);
 
 				if (bitmap_pos != Logitech_keyboardBitmapKeys::UNKNOWN)
 				{
-					unsigned char blue = GetBValue(custom_effect->Color[row][col]);
-					unsigned char green = GetGValue(custom_effect->Color[row][col]);
-					unsigned char red = GetRValue(custom_effect->Color[row][col]);
-
+					unsigned char
+						blue = GetBValue (custom_effect->Color[row][col]);
+					unsigned char
+						green = GetGValue (custom_effect->Color[row][col]);
+					unsigned char
+						red = GetRValue (custom_effect->Color[row][col]);
 
 					if (bitmap_pos == Logitech_keyboardBitmapKeys::LOGO)
 					{
 						if (current_logo[0] != blue ||
-							current_logo[1] != green ||
-							current_logo[2] != red
-							)
+							current_logo[1] != green || current_logo[2] != red)
 							requiresUpdate = true;
 
 						return_effect.logo[0] = blue;
@@ -838,9 +841,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G1)
 					{
 						if (current_g1[0] != blue ||
-							current_g1[1] != green ||
-							current_g1[2] != red
-							)
+							current_g1[1] != green || current_g1[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g1[0] = blue;
@@ -851,9 +852,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G2)
 					{
 						if (current_g2[0] != blue ||
-							current_g2[1] != green ||
-							current_g2[2] != red
-							)
+							current_g2[1] != green || current_g2[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g2[0] = blue;
@@ -864,9 +863,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G3)
 					{
 						if (current_g3[0] != blue ||
-							current_g3[1] != green ||
-							current_g3[2] != red
-							)
+							current_g3[1] != green || current_g3[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g3[0] = blue;
@@ -877,9 +874,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G4)
 					{
 						if (current_g4[0] != blue ||
-							current_g4[1] != green ||
-							current_g4[2] != red
-							)
+							current_g4[1] != green || current_g4[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g4[0] = blue;
@@ -890,9 +885,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G5)
 					{
 						if (current_g5[0] != blue ||
-							current_g5[1] != green ||
-							current_g5[2] != red
-							)
+							current_g5[1] != green || current_g5[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g5[0] = blue;
@@ -904,44 +897,48 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					{
 						if (current_bitmap[(int) bitmap_pos] != blue ||
 							current_bitmap[(int) bitmap_pos + 1] != green ||
-							current_bitmap[(int)bitmap_pos + 2] != red
-							)
+							current_bitmap[(int) bitmap_pos + 2] != red)
 							requiresUpdate = true;
 
 						return_effect.bitmap[(int) bitmap_pos] = blue;
 						return_effect.bitmap[(int) bitmap_pos + 1] = green;
 						return_effect.bitmap[(int) bitmap_pos + 2] = red;
-						return_effect.bitmap[(int)bitmap_pos + 3] = (char)255;
+						return_effect.bitmap[(int) bitmap_pos + 3] =
+							(char) 255;
 					}
 				}
 			}
 		}
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_CUSTOM" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_CUSTOM" << "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_CUSTOM_KEY)
 	{
-		struct ChromaSDK::Keyboard::CUSTOM_KEY_EFFECT_TYPE *custom_effect = (struct ChromaSDK::Keyboard::CUSTOM_KEY_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Keyboard::CUSTOM_KEY_EFFECT_TYPE *
+			custom_effect =
+			(struct ChromaSDK::Keyboard::CUSTOM_KEY_EFFECT_TYPE *) pParam;
 
 		for (int row = 0; row < ChromaSDK::Keyboard::MAX_ROW; row++)
 		{
 			for (int col = 0; col < ChromaSDK::Keyboard::MAX_COLUMN; col++)
 			{
-				Logitech_keyboardBitmapKeys bitmap_pos = ToLogitechBitmap(row, col);
+				Logitech_keyboardBitmapKeys
+					bitmap_pos = ToLogitechBitmap (row, col);
 
 				if (bitmap_pos != Logitech_keyboardBitmapKeys::UNKNOWN)
 				{
-					unsigned char blue = GetBValue(custom_effect->Key[row][col]);
-					unsigned char green = GetGValue(custom_effect->Key[row][col]);
-					unsigned char red = GetRValue(custom_effect->Key[row][col]);
-
+					unsigned char
+						blue = GetBValue (custom_effect->Key[row][col]);
+					unsigned char
+						green = GetGValue (custom_effect->Key[row][col]);
+					unsigned char
+						red = GetRValue (custom_effect->Key[row][col]);
 
 					if (bitmap_pos == Logitech_keyboardBitmapKeys::LOGO)
 					{
 						if (current_logo[0] != blue ||
-							current_logo[1] != green ||
-							current_logo[2] != red
-							)
+							current_logo[1] != green || current_logo[2] != red)
 							requiresUpdate = true;
 
 						return_effect.logo[0] = blue;
@@ -952,9 +949,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G1)
 					{
 						if (current_g1[0] != blue ||
-							current_g1[1] != green ||
-							current_g1[2] != red
-							)
+							current_g1[1] != green || current_g1[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g1[0] = blue;
@@ -965,9 +960,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G2)
 					{
 						if (current_g2[0] != blue ||
-							current_g2[1] != green ||
-							current_g2[2] != red
-							)
+							current_g2[1] != green || current_g2[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g2[0] = blue;
@@ -978,9 +971,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G3)
 					{
 						if (current_g3[0] != blue ||
-							current_g3[1] != green ||
-							current_g3[2] != red
-							)
+							current_g3[1] != green || current_g3[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g3[0] = blue;
@@ -991,9 +982,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G4)
 					{
 						if (current_g4[0] != blue ||
-							current_g4[1] != green ||
-							current_g4[2] != red
-							)
+							current_g4[1] != green || current_g4[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g4[0] = blue;
@@ -1004,9 +993,7 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					else if (bitmap_pos == Logitech_keyboardBitmapKeys::G5)
 					{
 						if (current_g5[0] != blue ||
-							current_g5[1] != green ||
-							current_g5[2] != red
-							)
+							current_g5[1] != green || current_g5[2] != red)
 							requiresUpdate = true;
 
 						return_effect.g5[0] = blue;
@@ -1018,107 +1005,141 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 					{
 						if (current_bitmap[(int) bitmap_pos] != blue ||
 							current_bitmap[(int) bitmap_pos + 1] != green ||
-							current_bitmap[(int)bitmap_pos + 2] != red
-							)
+							current_bitmap[(int) bitmap_pos + 2] != red)
 							requiresUpdate = true;
 
 						return_effect.bitmap[(int) bitmap_pos] = blue;
 						return_effect.bitmap[(int) bitmap_pos + 1] = green;
 						return_effect.bitmap[(int) bitmap_pos + 2] = red;
-						return_effect.bitmap[(int)bitmap_pos + 3] = (char)255;
+						return_effect.bitmap[(int) bitmap_pos + 3] =
+							(char) 255;
 					}
 				}
 			}
 		}
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_CUSTOM" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_CUSTOM" << "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_BREATHING)
 	{
-		struct ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE *breathing_effect = (struct ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE *)pParam;
-
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"red_end\": " << "\"" << GetRValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\"green_end\": " << "\"" << GetGValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\blue_end\": " << "\"" << GetBValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_BREATHING" << "\"" << ',';
+		struct ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE *
+			breathing_effect =
+			(struct ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE *) pParam;
+
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"red_end\": " << "\"" <<
+			GetRValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\"green_end\": " << "\"" <<
+			GetGValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\blue_end\": " << "\"" <<
+			GetBValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_BREATHING" << "\"" << ',';
 
 		switch (breathing_effect->Type)
 		{
 		case ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE::Type::TWO_COLORS:
-			additional_effect_data << "\"effect_config\": " << "\"" << "TWO_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"TWO_COLORS" << "\"";
 			break;
 		case ChromaSDK::Keyboard::BREATHING_EFFECT_TYPE::Type::RANDOM_COLORS:
-			additional_effect_data << "\"effect_config\": " << "\"" << "RANDOM_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"RANDOM_COLORS" << "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "INVALID" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"INVALID" << "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_REACTIVE)
 	{
-		struct ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE *reactive_effect = (struct ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE *
+			reactive_effect =
+			(struct ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE *) pParam;
 
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_REACTIVE" << "\"" << ',';
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_REACTIVE" << "\"" << ',';
 
 		switch (reactive_effect->Duration)
 		{
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_NONE:
-			additional_effect_data << "\"effect_config\": " << "\"" << "NONE" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "NONE"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_SHORT:
-			additional_effect_data << "\"effect_config\": " << "\"" << "SHORT" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "SHORT"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_MEDIUM:
-			additional_effect_data << "\"effect_config\": " << "\"" << "MEDIUM" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "MEDIUM"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_LONG:
-			additional_effect_data << "\"effect_config\": " << "\"" << "LONG" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "LONG"
+				<< "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "INVALID" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"INVALID" << "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_SPECTRUMCYCLING)
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_SPECTRUMCYCLING" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_SPECTRUMCYCLING" << "\"";
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_WAVE)
 	{
-		struct ChromaSDK::Keyboard::WAVE_EFFECT_TYPE *wave_effect = (struct ChromaSDK::Keyboard::WAVE_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Keyboard::WAVE_EFFECT_TYPE *
+			wave_effect =
+			(struct ChromaSDK::Keyboard::WAVE_EFFECT_TYPE *) pParam;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_WAVE" << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_WAVE"
+			<< "\"" << ',';
 
 		switch (wave_effect->Direction)
 		{
 		case ChromaSDK::Keyboard::WAVE_EFFECT_TYPE::DIRECTION_NONE:
-			additional_effect_data << "\"effect_config\": " << "\"" << "NONE" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "NONE"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::WAVE_EFFECT_TYPE::DIRECTION_LEFT_TO_RIGHT:
-			additional_effect_data << "\"effect_config\": " << "\"" << "LEFT_TO_RIGHT" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"LEFT_TO_RIGHT" << "\"";
 			break;
 		case ChromaSDK::Keyboard::WAVE_EFFECT_TYPE::DIRECTION_RIGHT_TO_LEFT:
-			additional_effect_data << "\"effect_config\": " << "\"" << "RIGHT_TO_LEFT" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"RIGHT_TO_LEFT" << "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "INVALID" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"INVALID" << "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Keyboard::CHROMA_STARLIGHT)
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_STARLIGHT" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_STARLIGHT" << "\"";
 	}
 	else
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_INVALID" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_INVALID" << "\"";
 	}
 
 	std::stringstream ss;
@@ -1134,9 +1155,11 @@ WRAPPER_EFFECT HandleKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZ
 	return return_effect;
 }
 
-WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam)
+WRAPPER_EFFECT
+HandleMouseEffect (ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam)
 {
-	WRAPPER_EFFECT return_effect;
+	WRAPPER_EFFECT
+		return_effect;
 	std::stringstream additional_effect_data;
 
 	additional_effect_data << ',';
@@ -1169,18 +1192,22 @@ WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM
 
 	if (Effect == ChromaSDK::Mouse::CHROMA_STATIC)
 	{
-		struct ChromaSDK::Mouse::STATIC_EFFECT_TYPE *static_effect = (struct ChromaSDK::Mouse::STATIC_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Mouse::STATIC_EFFECT_TYPE *
+			static_effect =
+			(struct ChromaSDK::Mouse::STATIC_EFFECT_TYPE *) pParam;
 
-		unsigned char blue = GetBValue(static_effect->Color);
-		unsigned char green = GetGValue(static_effect->Color);
-		unsigned char red = GetRValue(static_effect->Color);
+		unsigned char
+			blue = GetBValue (static_effect->Color);
+		unsigned char
+			green = GetGValue (static_effect->Color);
+		unsigned char
+			red = GetRValue (static_effect->Color);
 
-		if (static_effect->LEDId == ChromaSDK::Mouse::RZLED::RZLED_LOGO || static_effect->LEDId == ChromaSDK::Mouse::RZLED::RZLED_ALL)
+		if (static_effect->LEDId == ChromaSDK::Mouse::RZLED::RZLED_LOGO
+			|| static_effect->LEDId == ChromaSDK::Mouse::RZLED::RZLED_ALL)
 		{
 			if (current_peripheral[0] != blue ||
-				current_peripheral[1] != green ||
-				current_peripheral[2] != red
-				)
+				current_peripheral[1] != green || current_peripheral[2] != red)
 				requiresUpdate = true;
 
 			return_effect.peripheral[0] = blue;
@@ -1189,23 +1216,28 @@ WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM
 			return_effect.peripheral[3] = (char) 255;
 		}
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_STATIC" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_STATIC" << "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_BLINKING)
 	{
-		struct ChromaSDK::Mouse::BLINKING_EFFECT_TYPE *blinking_effect = (struct ChromaSDK::Mouse::BLINKING_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Mouse::BLINKING_EFFECT_TYPE *
+			blinking_effect =
+			(struct ChromaSDK::Mouse::BLINKING_EFFECT_TYPE *) pParam;
 
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(blinking_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(blinking_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(blinking_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_BLINKING" << "\"";
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (blinking_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (blinking_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (blinking_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_BLINKING" << "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_NONE)
 	{
 		if (current_peripheral[0] != 0 ||
-			current_peripheral[1] != 0 ||
-			current_peripheral[2] != 0
-			)
+			current_peripheral[1] != 0 || current_peripheral[2] != 0)
 			requiresUpdate = true;
 
 		return_effect.peripheral[0] = (char) 0;
@@ -1213,20 +1245,30 @@ WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM
 		return_effect.peripheral[2] = (char) 0;
 		return_effect.peripheral[3] = (char) 255;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_NONE" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_NONE"
+			<< "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_CUSTOM)
 	{
-		struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE *custom_effect = (struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE *)pParam;
-
-		unsigned char blue = GetBValue(custom_effect->Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
-		unsigned char green = GetGValue(custom_effect->Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
-		unsigned char red = GetRValue(custom_effect->Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
+		struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE *
+			custom_effect =
+			(struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE *) pParam;
+
+		unsigned char
+			blue =
+			GetBValue (custom_effect->
+					   Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
+		unsigned char
+			green =
+			GetGValue (custom_effect->
+					   Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
+		unsigned char
+			red =
+			GetRValue (custom_effect->
+					   Color[ChromaSDK::Mouse::RZLED::RZLED_LOGO]);
 
 		if (current_peripheral[0] != blue ||
-			current_peripheral[1] != green ||
-			current_peripheral[2] != red
-			)
+			current_peripheral[1] != green || current_peripheral[2] != red)
 			requiresUpdate = true;
 
 		return_effect.peripheral[0] = blue;
@@ -1234,81 +1276,125 @@ WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM
 		return_effect.peripheral[2] = red;
 		return_effect.peripheral[3] = (char) 255;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_CUSTOM" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_CUSTOM" << "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_BREATHING)
 	{
-		struct ChromaSDK::Mouse::BREATHING_EFFECT_TYPE *breathing_effect = (struct ChromaSDK::Mouse::BREATHING_EFFECT_TYPE *)pParam;
-
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(breathing_effect->Color1) << "\"" << ',';
-		additional_effect_data << "\"red_end\": " << "\"" << GetRValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\"green_end\": " << "\"" << GetGValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\blue_end\": " << "\"" << GetBValue(breathing_effect->Color2) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_BREATHING" << "\"" << ',';
+		struct ChromaSDK::Mouse::BREATHING_EFFECT_TYPE *
+			breathing_effect =
+			(struct ChromaSDK::Mouse::BREATHING_EFFECT_TYPE *) pParam;
+
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (breathing_effect->Color1) << "\"" << ',';
+		additional_effect_data << "\"red_end\": " << "\"" <<
+			GetRValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\"green_end\": " << "\"" <<
+			GetGValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\blue_end\": " << "\"" <<
+			GetBValue (breathing_effect->Color2) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_BREATHING" << "\"" << ',';
 
 		switch (breathing_effect->Type)
 		{
 		case ChromaSDK::Mouse::BREATHING_EFFECT_TYPE::Type::ONE_COLOR:
-			additional_effect_data << "\"effect_config\": " << "\"" << "TWO_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"TWO_COLORS" << "\"";
 			break;
 		case ChromaSDK::Mouse::BREATHING_EFFECT_TYPE::Type::TWO_COLORS:
-			additional_effect_data << "\"effect_config\": " << "\"" << "TWO_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"TWO_COLORS" << "\"";
 			break;
 		case ChromaSDK::Mouse::BREATHING_EFFECT_TYPE::Type::RANDOM_COLORS:
-			additional_effect_data << "\"effect_config\": " << "\"" << "RANDOM_COLORS" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"RANDOM_COLORS" << "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "INVALID" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" <<
+				"INVALID" << "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_REACTIVE)
 	{
-		struct ChromaSDK::Mouse::REACTIVE_EFFECT_TYPE *reactive_effect = (struct ChromaSDK::Mouse::REACTIVE_EFFECT_TYPE *)pParam;
+		struct ChromaSDK::Mouse::REACTIVE_EFFECT_TYPE *
+			reactive_effect =
+			(struct ChromaSDK::Mouse::REACTIVE_EFFECT_TYPE *) pParam;
 
-		additional_effect_data << "\"red_start\": " << "\"" << GetRValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"green_start\": " << "\"" << GetGValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"blue_start\": " << "\"" << GetBValue(reactive_effect->Color) << "\"" << ',';
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_REACTIVE" << "\"" << ',';
+		additional_effect_data << "\"red_start\": " << "\"" <<
+			GetRValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"green_start\": " << "\"" <<
+			GetGValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"blue_start\": " << "\"" <<
+			GetBValue (reactive_effect->Color) << "\"" << ',';
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_REACTIVE" << "\"" << ',';
 
 		switch (reactive_effect->Duration)
 		{
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_SHORT:
-			additional_effect_data << "\"effect_config\": " << "\"" << "SHORT" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "SHORT"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_MEDIUM:
-			additional_effect_data << "\"effect_config\": " << "\"" << "MEDIUM" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "MEDIUM"
+				<< "\"";
 			break;
 		case ChromaSDK::Keyboard::REACTIVE_EFFECT_TYPE::Duration::DURATION_LONG:
-			additional_effect_data << "\"effect_config\": " << "\"" << "LONG" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "LONG"
+				<< "\"";
 			break;
 		default:
-			additional_effect_data << "\"effect_config\": " << "\"" << "NONE" << "\"";
+			additional_effect_data << "\"effect_config\": " << "\"" << "NONE"
+				<< "\"";
 			break;
 		}
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_SPECTRUMCYCLING)
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_SPECTRUMCYCLING" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_SPECTRUMCYCLING" << "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_WAVE)
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_WAVE" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_WAVE"
+			<< "\"";
 	}
 	else if (Effect == ChromaSDK::Mouse::CHROMA_CUSTOM2)
 	{
-		struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE2 *custom_effect = (struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE2 *)pParam;
-
-		unsigned char blue = GetBValue(custom_effect->Color[HIBYTE(ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE(ChromaSDK::Mouse::RZLED2_LOGO)]);
-		unsigned char green = GetGValue(custom_effect->Color[HIBYTE(ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE(ChromaSDK::Mouse::RZLED2_LOGO)]);
-		unsigned char red = GetRValue(custom_effect->Color[HIBYTE(ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE(ChromaSDK::Mouse::RZLED2_LOGO)]);
+		struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE2 *
+			custom_effect =
+			(struct ChromaSDK::Mouse::CUSTOM_EFFECT_TYPE2 *) pParam;
+
+		unsigned char
+			blue =
+			GetBValue (custom_effect->
+					   Color[HIBYTE (ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE
+																	 (ChromaSDK::
+																	  Mouse::
+																	  RZLED2_LOGO)]);
+		unsigned char
+			green =
+			GetGValue (custom_effect->
+					   Color[HIBYTE (ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE
+																	 (ChromaSDK::
+																	  Mouse::
+																	  RZLED2_LOGO)]);
+		unsigned char
+			red =
+			GetRValue (custom_effect->
+					   Color[HIBYTE (ChromaSDK::Mouse::RZLED2_LOGO)][LOBYTE
+																	 (ChromaSDK::
+																	  Mouse::
+																	  RZLED2_LOGO)]);
 
 		if (current_peripheral[0] != blue ||
-			current_peripheral[1] != green ||
-			current_peripheral[2] != red
-			)
+			current_peripheral[1] != green || current_peripheral[2] != red)
 			requiresUpdate = true;
 
 		return_effect.peripheral[0] = blue;
@@ -1316,11 +1402,13 @@ WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM
 		return_effect.peripheral[2] = red;
 		return_effect.peripheral[3] = (char) 255;
 
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_CUSTOM2" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_CUSTOM2" << "\"";
 	}
 	else
 	{
-		additional_effect_data << "\"effect_type\": " << "\"" << "CHROMA_INVALID" << "\"";
+		additional_effect_data << "\"effect_type\": " << "\"" <<
+			"CHROMA_INVALID" << "\"";
 	}
 
 	std::stringstream ss;
@@ -1337,21 +1425,28 @@ WRAPPER_EFFECT HandleMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM
 }
 
 #ifdef __cplusplus
-extern "C" {
+extern
+	"C"
+{
 #endif
 
-	__declspec(dllexport) RZRESULT Init()
+	__declspec (dllexport) RZRESULT
+	Init ()
 	{
 		write_text_to_log_file ("Call, Init()");
 
 		if (!isInitialized)
 		{
 			//Get Application name
-			CHAR pBuf[MAX_PATH];
-			int bytes = GetModuleFileNameA(NULL, pBuf, MAX_PATH);
-			std::string filepath = pBuf;
-
-			int fn_beginning = 0;
+			CHAR
+				pBuf[MAX_PATH];
+			int
+				bytes = GetModuleFileNameA (NULL, pBuf, MAX_PATH);
+			std::string
+				filepath = pBuf;
+
+			int
+				fn_beginning = 0;
 			for (int chr_pos = strlen (pBuf) - 1; chr_pos > -1; chr_pos--)
 			{
 				if (pBuf[chr_pos] == '\\')
@@ -1364,8 +1459,7 @@ extern "C" {
 			program_name = filepath.substr (fn_beginning);
 
 			//Connect to the server pipe using CreateFile()
-			hPipe = CreateFile(
-				PIPE_NAME,   // pipe name 
+			hPipe = CreateFile (PIPE_NAME,	// pipe name 
 								GENERIC_WRITE,	// write access 
 								0,	// no sharing 
 								NULL,	// default security attributes
@@ -1375,7 +1469,8 @@ extern "C" {
 
 			if (hPipe == NULL || hPipe == INVALID_HANDLE_VALUE)
 			{
-				DWORD last_error = GetLastError();
+				DWORD
+					last_error = GetLastError ();
 
 				switch (last_error)
 				{
@@ -1383,16 +1478,19 @@ extern "C" {
 					write_text_to_log_file ("Pipe error, ERROR_PIPE_BUSY");
 					break;
 				case ERROR_PIPE_CONNECTED:
-					write_text_to_log_file("Pipe error, ERROR_PIPE_CONNECTED");
+					write_text_to_log_file
+						("Pipe error, ERROR_PIPE_CONNECTED");
 					break;
 				case ERROR_PIPE_LISTENING:
-					write_text_to_log_file("Pipe error, ERROR_PIPE_LISTENING");
+					write_text_to_log_file
+						("Pipe error, ERROR_PIPE_LISTENING");
 					break;
 				case ERROR_PIPE_LOCAL:
 					write_text_to_log_file ("Pipe error, ERROR_PIPE_LOCAL");
 					break;
 				case ERROR_PIPE_NOT_CONNECTED:
-					write_text_to_log_file("Pipe error, ERROR_PIPE_NOT_CONNECTED");
+					write_text_to_log_file
+						("Pipe error, ERROR_PIPE_NOT_CONNECTED");
 					break;
 				default:
 					write_text_to_log_file ("Non-pipe related error");
@@ -1414,7 +1512,8 @@ extern "C" {
 		return RZRESULT_SUCCESS;
 	}
 
-	__declspec(dllexport) RZRESULT UnInit()
+	__declspec (dllexport) RZRESULT
+	UnInit ()
 	{
 		if (isInitialized && (hPipe != NULL && hPipe != INVALID_HANDLE_VALUE))
 			CloseHandle (hPipe);
@@ -1423,11 +1522,14 @@ extern "C" {
 		return RZRESULT_SUCCESS;
 	}
 
-	__declspec(dllexport) RZRESULT CreateEffect(RZDEVICEID DeviceId, ChromaSDK::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateEffect (RZDEVICEID DeviceId, ChromaSDK::EFFECT_TYPE Effect,
+				  PRZPARAM pParam, RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
-			WRAPPER_EFFECT createdEffect;
+			WRAPPER_EFFECT
+				createdEffect;
 
 			if (DeviceId == ChromaSDK::BLACKWIDOW_CHROMA)
 			{
@@ -1442,10 +1544,13 @@ extern "C" {
 					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_WAVE;
 					break;
 				case ChromaSDK::CHROMA_SPECTRUMCYCLING:
-					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_SPECTRUMCYCLING;
+					kbType =
+						ChromaSDK::Keyboard::EFFECT_TYPE::
+						CHROMA_SPECTRUMCYCLING;
 					break;
 				case ChromaSDK::CHROMA_BREATHING:
-					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_BREATHING;
+					kbType =
+						ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_BREATHING;
 					break;
 				case ChromaSDK::CHROMA_REACTIVE:
 					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_REACTIVE;
@@ -1457,7 +1562,8 @@ extern "C" {
 					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_CUSTOM;
 					break;
 				case ChromaSDK::CHROMA_STARLIGHT:
-					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_STARLIGHT;
+					kbType =
+						ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_STARLIGHT;
 					break;
 				default:
 					kbType = ChromaSDK::Keyboard::EFFECT_TYPE::CHROMA_INVALID;
@@ -1479,10 +1585,12 @@ extern "C" {
 					mouseType = ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_WAVE;
 					break;
 				case ChromaSDK::CHROMA_SPECTRUMCYCLING:
-					mouseType = ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_SPECTRUMCYCLING;
+					mouseType =
+						ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_SPECTRUMCYCLING;
 					break;
 				case ChromaSDK::CHROMA_BREATHING:
-					mouseType = ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_BREATHING;
+					mouseType =
+						ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_BREATHING;
 					break;
 				case ChromaSDK::CHROMA_BLINKING:
 					mouseType = ChromaSDK::Mouse::EFFECT_TYPE::CHROMA_BLINKING;
@@ -1528,13 +1636,16 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateKeyboardEffect (ChromaSDK::Keyboard::EFFECT_TYPE Effect,
+						  PRZPARAM pParam, RZEFFECTID * pEffectId)
 	{
 		write_text_to_log_file ("Call, CreateKeyboardEffect()");
 
 		if (isInitialized)
 		{
-			WRAPPER_EFFECT kbEffect = HandleKeyboardEffect(Effect, pParam);
+			WRAPPER_EFFECT
+				kbEffect = HandleKeyboardEffect (Effect, pParam);
 
 			if (pEffectId == NULL)
 			{
@@ -1556,7 +1667,9 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateHeadsetEffect(ChromaSDK::Headset::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateHeadsetEffect (ChromaSDK::Headset::EFFECT_TYPE Effect,
+						 PRZPARAM pParam, RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
@@ -1599,7 +1712,9 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateMousepadEffect(ChromaSDK::Mousepad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateMousepadEffect (ChromaSDK::Mousepad::EFFECT_TYPE Effect,
+						  PRZPARAM pParam, RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
@@ -1635,11 +1750,14 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateMouseEffect (ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam,
+					   RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
-			WRAPPER_EFFECT mouseEffect = HandleMouseEffect(Effect, pParam);
+			WRAPPER_EFFECT
+				mouseEffect = HandleMouseEffect (Effect, pParam);
 
 			if (pEffectId == NULL)
 			{
@@ -1661,7 +1779,9 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT CreateKeypadEffect(ChromaSDK::Keypad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID *pEffectId)
+	__declspec (dllexport) RZRESULT
+	CreateKeypadEffect (ChromaSDK::Keypad::EFFECT_TYPE Effect, PRZPARAM pParam,
+						RZEFFECTID * pEffectId)
 	{
 		if (isInitialized)
 		{
@@ -1698,7 +1818,8 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT SetEffect(RZEFFECTID EffectId)
+	__declspec (dllexport) RZRESULT
+	SetEffect (RZEFFECTID EffectId)
 	{
 		if (isInitialized)
 		{
@@ -1716,7 +1837,8 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT DeleteEffect(RZEFFECTID EffectId)
+	__declspec (dllexport) RZRESULT
+	DeleteEffect (RZEFFECTID EffectId)
 	{
 		if (isInitialized)
 		{
@@ -1731,7 +1853,8 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT RegisterEventNotification(HWND hWnd)
+	__declspec (dllexport) RZRESULT
+	RegisterEventNotification (HWND hWnd)
 	{
 		if (isInitialized)
 		{
@@ -1745,7 +1868,8 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT UnregisterEventNotification(HWND hWnd)
+	__declspec (dllexport) RZRESULT
+	UnregisterEventNotification (HWND hWnd)
 	{
 		if (isInitialized)
 		{
@@ -1759,14 +1883,17 @@ extern "C" {
 		}
 	}
 
-	__declspec(dllexport) RZRESULT QueryDevice(RZDEVICEID DeviceId, ChromaSDK::DEVICE_INFO_TYPE &DeviceInfo)
+	__declspec (dllexport) RZRESULT
+	QueryDevice (RZDEVICEID DeviceId, ChromaSDK::DEVICE_INFO_TYPE & DeviceInfo)
 	{
 		if (isInitialized)
 		{
 			if (DeviceId == ChromaSDK::BLACKWIDOW_CHROMA)
-				DeviceInfo.DeviceType = ChromaSDK::DEVICE_INFO_TYPE::DeviceType::DEVICE_KEYBOARD;
+				DeviceInfo.DeviceType =
+					ChromaSDK::DEVICE_INFO_TYPE::DeviceType::DEVICE_KEYBOARD;
 			else if (DeviceId == ChromaSDK::DEATHADDER_CHROMA)
-				DeviceInfo.DeviceType = ChromaSDK::DEVICE_INFO_TYPE::DeviceType::DEVICE_MOUSE;
+				DeviceInfo.DeviceType =
+					ChromaSDK::DEVICE_INFO_TYPE::DeviceType::DEVICE_MOUSE;
 			else
 			{
 				DeviceInfo.Connected = 0;
